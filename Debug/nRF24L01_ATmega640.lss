
nRF24L01_ATmega640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  000012f8  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800240  00800240  000013cc  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003430  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000163e  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad7  00000000  00000000  0000615e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  00007c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a93  00000000  00000000  000082a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000216a  00000000  00000000  00008d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000aea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 67 06 	jmp	0xcce	; 0xcce <__vector_4>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e8 ef       	ldi	r30, 0xF8	; 248
      f8:	f2 e1       	ldi	r31, 0x12	; 18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a0 34       	cpi	r26, 0x40	; 64
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	a0 e4       	ldi	r26, 0x40	; 64
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a6 35       	cpi	r26, 0x56	; 86
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 21 03 	call	0x642	; 0x642 <main>
     11a:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setup_adc>:
     122:	ec e7       	ldi	r30, 0x7C	; 124
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	80 64       	ori	r24, 0x40	; 64
     12a:	80 83       	st	Z, r24
     12c:	ea e7       	ldi	r30, 0x7A	; 122
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	87 68       	ori	r24, 0x87	; 135
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <analog_read>:
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	90 81       	ld	r25, Z
     13e:	98 7f       	andi	r25, 0xF8	; 248
     140:	87 70       	andi	r24, 0x07	; 7
     142:	89 2b       	or	r24, r25
     144:	80 83       	st	Z, r24
     146:	ea e7       	ldi	r30, 0x7A	; 122
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	80 64       	ori	r24, 0x40	; 64
     14e:	80 83       	st	Z, r24
     150:	80 81       	ld	r24, Z
     152:	84 ff       	sbrs	r24, 4
     154:	fd cf       	rjmp	.-6      	; 0x150 <analog_read+0x18>
     156:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	98 2f       	mov	r25, r24
     162:	88 27       	eor	r24, r24
     164:	88 27       	eor	r24, r24
     166:	9f 72       	andi	r25, 0x2F	; 47
     168:	82 2b       	or	r24, r18
     16a:	08 95       	ret

0000016c <analog_get_average>:
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	e6 2e       	mov	r14, r22
     17c:	f1 2c       	mov	r15, r1
     17e:	1e 14       	cp	r1, r14
     180:	1f 04       	cpc	r1, r15
     182:	ac f4       	brge	.+42     	; 0x1ae <analog_get_average+0x42>
     184:	d8 2e       	mov	r13, r24
     186:	c0 e0       	ldi	r28, 0x00	; 0
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	8d 2d       	mov	r24, r13
     190:	0e 94 9c 00 	call	0x138	; 0x138 <analog_read>
     194:	08 0f       	add	r16, r24
     196:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     198:	8f e9       	ldi	r24, 0x9F	; 159
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <analog_get_average+0x30>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <analog_get_average+0x36>
     1a2:	00 00       	nop
     1a4:	21 96       	adiw	r28, 0x01	; 1
     1a6:	ce 15       	cp	r28, r14
     1a8:	df 05       	cpc	r29, r15
     1aa:	89 f7       	brne	.-30     	; 0x18e <analog_get_average+0x22>
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <analog_get_average+0x46>
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	c8 01       	movw	r24, r16
     1b4:	b7 01       	movw	r22, r14
     1b6:	0e 94 1d 09 	call	0x123a	; 0x123a <__divmodhi4>
     1ba:	cb 01       	movw	r24, r22
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	08 95       	ret

000001cc <setup_ports>:
     1cc:	ea e0       	ldi	r30, 0x0A	; 10
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z
     1d2:	8f 63       	ori	r24, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	08 95       	ret

000001d8 <LED_check>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	eb e0       	ldi	r30, 0x0B	; 11
     1de:	f1 e0       	ldi	r31, 0x01	; 1
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	80 83       	st	Z, r24
     1e6:	8f e3       	ldi	r24, 0x3F	; 63
     1e8:	9c e9       	ldi	r25, 0x9C	; 156
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LED_check+0x12>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LED_check+0x18>
     1f0:	00 00       	nop
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	80 83       	st	Z, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	82 60       	ori	r24, 0x02	; 2
     1fc:	80 83       	st	Z, r24
     1fe:	8f e3       	ldi	r24, 0x3F	; 63
     200:	9c e9       	ldi	r25, 0x9C	; 156
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <LED_check+0x2a>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LED_check+0x30>
     208:	00 00       	nop
     20a:	80 81       	ld	r24, Z
     20c:	8d 7f       	andi	r24, 0xFD	; 253
     20e:	80 83       	st	Z, r24
     210:	80 81       	ld	r24, Z
     212:	84 60       	ori	r24, 0x04	; 4
     214:	80 83       	st	Z, r24
     216:	8f e3       	ldi	r24, 0x3F	; 63
     218:	9c e9       	ldi	r25, 0x9C	; 156
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <LED_check+0x42>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <LED_check+0x48>
     220:	00 00       	nop
     222:	80 81       	ld	r24, Z
     224:	8b 7f       	andi	r24, 0xFB	; 251
     226:	80 83       	st	Z, r24
     228:	80 81       	ld	r24, Z
     22a:	88 60       	ori	r24, 0x08	; 8
     22c:	80 83       	st	Z, r24
     22e:	8f e3       	ldi	r24, 0x3F	; 63
     230:	9c e9       	ldi	r25, 0x9C	; 156
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LED_check+0x5a>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LED_check+0x60>
     238:	00 00       	nop
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	80 83       	st	Z, r24
     240:	80 81       	ld	r24, Z
     242:	80 61       	ori	r24, 0x10	; 16
     244:	80 83       	st	Z, r24
     246:	8f e3       	ldi	r24, 0x3F	; 63
     248:	9c e9       	ldi	r25, 0x9C	; 156
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <LED_check+0x72>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <LED_check+0x78>
     250:	00 00       	nop
     252:	80 81       	ld	r24, Z
     254:	8f 7e       	andi	r24, 0xEF	; 239
     256:	80 83       	st	Z, r24
     258:	80 81       	ld	r24, Z
     25a:	80 62       	ori	r24, 0x20	; 32
     25c:	80 83       	st	Z, r24
     25e:	8f e3       	ldi	r24, 0x3F	; 63
     260:	9c e9       	ldi	r25, 0x9C	; 156
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LED_check+0x8a>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LED_check+0x90>
     268:	00 00       	nop
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	9c e9       	ldi	r25, 0x9C	; 156
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <LED_check+0x96>
     272:	00 c0       	rjmp	.+0      	; 0x274 <LED_check+0x9c>
     274:	00 00       	nop
     276:	80 81       	ld	r24, Z
     278:	8f 7d       	andi	r24, 0xDF	; 223
     27a:	80 83       	st	Z, r24
     27c:	80 81       	ld	r24, Z
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	80 83       	st	Z, r24
     282:	8f e3       	ldi	r24, 0x3F	; 63
     284:	9c e9       	ldi	r25, 0x9C	; 156
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LED_check+0xae>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LED_check+0xb4>
     28c:	00 00       	nop
     28e:	80 81       	ld	r24, Z
     290:	8f 7e       	andi	r24, 0xEF	; 239
     292:	80 83       	st	Z, r24
     294:	80 81       	ld	r24, Z
     296:	88 60       	ori	r24, 0x08	; 8
     298:	80 83       	st	Z, r24
     29a:	8f e3       	ldi	r24, 0x3F	; 63
     29c:	9c e9       	ldi	r25, 0x9C	; 156
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <LED_check+0xc6>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LED_check+0xcc>
     2a4:	00 00       	nop
     2a6:	80 81       	ld	r24, Z
     2a8:	87 7f       	andi	r24, 0xF7	; 247
     2aa:	80 83       	st	Z, r24
     2ac:	80 81       	ld	r24, Z
     2ae:	84 60       	ori	r24, 0x04	; 4
     2b0:	80 83       	st	Z, r24
     2b2:	8f e3       	ldi	r24, 0x3F	; 63
     2b4:	9c e9       	ldi	r25, 0x9C	; 156
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LED_check+0xde>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LED_check+0xe4>
     2bc:	00 00       	nop
     2be:	80 81       	ld	r24, Z
     2c0:	8b 7f       	andi	r24, 0xFB	; 251
     2c2:	80 83       	st	Z, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	82 60       	ori	r24, 0x02	; 2
     2c8:	80 83       	st	Z, r24
     2ca:	8f e3       	ldi	r24, 0x3F	; 63
     2cc:	9c e9       	ldi	r25, 0x9C	; 156
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <LED_check+0xf6>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LED_check+0xfc>
     2d4:	00 00       	nop
     2d6:	80 81       	ld	r24, Z
     2d8:	8d 7f       	andi	r24, 0xFD	; 253
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	80 83       	st	Z, r24
     2e2:	8f e3       	ldi	r24, 0x3F	; 63
     2e4:	9c e9       	ldi	r25, 0x9C	; 156
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LED_check+0x10e>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LED_check+0x114>
     2ec:	00 00       	nop
     2ee:	80 81       	ld	r24, Z
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	80 83       	st	Z, r24
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	31 09       	sbc	r19, r1
     2f8:	09 f0       	breq	.+2      	; 0x2fc <LED_check+0x124>
     2fa:	72 cf       	rjmp	.-284    	; 0x1e0 <LED_check+0x8>
     2fc:	08 95       	ret

000002fe <data_to_port>:
     2fe:	80 ff       	sbrs	r24, 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <data_to_port+0x8>
     302:	43 9a       	sbi	0x08, 3	; 8
     304:	01 c0       	rjmp	.+2      	; 0x308 <data_to_port+0xa>
     306:	43 98       	cbi	0x08, 3	; 8
     308:	81 ff       	sbrs	r24, 1
     30a:	02 c0       	rjmp	.+4      	; 0x310 <data_to_port+0x12>
     30c:	44 9a       	sbi	0x08, 4	; 8
     30e:	01 c0       	rjmp	.+2      	; 0x312 <data_to_port+0x14>
     310:	44 98       	cbi	0x08, 4	; 8
     312:	82 ff       	sbrs	r24, 2
     314:	02 c0       	rjmp	.+4      	; 0x31a <data_to_port+0x1c>
     316:	45 9a       	sbi	0x08, 5	; 8
     318:	01 c0       	rjmp	.+2      	; 0x31c <data_to_port+0x1e>
     31a:	45 98       	cbi	0x08, 5	; 8
     31c:	83 ff       	sbrs	r24, 3
     31e:	02 c0       	rjmp	.+4      	; 0x324 <data_to_port+0x26>
     320:	46 9a       	sbi	0x08, 6	; 8
     322:	01 c0       	rjmp	.+2      	; 0x326 <data_to_port+0x28>
     324:	46 98       	cbi	0x08, 6	; 8
     326:	84 ff       	sbrs	r24, 4
     328:	02 c0       	rjmp	.+4      	; 0x32e <data_to_port+0x30>
     32a:	47 9a       	sbi	0x08, 7	; 8
     32c:	01 c0       	rjmp	.+2      	; 0x330 <data_to_port+0x32>
     32e:	47 98       	cbi	0x08, 7	; 8
     330:	85 ff       	sbrs	r24, 5
     332:	02 c0       	rjmp	.+4      	; 0x338 <data_to_port+0x3a>
     334:	a0 9a       	sbi	0x14, 0	; 20
     336:	01 c0       	rjmp	.+2      	; 0x33a <data_to_port+0x3c>
     338:	a0 98       	cbi	0x14, 0	; 20
     33a:	86 ff       	sbrs	r24, 6
     33c:	02 c0       	rjmp	.+4      	; 0x342 <data_to_port+0x44>
     33e:	a1 9a       	sbi	0x14, 1	; 20
     340:	01 c0       	rjmp	.+2      	; 0x344 <data_to_port+0x46>
     342:	a1 98       	cbi	0x14, 1	; 20
     344:	88 23       	and	r24, r24
     346:	14 f4       	brge	.+4      	; 0x34c <data_to_port+0x4e>
     348:	5f 9a       	sbi	0x0b, 7	; 11
     34a:	08 95       	ret
     34c:	5f 98       	cbi	0x0b, 7	; 11
     34e:	08 95       	ret

00000350 <lcd_send_cmd>:
     350:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>
     354:	42 98       	cbi	0x08, 2	; 8
     356:	41 98       	cbi	0x08, 1	; 8
     358:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35a:	8f e8       	ldi	r24, 0x8F	; 143
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <lcd_send_cmd+0xe>
     362:	00 c0       	rjmp	.+0      	; 0x364 <lcd_send_cmd+0x14>
     364:	00 00       	nop
     366:	40 98       	cbi	0x08, 0	; 8
     368:	08 95       	ret

0000036a <setup_lcd>:
     36a:	87 b1       	in	r24, 0x07	; 7
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	87 b9       	out	0x07, r24	; 7
     370:	83 b3       	in	r24, 0x13	; 19
     372:	83 60       	ori	r24, 0x03	; 3
     374:	83 bb       	out	0x13, r24	; 19
     376:	57 9a       	sbi	0x0a, 7	; 10
     378:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	2f ef       	ldi	r18, 0xFF	; 255
     37c:	83 ed       	ldi	r24, 0xD3	; 211
     37e:	90 e3       	ldi	r25, 0x30	; 48
     380:	21 50       	subi	r18, 0x01	; 1
     382:	80 40       	sbci	r24, 0x00	; 0
     384:	90 40       	sbci	r25, 0x00	; 0
     386:	e1 f7       	brne	.-8      	; 0x380 <setup_lcd+0x16>
     388:	00 c0       	rjmp	.+0      	; 0x38a <setup_lcd+0x20>
     38a:	00 00       	nop
     38c:	80 e3       	ldi	r24, 0x30	; 48
     38e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     392:	8f e3       	ldi	r24, 0x3F	; 63
     394:	9c e9       	ldi	r25, 0x9C	; 156
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <setup_lcd+0x2c>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <setup_lcd+0x32>
     39c:	00 00       	nop
     39e:	88 e3       	ldi	r24, 0x38	; 56
     3a0:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3aa:	8c e0       	ldi	r24, 0x0C	; 12
     3ac:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3bc:	08 95       	ret

000003be <lcd_send_data>:
     3be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>
     3c2:	42 9a       	sbi	0x08, 2	; 8
     3c4:	41 98       	cbi	0x08, 1	; 8
     3c6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c8:	8f e8       	ldi	r24, 0x8F	; 143
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_send_data+0xe>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_send_data+0x14>
     3d2:	00 00       	nop
     3d4:	40 98       	cbi	0x08, 0	; 8
     3d6:	08 95       	ret

000003d8 <lcd_set_cursor>:
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	00 d0       	rcall	.+0      	; 0x3de <lcd_set_cursor+0x6>
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	90 e8       	ldi	r25, 0x80	; 128
     3e4:	99 83       	std	Y+1, r25	; 0x01
     3e6:	90 ec       	ldi	r25, 0xC0	; 192
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	fe 01       	movw	r30, r28
     3ec:	e8 0f       	add	r30, r24
     3ee:	f1 1d       	adc	r31, r1
     3f0:	61 50       	subi	r22, 0x01	; 1
     3f2:	80 81       	ld	r24, Z
     3f4:	86 0f       	add	r24, r22
     3f6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3fa:	8f e8       	ldi	r24, 0x8F	; 143
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_set_cursor+0x26>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	00 00       	nop
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <lcd_print>:
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	fc 01       	movw	r30, r24
     418:	80 81       	ld	r24, Z
     41a:	88 23       	and	r24, r24
     41c:	59 f0       	breq	.+22     	; 0x434 <lcd_print+0x24>
     41e:	8f 01       	movw	r16, r30
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_send_data>
     426:	cf 5f       	subi	r28, 0xFF	; 255
     428:	f8 01       	movw	r30, r16
     42a:	ec 0f       	add	r30, r28
     42c:	f1 1d       	adc	r31, r1
     42e:	80 81       	ld	r24, Z
     430:	81 11       	cpse	r24, r1
     432:	f7 cf       	rjmp	.-18     	; 0x422 <lcd_print+0x12>
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <lcd_print_int>:
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	60 97       	sbiw	r28, 0x10	; 16
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	fc 01       	movw	r30, r24
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	41 f0       	breq	.+16     	; 0x466 <lcd_print_int+0x2a>
     456:	2a e0       	ldi	r18, 0x0A	; 10
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	b9 01       	movw	r22, r18
     45c:	0e 94 1d 09 	call	0x123a	; 0x123a <__divmodhi4>
     460:	cb 01       	movw	r24, r22
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	d1 f7       	brne	.-12     	; 0x45a <lcd_print_int+0x1e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     466:	4a e0       	ldi	r20, 0x0A	; 10
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	cf 01       	movw	r24, r30
     470:	0e 94 45 09 	call	0x128a	; 0x128a <__itoa_ncheck>
     474:	ce 01       	movw	r24, r28
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     47c:	60 96       	adiw	r28, 0x10	; 16
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <js_mtr_scaling>:

//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& JOYSTICK SCALING &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
int js_mtr_scaling(int value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
     48e:	bc 01       	movw	r22, r24
     490:	99 0f       	add	r25, r25
     492:	88 0b       	sbc	r24, r24
     494:	99 0b       	sbc	r25, r25
     496:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     49a:	2c ee       	ldi	r18, 0xEC	; 236
     49c:	31 e5       	ldi	r19, 0x51	; 81
     49e:	48 eb       	ldi	r20, 0xB8	; 184
     4a0:	5f e3       	ldi	r21, 0x3F	; 63
     4a2:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 ee       	ldi	r20, 0xE0	; 224
     4ac:	50 e4       	ldi	r21, 0x40	; 64
     4ae:	0e 94 df 06 	call	0xdbe	; 0xdbe <__subsf3>
     4b2:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
     4b6:	ab 01       	movw	r20, r22

	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
     4b8:	9b 01       	movw	r18, r22
     4ba:	2d 5c       	subi	r18, 0xCD	; 205
     4bc:	31 40       	sbci	r19, 0x01	; 1
     4be:	29 35       	cpi	r18, 0x59	; 89
     4c0:	31 05       	cpc	r19, r1
     4c2:	c8 f0       	brcs	.+50     	; 0x4f6 <js_mtr_scaling+0x68>
	value = 0;
	else if (value > DEADBAND_MAX)            // if joystick is higher than deadband
     4c4:	67 32       	cpi	r22, 0x27	; 39
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	72 07       	cpc	r23, r18
     4ca:	2c f0       	brlt	.+10     	; 0x4d6 <js_mtr_scaling+0x48>
	value = 2 * (value - NEUTRAL_CMD);    // compute the change from the neutral position multiply by 2 to scale to 1000
     4cc:	4d 5e       	subi	r20, 0xED	; 237
     4ce:	51 40       	sbci	r21, 0x01	; 1
     4d0:	44 0f       	add	r20, r20
     4d2:	55 1f       	adc	r21, r21
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <js_mtr_scaling+0x6c>
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
     4d6:	6c 3c       	cpi	r22, 0xCC	; 204
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	72 07       	cpc	r23, r18
     4dc:	74 f4       	brge	.+28     	; 0x4fa <js_mtr_scaling+0x6c>
	value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
     4de:	2d ee       	ldi	r18, 0xED	; 237
     4e0:	31 e0       	ldi	r19, 0x01	; 1
     4e2:	c9 01       	movw	r24, r18
     4e4:	86 1b       	sub	r24, r22
     4e6:	97 0b       	sbc	r25, r23
     4e8:	91 95       	neg	r25
     4ea:	81 95       	neg	r24
     4ec:	91 09       	sbc	r25, r1
     4ee:	ac 01       	movw	r20, r24
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <js_mtr_scaling+0x6c>
int js_mtr_scaling(int value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000

	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
	value = 0;
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
	value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
	if (value > 1000)                         // do not send any value bigger than 1000 or smaller than -1000
	value = 1000;

	return value;
     4fa:	ca 01       	movw	r24, r20
     4fc:	49 3e       	cpi	r20, 0xE9	; 233
     4fe:	53 40       	sbci	r21, 0x03	; 3
     500:	14 f0       	brlt	.+4      	; 0x506 <js_mtr_scaling+0x78>
     502:	88 ee       	ldi	r24, 0xE8	; 232
     504:	93 e0       	ldi	r25, 0x03	; 3
} // end of joystick_scaling
     506:	08 95       	ret

00000508 <js_srv_scaling>:
int js_srv_scaling(float value) // scales the result to commands from -1000 to 1000.
{
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
     510:	2c ee       	ldi	r18, 0xEC	; 236
     512:	31 e5       	ldi	r19, 0x51	; 81
     514:	48 eb       	ldi	r20, 0xB8	; 184
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 ee       	ldi	r20, 0xE0	; 224
     522:	50 e4       	ldi	r21, 0x40	; 64
     524:	0e 94 df 06 	call	0xdbe	; 0xdbe <__subsf3>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e8       	ldi	r19, 0x80	; 128
     530:	49 e0       	ldi	r20, 0x09	; 9
     532:	54 e4       	ldi	r21, 0x44	; 68
     534:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     538:	88 23       	and	r24, r24
     53a:	5c f4       	brge	.+22     	; 0x552 <js_srv_scaling+0x4a>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	46 ee       	ldi	r20, 0xE6	; 230
     542:	53 e4       	ldi	r21, 0x43	; 67
     544:	c7 01       	movw	r24, r14
     546:	b6 01       	movw	r22, r12
     548:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     54c:	18 16       	cp	r1, r24
     54e:	0c f4       	brge	.+2      	; 0x552 <js_srv_scaling+0x4a>
     550:	5c c0       	rjmp	.+184    	; 0x60a <js_srv_scaling+0x102>
	value = 0;
	else if (value > DEADBAND_MAX)            // if joystick is higher than deadband
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e8       	ldi	r19, 0x80	; 128
     556:	49 e0       	ldi	r20, 0x09	; 9
     558:	54 e4       	ldi	r21, 0x44	; 68
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     562:	18 16       	cp	r1, r24
     564:	ac f4       	brge	.+42     	; 0x590 <js_srv_scaling+0x88>
	{
		value = 2 * (value - NEUTRAL_CMD);    // compute the change from the neutral position multiply by 2 to scale to 1000
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e8       	ldi	r19, 0x80	; 128
     56a:	46 ef       	ldi	r20, 0xF6	; 246
     56c:	53 e4       	ldi	r21, 0x43	; 67
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0e 94 df 06 	call	0xdbe	; 0xdbe <__subsf3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__addsf3>
		value = value  / 22.2; // scale to -45 45
     57e:	2a e9       	ldi	r18, 0x9A	; 154
     580:	39 e9       	ldi	r19, 0x99	; 153
     582:	41 eb       	ldi	r20, 0xB1	; 177
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	20 c0       	rjmp	.+64     	; 0x5d0 <js_srv_scaling+0xc8>
	}
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	46 ee       	ldi	r20, 0xE6	; 230
     596:	53 e4       	ldi	r21, 0x43	; 67
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     5a0:	88 23       	and	r24, r24
     5a2:	b4 f4       	brge	.+44     	; 0x5d0 <js_srv_scaling+0xc8>
	{
		value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
     5a4:	a7 01       	movw	r20, r14
     5a6:	96 01       	movw	r18, r12
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e8       	ldi	r23, 0x80	; 128
     5ac:	86 ef       	ldi	r24, 0xF6	; 246
     5ae:	93 e4       	ldi	r25, 0x43	; 67
     5b0:	0e 94 df 06 	call	0xdbe	; 0xdbe <__subsf3>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 ec       	ldi	r21, 0xC0	; 192
     5bc:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
		value = value  / 22.2; // scale to -45 45
     5c0:	2a e9       	ldi	r18, 0x9A	; 154
     5c2:	39 e9       	ldi	r19, 0x99	; 153
     5c4:	41 eb       	ldi	r20, 0xB1	; 177
     5c6:	51 e4       	ldi	r21, 0x41	; 65
     5c8:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
	}
	if (value > 1000)                         // do not send any value bigger than 1000 
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4a e7       	ldi	r20, 0x7A	; 122
     5d6:	54 e4       	ldi	r21, 0x44	; 68
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	bc f0       	brlt	.+46     	; 0x612 <js_srv_scaling+0x10a>
	value = 1000;
	if (value < -1000)                        // do not send any value smaller than -1000
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	4a e7       	ldi	r20, 0x7A	; 122
     5ea:	54 ec       	ldi	r21, 0xC4	; 196
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     5f4:	88 23       	and	r24, r24
     5f6:	ac f4       	brge	.+42     	; 0x622 <js_srv_scaling+0x11a>
	value = -1000;
     5f8:	0f 2e       	mov	r0, r31
     5fa:	c1 2c       	mov	r12, r1
     5fc:	d1 2c       	mov	r13, r1
     5fe:	fa e7       	ldi	r31, 0x7A	; 122
     600:	ef 2e       	mov	r14, r31
     602:	f4 ec       	ldi	r31, 0xC4	; 196
     604:	ff 2e       	mov	r15, r31
     606:	f0 2d       	mov	r31, r0
     608:	0c c0       	rjmp	.+24     	; 0x622 <js_srv_scaling+0x11a>
} // end of joystick_scaling
int js_srv_scaling(float value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
	value = 0;
     60a:	c1 2c       	mov	r12, r1
     60c:	d1 2c       	mov	r13, r1
     60e:	76 01       	movw	r14, r12
     610:	08 c0       	rjmp	.+16     	; 0x622 <js_srv_scaling+0x11a>
	{
		value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
		value = value  / 22.2; // scale to -45 45
	}
	if (value > 1000)                         // do not send any value bigger than 1000 
	value = 1000;
     612:	0f 2e       	mov	r0, r31
     614:	c1 2c       	mov	r12, r1
     616:	d1 2c       	mov	r13, r1
     618:	fa e7       	ldi	r31, 0x7A	; 122
     61a:	ef 2e       	mov	r14, r31
     61c:	f4 e4       	ldi	r31, 0x44	; 68
     61e:	ff 2e       	mov	r15, r31
     620:	f0 2d       	mov	r31, r0
	value = -1000;
	

	

	return value;
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
} // end of joystick_scaling
     62a:	cb 01       	movw	r24, r22
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <setup_TMR1>:

//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& TIMER 1 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_TMR1()
{
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode
     636:	e1 e8       	ldi	r30, 0x81	; 129
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	84 60       	ori	r24, 0x04	; 4
     63e:	80 83       	st	Z, r24
     640:	08 95       	ret

00000642 <main>:

uint16_t loop_delay_counter = 0;

int main(void)
{
	setup_ports();
     642:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setup_ports>
	setup_TMR1();
     646:	0e 94 1b 03 	call	0x636	; 0x636 <setup_TMR1>
	setup_lcd();
     64a:	0e 94 b5 01 	call	0x36a	; 0x36a <setup_lcd>
	setup_adc();
     64e:	0e 94 91 00 	call	0x122	; 0x122 <setup_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     652:	8f e3       	ldi	r24, 0x3F	; 63
     654:	9c e9       	ldi	r25, 0x9C	; 156
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <main+0x14>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x1a>
     65c:	00 00       	nop
	_delay_ms(10);
	lcd_set_cursor(1,1);
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("Initializing...");
     666:	8a e0       	ldi	r24, 0x0A	; 10
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     66e:	ef ed       	ldi	r30, 0xDF	; 223
     670:	fe e2       	ldi	r31, 0x2E	; 46
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <main+0x30>
     676:	00 c0       	rjmp	.+0      	; 0x678 <main+0x36>
     678:	00 00       	nop
	_delay_ms(3);
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 d6 06 	call	0xdac	; 0xdac <setup_usart0>
	mirf_init();	
     680:	0e 94 83 05 	call	0xb06	; 0xb06 <mirf_init>
	lcd_send_cmd(CLEAR_DISPLAY);
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	
	LED_check();
     68a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LED_check>
	
	sei(); // enable global interrupts
     68e:	78 94       	sei
	
	mirf_config();
     690:	0e 94 c3 05 	call	0xb86	; 0xb86 <mirf_config>
	
	 /* Set the device addresses */
	mirf_set_TADDR(tx_address);
     694:	85 e0       	ldi	r24, 0x05	; 5
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	0e 94 33 06 	call	0xc66	; 0xc66 <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	0e 94 2b 06 	call	0xc56	; 0xc56 <mirf_set_RADDR>
     6a4:	8f e3       	ldi	r24, 0x3F	; 63
     6a6:	9c e9       	ldi	r25, 0x9C	; 156
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <main+0x66>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0x6c>
     6ae:	00 00       	nop
	
	_delay_ms(10);
	
	println_0("System initialized...;");
     6b0:	8a e1       	ldi	r24, 0x1A	; 26
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 75 06 	call	0xcea	; 0xcea <println_0>
	
	lcd_send_cmd(CLEAR_DISPLAY);
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     6be:	ef ed       	ldi	r30, 0xDF	; 223
     6c0:	fe e2       	ldi	r31, 0x2E	; 46
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <main+0x80>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x86>
     6c8:	00 00       	nop
// 	lcd_print("mtr:  ");
// 	
// 	lcd_set_cursor(2,1);
// 	lcd_print("srv: ");
	
	lcd_set_cursor(1,1);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("LAT:");
     6d2:	81 e3       	ldi	r24, 0x31	; 49
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	lcd_set_cursor(1,7);
     6da:	67 e0       	ldi	r22, 0x07	; 7
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print(",");
     6e2:	86 e3       	ldi	r24, 0x36	; 54
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	lcd_set_cursor(1,10);
     6ea:	6a e0       	ldi	r22, 0x0A	; 10
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print(",");
     6f2:	86 e3       	ldi	r24, 0x36	; 54
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>

	lcd_set_cursor(2,1);
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("LON:");
     702:	88 e3       	ldi	r24, 0x38	; 56
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	lcd_set_cursor(2,7);
     70a:	67 e0       	ldi	r22, 0x07	; 7
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print(",");
     712:	86 e3       	ldi	r24, 0x36	; 54
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	lcd_set_cursor(2,10);
     71a:	6a e0       	ldi	r22, 0x0A	; 10
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print(",");
     722:	86 e3       	ldi	r24, 0x36	; 54
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
			mirf_config();
		}
		
		loop_delay_counter++;
		
		TOGGLE_LED1;
     72a:	0f 2e       	mov	r0, r31
     72c:	fb e0       	ldi	r31, 0x0B	; 11
     72e:	cf 2e       	mov	r12, r31
     730:	dd 24       	eor	r13, r13
     732:	d3 94       	inc	r13
     734:	f0 2d       	mov	r31, r0
     736:	11 e0       	ldi	r17, 0x01	; 1
		lcd_print_int(comm_lost_count);
		lcd_print(" ");
	
		if (loop_delay_counter == 100)
		{
			buffer[0] = 'A';
     738:	0f 2e       	mov	r0, r31
     73a:	f2 e5       	ldi	r31, 0x52	; 82
     73c:	ef 2e       	mov	r14, r31
     73e:	f2 e0       	ldi	r31, 0x02	; 2
     740:	ff 2e       	mov	r15, r31
     742:	f0 2d       	mov	r31, r0
     744:	0f 2e       	mov	r0, r31
     746:	f1 e4       	ldi	r31, 0x41	; 65
     748:	2f 2e       	mov	r2, r31
     74a:	f0 2d       	mov	r31, r0
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     74c:	c4 e8       	ldi	r28, 0x84	; 132
     74e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if (TCNT1 > 3000) // timeout of one second
				{
					comm_lost = 1;
					comm_lost_count++;
					TOGGLE_LED3;
     750:	04 e0       	ldi	r16, 0x04	; 4
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
			buffer[2] = srv_cmd;
     752:	0f 2e       	mov	r0, r31
     754:	fa e4       	ldi	r31, 0x4A	; 74
     756:	8f 2e       	mov	r8, r31
     758:	f2 e0       	ldi	r31, 0x02	; 2
     75a:	9f 2e       	mov	r9, r31
     75c:	f0 2d       	mov	r31, r0
			}
		}
		if (loop_delay_counter > 200)
		{
			loop_delay_counter = 0;
			buffer[0] = 'O';
     75e:	0f 2e       	mov	r0, r31
     760:	ff e4       	ldi	r31, 0x4F	; 79
     762:	3f 2e       	mov	r3, r31
     764:	f0 2d       	mov	r31, r0
	lcd_set_cursor(2,10);
	lcd_print(",");
	
    while (1) 
    {
		if (comm_lost_count > 50)
     766:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <comm_lost_count>
     76a:	83 33       	cpi	r24, 0x33	; 51
     76c:	20 f0       	brcs	.+8      	; 0x776 <main+0x134>
		{
			comm_lost_count = 0;
     76e:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <comm_lost_count>
			mirf_config();
     772:	0e 94 c3 05 	call	0xb86	; 0xb86 <mirf_config>
		}
		
		loop_delay_counter++;
     776:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     77a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <__data_end+0x1>
     784:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
		
		TOGGLE_LED1;
     788:	f6 01       	movw	r30, r12
     78a:	80 81       	ld	r24, Z
     78c:	81 27       	eor	r24, r17
     78e:	80 83       	st	Z, r24

		lcd_set_cursor(1,5);
     790:	65 e0       	ldi	r22, 0x05	; 5
     792:	81 2f       	mov	r24, r17
     794:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(lat_deg);
     798:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <lat_deg>
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_set_cursor(1,8);
     7a2:	68 e0       	ldi	r22, 0x08	; 8
     7a4:	81 2f       	mov	r24, r17
     7a6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(lat_min);
     7aa:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <lat_min>
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_set_cursor(1,11);
     7b4:	6b e0       	ldi	r22, 0x0B	; 11
     7b6:	81 2f       	mov	r24, r17
     7b8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(lat_sec);
     7bc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <lat_sec>
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		
		lcd_set_cursor(2,5);
     7c6:	65 e0       	ldi	r22, 0x05	; 5
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(lon_deg);
     7ce:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <lon_deg>
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_set_cursor(2,8);
     7d8:	68 e0       	ldi	r22, 0x08	; 8
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(lon_min);
     7e0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lon_min>
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_set_cursor(2,11);
     7ea:	6b e0       	ldi	r22, 0x0B	; 11
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(lon_sec);
     7f2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <lon_sec>
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		
		lcd_set_cursor(1,15);
     7fc:	6f e0       	ldi	r22, 0x0F	; 15
     7fe:	81 2f       	mov	r24, r17
     800:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(comm_lost_count);
     804:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <comm_lost_count>
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_print(" ");
     80e:	8d e3       	ldi	r24, 0x3D	; 61
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	
		if (loop_delay_counter == 100)
     816:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     81a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
     81e:	84 36       	cpi	r24, 0x64	; 100
     820:	91 05       	cpc	r25, r1
     822:	09 f0       	breq	.+2      	; 0x826 <main+0x1e4>
     824:	53 c0       	rjmp	.+166    	; 0x8cc <main+0x28a>
		{
			buffer[0] = 'A';
     826:	f7 01       	movw	r30, r14
     828:	20 82       	st	Z, r2
			mirf_send(buffer, mirf_PAYLOAD);
     82a:	63 e0       	ldi	r22, 0x03	; 3
     82c:	c7 01       	movw	r24, r14
     82e:	0e 94 43 06 	call	0xc86	; 0xc86 <mirf_send>
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     832:	19 82       	std	Y+1, r1	; 0x01
     834:	18 82       	st	Y, r1
     836:	11 c0       	rjmp	.+34     	; 0x85a <main+0x218>
			buffer[0] = 'A';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     838:	88 81       	ld	r24, Y
     83a:	99 81       	ldd	r25, Y+1	; 0x01
     83c:	89 3b       	cpi	r24, 0xB9	; 185
     83e:	9b 40       	sbci	r25, 0x0B	; 11
     840:	60 f0       	brcs	.+24     	; 0x85a <main+0x218>
				{
					comm_lost = 1;
     842:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <comm_lost>
					comm_lost_count++;
     846:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <comm_lost_count>
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <comm_lost_count>
					TOGGLE_LED3;
     850:	f6 01       	movw	r30, r12
     852:	80 81       	ld	r24, Z
     854:	80 27       	eor	r24, r16
     856:	80 83       	st	Z, r24
					break;
     858:	04 c0       	rjmp	.+8      	; 0x862 <main+0x220>
		if (loop_delay_counter == 100)
		{
			buffer[0] = 'A';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
     85a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <mirf_data_sent>
     85e:	88 23       	and	r24, r24
     860:	59 f3       	breq	.-42     	; 0x838 <main+0x1f6>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     862:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <comm_lost>
     866:	81 11       	cpse	r24, r1
     868:	2f c0       	rjmp	.+94     	; 0x8c8 <main+0x286>
			{
				set_RX_MODE();
     86a:	0e 94 b2 05 	call	0xb64	; 0xb64 <set_RX_MODE>
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     86e:	19 82       	std	Y+1, r1	; 0x01
     870:	18 82       	st	Y, r1
     872:	11 c0       	rjmp	.+34     	; 0x896 <main+0x254>
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
				{
					if (TCNT1 > 3000) // timeout of one second
     874:	88 81       	ld	r24, Y
     876:	99 81       	ldd	r25, Y+1	; 0x01
     878:	89 3b       	cpi	r24, 0xB9	; 185
     87a:	9b 40       	sbci	r25, 0x0B	; 11
     87c:	60 f0       	brcs	.+24     	; 0x896 <main+0x254>
					{
						//comm_lost = 1;
						comm_lost_count++;
     87e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <comm_lost_count>
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <comm_lost_count>
						TOGGLE_LED6;
     888:	f6 01       	movw	r30, r12
     88a:	80 81       	ld	r24, Z
     88c:	f0 e2       	ldi	r31, 0x20	; 32
     88e:	8f 27       	eor	r24, r31
     890:	f6 01       	movw	r30, r12
     892:	80 83       	st	Z, r24
						break;
     894:	04 c0       	rjmp	.+8      	; 0x89e <main+0x25c>
			}
			if (!comm_lost)
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
     896:	0e 94 91 05 	call	0xb22	; 0xb22 <mirf_data_ready>
     89a:	88 23       	and	r24, r24
     89c:	59 f3       	breq	.-42     	; 0x874 <main+0x232>
						comm_lost_count++;
						TOGGLE_LED6;
						break;
					}
				}
				if (!comm_lost)
     89e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <comm_lost>
     8a2:	81 11       	cpse	r24, r1
     8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <main+0x280>
				{
					mirf_get_data(buffer); // get the data, put it in buffer
     8a6:	c7 01       	movw	r24, r14
     8a8:	0e 94 04 06 	call	0xc08	; 0xc08 <mirf_get_data>
					lat_deg = buffer[0];
     8ac:	f7 01       	movw	r30, r14
     8ae:	80 81       	ld	r24, Z
     8b0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lat_deg>
					lat_min = buffer[1];
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
     8b6:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lat_min>
					lat_sec = buffer[2];
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lat_sec>
     8c0:	05 c0       	rjmp	.+10     	; 0x8cc <main+0x28a>
					
				}
				else
					comm_lost = 0;
     8c2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <comm_lost>
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <main+0x28a>
			}
			else
			{
				comm_lost = 0;
     8c8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <comm_lost>
			}
		}
		if (loop_delay_counter > 200)
     8cc:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     8d0:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x1>
     8d4:	89 3c       	cpi	r24, 0xC9	; 201
     8d6:	91 05       	cpc	r25, r1
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <main+0x29a>
     8da:	58 c0       	rjmp	.+176    	; 0x98c <main+0x34a>
		{
			loop_delay_counter = 0;
     8dc:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <__data_end+0x1>
     8e0:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
			buffer[0] = 'O';
     8e4:	f7 01       	movw	r30, r14
     8e6:	30 82       	st	Z, r3
			mirf_send(buffer, mirf_PAYLOAD);
     8e8:	63 e0       	ldi	r22, 0x03	; 3
     8ea:	c7 01       	movw	r24, r14
     8ec:	0e 94 43 06 	call	0xc86	; 0xc86 <mirf_send>
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     8f0:	19 82       	std	Y+1, r1	; 0x01
     8f2:	18 82       	st	Y, r1
     8f4:	11 c0       	rjmp	.+34     	; 0x918 <main+0x2d6>
			buffer[0] = 'O';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     8f6:	88 81       	ld	r24, Y
     8f8:	99 81       	ldd	r25, Y+1	; 0x01
     8fa:	89 3b       	cpi	r24, 0xB9	; 185
     8fc:	9b 40       	sbci	r25, 0x0B	; 11
     8fe:	60 f0       	brcs	.+24     	; 0x918 <main+0x2d6>
				{
					comm_lost = 1;
     900:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <comm_lost>
					comm_lost_count++;
     904:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <comm_lost_count>
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <comm_lost_count>
					TOGGLE_LED3;
     90e:	f6 01       	movw	r30, r12
     910:	80 81       	ld	r24, Z
     912:	80 27       	eor	r24, r16
     914:	80 83       	st	Z, r24
					break;
     916:	04 c0       	rjmp	.+8      	; 0x920 <main+0x2de>
		{
			loop_delay_counter = 0;
			buffer[0] = 'O';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
     918:	0e 94 9e 05 	call	0xb3c	; 0xb3c <mirf_data_sent>
     91c:	88 23       	and	r24, r24
     91e:	59 f3       	breq	.-42     	; 0x8f6 <main+0x2b4>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     920:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <comm_lost>
     924:	81 11       	cpse	r24, r1
     926:	2f c0       	rjmp	.+94     	; 0x986 <main+0x344>
			{
				set_RX_MODE();
     928:	0e 94 b2 05 	call	0xb64	; 0xb64 <set_RX_MODE>
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     92c:	19 82       	std	Y+1, r1	; 0x01
     92e:	18 82       	st	Y, r1
     930:	11 c0       	rjmp	.+34     	; 0x954 <main+0x312>
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
				{
					if (TCNT1 > 3000) // timeout of one second
     932:	88 81       	ld	r24, Y
     934:	99 81       	ldd	r25, Y+1	; 0x01
     936:	89 3b       	cpi	r24, 0xB9	; 185
     938:	9b 40       	sbci	r25, 0x0B	; 11
     93a:	60 f0       	brcs	.+24     	; 0x954 <main+0x312>
					{
						//comm_lost = 1;
						comm_lost_count++;
     93c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <comm_lost_count>
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <comm_lost_count>
						TOGGLE_LED6;
     946:	f6 01       	movw	r30, r12
     948:	80 81       	ld	r24, Z
     94a:	f0 e2       	ldi	r31, 0x20	; 32
     94c:	8f 27       	eor	r24, r31
     94e:	f6 01       	movw	r30, r12
     950:	80 83       	st	Z, r24
						break;
     952:	04 c0       	rjmp	.+8      	; 0x95c <main+0x31a>
			}
			if (!comm_lost)
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
     954:	0e 94 91 05 	call	0xb22	; 0xb22 <mirf_data_ready>
     958:	88 23       	and	r24, r24
     95a:	59 f3       	breq	.-42     	; 0x932 <main+0x2f0>
						comm_lost_count++;
						TOGGLE_LED6;
						break;
					}
				}
				if (!comm_lost)
     95c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <comm_lost>
     960:	81 11       	cpse	r24, r1
     962:	0e c0       	rjmp	.+28     	; 0x980 <main+0x33e>
				{
					mirf_get_data(buffer); // get the data, put it in buffer
     964:	c7 01       	movw	r24, r14
     966:	0e 94 04 06 	call	0xc08	; 0xc08 <mirf_get_data>
					lon_deg = buffer[0];
     96a:	f7 01       	movw	r30, r14
     96c:	80 81       	ld	r24, Z
     96e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <lon_deg>
					lon_min = buffer[1];
     972:	81 81       	ldd	r24, Z+1	; 0x01
     974:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <lon_min>
					lon_sec = buffer[2];
     978:	82 81       	ldd	r24, Z+2	; 0x02
     97a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <lon_sec>
     97e:	bc c0       	rjmp	.+376    	; 0xaf8 <main+0x4b6>
					//println_int_0(temperature);
					
				}
				else
				comm_lost = 0;
     980:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <comm_lost>
     984:	b9 c0       	rjmp	.+370    	; 0xaf8 <main+0x4b6>
			}
			else
			{
				comm_lost = 0;
     986:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <comm_lost>
     98a:	b6 c0       	rjmp	.+364    	; 0xaf8 <main+0x4b6>
			}
		}
		else 
		{
			mtr_cmd = analog_get_average(JOYSTICK2_Y, 5);
     98c:	65 e0       	ldi	r22, 0x05	; 5
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     994:	5c 01       	movw	r10, r24
			mtr_cmd = .75 * mtr_cmd + .25 * old_mtr_cmd;
     996:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <old_mtr_cmd>
     99a:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <old_mtr_cmd+0x1>
     99e:	07 2e       	mov	r0, r23
     9a0:	00 0c       	add	r0, r0
     9a2:	88 0b       	sbc	r24, r24
     9a4:	99 0b       	sbc	r25, r25
     9a6:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e8       	ldi	r20, 0x80	; 128
     9b0:	5e e3       	ldi	r21, 0x3E	; 62
     9b2:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     9b6:	2b 01       	movw	r4, r22
     9b8:	3c 01       	movw	r6, r24
     9ba:	b5 01       	movw	r22, r10
     9bc:	bb 0c       	add	r11, r11
     9be:	88 0b       	sbc	r24, r24
     9c0:	99 0b       	sbc	r25, r25
     9c2:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e4       	ldi	r20, 0x40	; 64
     9cc:	5f e3       	ldi	r21, 0x3F	; 63
     9ce:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     9d2:	9b 01       	movw	r18, r22
     9d4:	ac 01       	movw	r20, r24
     9d6:	c3 01       	movw	r24, r6
     9d8:	b2 01       	movw	r22, r4
     9da:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__addsf3>
     9de:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
			old_mtr_cmd = mtr_cmd;
     9e2:	70 93 4f 02 	sts	0x024F, r23	; 0x80024f <old_mtr_cmd+0x1>
     9e6:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <old_mtr_cmd>
			mtr_cmd = js_mtr_scaling(mtr_cmd); 
     9ea:	cb 01       	movw	r24, r22
     9ec:	0e 94 47 02 	call	0x48e	; 0x48e <js_mtr_scaling>
     9f0:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <mtr_cmd>
     9f4:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <mtr_cmd+0x1>
			buffer[0] = (mtr_cmd >> 8); // MSB
     9f8:	f7 01       	movw	r30, r14
     9fa:	90 83       	st	Z, r25
			buffer[1] = mtr_cmd; // LSB
     9fc:	81 83       	std	Z+1, r24	; 0x01
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
     9fe:	65 e0       	ldi	r22, 0x05	; 5
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     a06:	5c 01       	movw	r10, r24
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
     a08:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <old_srv_cmd>
     a0c:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <old_srv_cmd+0x1>
     a10:	07 2e       	mov	r0, r23
     a12:	00 0c       	add	r0, r0
     a14:	88 0b       	sbc	r24, r24
     a16:	99 0b       	sbc	r25, r25
     a18:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e8       	ldi	r20, 0x80	; 128
     a22:	5e e3       	ldi	r21, 0x3E	; 62
     a24:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     a28:	2b 01       	movw	r4, r22
     a2a:	3c 01       	movw	r6, r24
     a2c:	b5 01       	movw	r22, r10
     a2e:	bb 0c       	add	r11, r11
     a30:	88 0b       	sbc	r24, r24
     a32:	99 0b       	sbc	r25, r25
     a34:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e4       	ldi	r20, 0x40	; 64
     a3e:	5f e3       	ldi	r21, 0x3F	; 63
     a40:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	c3 01       	movw	r24, r6
     a4a:	b2 01       	movw	r22, r4
     a4c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__addsf3>
     a50:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
			old_srv_cmd = srv_cmd;
     a54:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <old_srv_cmd+0x1>
     a58:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <old_srv_cmd>
			srv_cmd = js_srv_scaling(srv_cmd);
     a5c:	07 2e       	mov	r0, r23
     a5e:	00 0c       	add	r0, r0
     a60:	88 0b       	sbc	r24, r24
     a62:	99 0b       	sbc	r25, r25
     a64:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     a68:	0e 94 84 02 	call	0x508	; 0x508 <js_srv_scaling>
			if ((srv_cmd < 5) && (srv_cmd > -5))
     a6c:	9c 01       	movw	r18, r24
     a6e:	2c 5f       	subi	r18, 0xFC	; 252
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	29 30       	cpi	r18, 0x09	; 9
     a74:	31 05       	cpc	r19, r1
     a76:	28 f4       	brcc	.+10     	; 0xa82 <main+0x440>
				srv_cmd = 0;
     a78:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <srv_cmd+0x1>
     a7c:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <srv_cmd>
     a80:	19 c0       	rjmp	.+50     	; 0xab4 <main+0x472>
			else if (srv_cmd > 45)
     a82:	8e 32       	cpi	r24, 0x2E	; 46
     a84:	91 05       	cpc	r25, r1
     a86:	3c f0       	brlt	.+14     	; 0xa96 <main+0x454>
				srv_cmd = 45;
     a88:	8d e2       	ldi	r24, 0x2D	; 45
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <srv_cmd+0x1>
     a90:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <srv_cmd>
     a94:	0f c0       	rjmp	.+30     	; 0xab4 <main+0x472>
			else if (srv_cmd < -45)
     a96:	83 3d       	cpi	r24, 0xD3	; 211
     a98:	ef ef       	ldi	r30, 0xFF	; 255
     a9a:	9e 07       	cpc	r25, r30
     a9c:	2c f0       	brlt	.+10     	; 0xaa8 <main+0x466>
			buffer[1] = mtr_cmd; // LSB
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
			old_srv_cmd = srv_cmd;
			srv_cmd = js_srv_scaling(srv_cmd);
     a9e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <srv_cmd+0x1>
     aa2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <srv_cmd>
     aa6:	06 c0       	rjmp	.+12     	; 0xab4 <main+0x472>
			if ((srv_cmd < 5) && (srv_cmd > -5))
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
     aa8:	83 ed       	ldi	r24, 0xD3	; 211
     aaa:	9f ef       	ldi	r25, 0xFF	; 255
     aac:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <srv_cmd+0x1>
     ab0:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <srv_cmd>
			buffer[2] = srv_cmd;
     ab4:	f4 01       	movw	r30, r8
     ab6:	80 81       	ld	r24, Z
     ab8:	f7 01       	movw	r30, r14
     aba:	82 83       	std	Z+2, r24	; 0x02

			mirf_send(buffer, mirf_PAYLOAD);
     abc:	63 e0       	ldi	r22, 0x03	; 3
     abe:	c7 01       	movw	r24, r14
     ac0:	0e 94 43 06 	call	0xc86	; 0xc86 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac4:	f5 e3       	ldi	r31, 0x35	; 53
     ac6:	fa 95       	dec	r31
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <main+0x484>
     aca:	00 00       	nop
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     acc:	19 82       	std	Y+1, r1	; 0x01
     ace:	18 82       	st	Y, r1
     ad0:	0f c0       	rjmp	.+30     	; 0xaf0 <main+0x4ae>
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     ad2:	88 81       	ld	r24, Y
     ad4:	99 81       	ldd	r25, Y+1	; 0x01
     ad6:	89 3b       	cpi	r24, 0xB9	; 185
     ad8:	9b 40       	sbci	r25, 0x0B	; 11
     ada:	50 f0       	brcs	.+20     	; 0xaf0 <main+0x4ae>
				{
					comm_lost_count++;
     adc:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <comm_lost_count>
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <comm_lost_count>
					TOGGLE_LED3;
     ae6:	f6 01       	movw	r30, r12
     ae8:	80 81       	ld	r24, Z
     aea:	80 27       	eor	r24, r16
     aec:	80 83       	st	Z, r24
					break;
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <main+0x4b6>
			buffer[2] = srv_cmd;

			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
     af0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <mirf_data_sent>
     af4:	88 23       	and	r24, r24
     af6:	69 f3       	breq	.-38     	; 0xad2 <main+0x490>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	9c e9       	ldi	r25, 0x9C	; 156
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <main+0x4ba>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <main+0x4c0>
     b02:	00 00       	nop
     b04:	30 ce       	rjmp	.-928    	; 0x766 <main+0x124>

00000b06 <mirf_init>:
{
	mirf_CSN_lo;
	spi_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi_exchange_bytes(value, value, len);
	mirf_CSN_hi;
}
     b06:	54 9a       	sbi	0x0a, 4	; 10
     b08:	20 9a       	sbi	0x04, 0	; 4
     b0a:	5c 98       	cbi	0x0b, 4	; 11
     b0c:	28 9a       	sbi	0x05, 0	; 5
     b0e:	ea 98       	cbi	0x1d, 2	; 29
     b10:	e9 e6       	ldi	r30, 0x69	; 105
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	80 62       	ori	r24, 0x20	; 32
     b18:	80 83       	st	Z, r24
     b1a:	ea 9a       	sbi	0x1d, 2	; 29
     b1c:	0e 94 9b 06 	call	0xd36	; 0xd36 <spi_master_initialize>
     b20:	08 95       	ret

00000b22 <mirf_data_ready>:
     b22:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <PTX>
     b26:	81 11       	cpse	r24, r1
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <mirf_data_ready+0x16>
     b2a:	28 98       	cbi	0x05, 0	; 5
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <spi_exchange_char>
     b32:	28 9a       	sbi	0x05, 0	; 5
     b34:	80 74       	andi	r24, 0x40	; 64
     b36:	08 95       	ret
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 95       	ret

00000b3c <mirf_data_sent>:
     b3c:	28 98       	cbi	0x05, 0	; 5
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	0e 94 a6 06 	call	0xd4c	; 0xd4c <spi_exchange_char>
     b44:	28 9a       	sbi	0x05, 0	; 5
     b46:	80 72       	andi	r24, 0x20	; 32
     b48:	08 95       	ret

00000b4a <mirf_config_register>:
     b4a:	cf 93       	push	r28
     b4c:	c6 2f       	mov	r28, r22
     b4e:	28 98       	cbi	0x05, 0	; 5
     b50:	8f 71       	andi	r24, 0x1F	; 31
     b52:	80 62       	ori	r24, 0x20	; 32
     b54:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
     b58:	8c 2f       	mov	r24, r28
     b5a:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
     b5e:	28 9a       	sbi	0x05, 0	; 5
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <set_RX_MODE>:
     b64:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <PTX>
     b68:	60 e7       	ldi	r22, 0x70	; 112
     b6a:	87 e0       	ldi	r24, 0x07	; 7
     b6c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     b70:	28 98       	cbi	0x05, 0	; 5
     b72:	81 ee       	ldi	r24, 0xE1	; 225
     b74:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
     b78:	28 9a       	sbi	0x05, 0	; 5
     b7a:	6b e5       	ldi	r22, 0x5B	; 91
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     b82:	5c 9a       	sbi	0x0b, 4	; 11
     b84:	08 95       	ret

00000b86 <mirf_config>:
     b86:	6c e6       	ldi	r22, 0x6C	; 108
     b88:	85 e0       	ldi	r24, 0x05	; 5
     b8a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     b8e:	6f ef       	ldi	r22, 0xFF	; 255
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	81 e1       	ldi	r24, 0x11	; 17
     b9a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     b9e:	63 e0       	ldi	r22, 0x03	; 3
     ba0:	82 e1       	ldi	r24, 0x12	; 18
     ba2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	83 e1       	ldi	r24, 0x13	; 19
     baa:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	84 e1       	ldi	r24, 0x14	; 20
     bb2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	85 e1       	ldi	r24, 0x15	; 21
     bba:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	86 e1       	ldi	r24, 0x16	; 22
     bc2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bc6:	66 e2       	ldi	r22, 0x26	; 38
     bc8:	86 e0       	ldi	r24, 0x06	; 6
     bca:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bce:	63 e0       	ldi	r22, 0x03	; 3
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bd6:	63 e0       	ldi	r22, 0x03	; 3
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bde:	6f e4       	ldi	r22, 0x4F	; 79
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     be6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <PTX>
     bea:	60 e7       	ldi	r22, 0x70	; 112
     bec:	87 e0       	ldi	r24, 0x07	; 7
     bee:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     bf2:	28 98       	cbi	0x05, 0	; 5
     bf4:	81 ee       	ldi	r24, 0xE1	; 225
     bf6:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
     bfa:	28 9a       	sbi	0x05, 0	; 5
     bfc:	6b e5       	ldi	r22, 0x5B	; 91
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     c04:	5c 9a       	sbi	0x0b, 4	; 11
     c06:	08 95       	ret

00000c08 <mirf_get_data>:
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	ec 01       	movw	r28, r24
     c0e:	28 98       	cbi	0x05, 0	; 5
     c10:	81 e6       	ldi	r24, 0x61	; 97
     c12:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
     c16:	43 e0       	ldi	r20, 0x03	; 3
     c18:	be 01       	movw	r22, r28
     c1a:	ce 01       	movw	r24, r28
     c1c:	0e 94 bb 06 	call	0xd76	; 0xd76 <spi_exchange_bytes>
     c20:	28 9a       	sbi	0x05, 0	; 5
     c22:	60 e4       	ldi	r22, 0x40	; 64
     c24:	87 e0       	ldi	r24, 0x07	; 7
     c26:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	eb 01       	movw	r28, r22
     c38:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
     c3a:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_REGISTER | (REGISTER_MASK & reg));
     c3c:	8f 71       	andi	r24, 0x1F	; 31
     c3e:	80 62       	ori	r24, 0x20	; 32
     c40:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
	spi_send_bytes(value, len);
     c44:	61 2f       	mov	r22, r17
     c46:	ce 01       	movw	r24, r28
     c48:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_send_bytes>
	mirf_CSN_hi;
     c4c:	28 9a       	sbi	0x05, 0	; 5
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	08 95       	ret

00000c56 <mirf_set_RADDR>:
}

void mirf_set_RADDR(int8_t *adr)
// Sets the receiving address
{
	mirf_CE_lo;
     c56:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
     c58:	45 e0       	ldi	r20, 0x05	; 5
     c5a:	bc 01       	movw	r22, r24
     c5c:	8b e0       	ldi	r24, 0x0B	; 11
     c5e:	0e 94 18 06 	call	0xc30	; 0xc30 <mirf_write_register>
	mirf_CE_hi;
     c62:	5c 9a       	sbi	0x0b, 4	; 11
     c64:	08 95       	ret

00000c66 <mirf_set_TADDR>:
}

void mirf_set_TADDR(int8_t *adr)
// Sets the transmitting address
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
	mirf_write_register(RX_ADDR_P0, adr, 5);
     c6c:	45 e0       	ldi	r20, 0x05	; 5
     c6e:	bc 01       	movw	r22, r24
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	0e 94 18 06 	call	0xc30	; 0xc30 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
     c76:	45 e0       	ldi	r20, 0x05	; 5
     c78:	be 01       	movw	r22, r28
     c7a:	80 e1       	ldi	r24, 0x10	; 16
     c7c:	0e 94 18 06 	call	0xc30	; 0xc30 <mirf_write_register>
}
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	ec 01       	movw	r28, r24
     c8e:	16 2f       	mov	r17, r22
	//while (PTX)
	//{

	//} // Wait until last packet is send

	mirf_CE_lo;
     c90:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1; // Set to transmitter mode
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
     c98:	6a e5       	ldi	r22, 0x5A	; 90
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>

	mirf_CSN_lo;             // Pull down chip select
     ca0:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(FLUSH_TX); // Write cmd to flush tx fifo
     ca2:	81 ee       	ldi	r24, 0xE1	; 225
     ca4:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
	mirf_CSN_hi;             // Pull up chip select
     ca8:	28 9a       	sbi	0x05, 0	; 5
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     caa:	60 e7       	ldi	r22, 0x70	; 112
     cac:	87 e0       	ldi	r24, 0x07	; 7
     cae:	0e 94 a5 05 	call	0xb4a	; 0xb4a <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
     cb2:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_TX_PAYLOAD); // Write cmd to write payload
     cb4:	80 ea       	ldi	r24, 0xA0	; 160
     cb6:	0e 94 a1 06 	call	0xd42	; 0xd42 <spi_send_char>
	spi_send_bytes(value, len);  // Write payload
     cba:	61 2f       	mov	r22, r17
     cbc:	ce 01       	movw	r24, r28
     cbe:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_send_bytes>
	mirf_CSN_hi;                 // Pull up chip select
     cc2:	28 9a       	sbi	0x05, 0	; 5

	mirf_CE_hi; // Start transmission
     cc4:	5c 9a       	sbi	0x0b, 4	; 11
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	08 95       	ret

00000cce <__vector_4>:

ISR(INT3_vect) // Interrupt handler
{
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	8f 93       	push	r24
	//char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
     cda:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <PTX>
// 		}
		
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
     cde:	8f 91       	pop	r24
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <println_0>:
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	8c 01       	movw	r16, r24
     cf4:	fc 01       	movw	r30, r24
     cf6:	80 81       	ld	r24, Z
     cf8:	8a 30       	cpi	r24, 0x0A	; 10
     cfa:	69 f0       	breq	.+26     	; 0xd16 <println_0+0x2c>
     cfc:	8b 33       	cpi	r24, 0x3B	; 59
     cfe:	79 f4       	brne	.+30     	; 0xd1e <println_0+0x34>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <println_0+0x2c>
     d02:	89 91       	ld	r24, Y+
     d04:	8a 30       	cpi	r24, 0x0A	; 10
     d06:	39 f0       	breq	.+14     	; 0xd16 <println_0+0x2c>
     d08:	8b 33       	cpi	r24, 0x3B	; 59
     d0a:	29 f0       	breq	.+10     	; 0xd16 <println_0+0x2c>
     d0c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <usart0_send_char>
     d10:	0c 17       	cp	r16, r28
     d12:	1d 07       	cpc	r17, r29
     d14:	b1 f7       	brne	.-20     	; 0xd02 <println_0+0x18>
     d16:	8a e0       	ldi	r24, 0x0A	; 10
     d18:	0e 94 ce 06 	call	0xd9c	; 0xd9c <usart0_send_char>
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <println_0+0x42>
     d1e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <usart0_send_char>
     d22:	e8 01       	movw	r28, r16
     d24:	21 96       	adiw	r28, 0x01	; 1
     d26:	08 53       	subi	r16, 0x38	; 56
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	eb cf       	rjmp	.-42     	; 0xd02 <println_0+0x18>
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <spi_master_initialize>:
     d36:	84 b1       	in	r24, 0x04	; 4
     d38:	87 60       	ori	r24, 0x07	; 7
     d3a:	84 b9       	out	0x04, r24	; 4
     d3c:	81 e5       	ldi	r24, 0x51	; 81
     d3e:	8c bd       	out	0x2c, r24	; 44
     d40:	08 95       	ret

00000d42 <spi_send_char>:
     d42:	8e bd       	out	0x2e, r24	; 46
     d44:	0d b4       	in	r0, 0x2d	; 45
     d46:	07 fe       	sbrs	r0, 7
     d48:	fd cf       	rjmp	.-6      	; 0xd44 <spi_send_char+0x2>
     d4a:	08 95       	ret

00000d4c <spi_exchange_char>:
     d4c:	8e bd       	out	0x2e, r24	; 46
     d4e:	0d b4       	in	r0, 0x2d	; 45
     d50:	07 fe       	sbrs	r0, 7
     d52:	fd cf       	rjmp	.-6      	; 0xd4e <spi_exchange_char+0x2>
     d54:	8e b5       	in	r24, 0x2e	; 46
     d56:	08 95       	ret

00000d58 <spi_send_bytes>:
     d58:	66 23       	and	r22, r22
     d5a:	61 f0       	breq	.+24     	; 0xd74 <spi_send_bytes+0x1c>
     d5c:	fc 01       	movw	r30, r24
     d5e:	9c 01       	movw	r18, r24
     d60:	26 0f       	add	r18, r22
     d62:	31 1d       	adc	r19, r1
     d64:	91 91       	ld	r25, Z+
     d66:	9e bd       	out	0x2e, r25	; 46
     d68:	0d b4       	in	r0, 0x2d	; 45
     d6a:	07 fe       	sbrs	r0, 7
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <spi_send_bytes+0x10>
     d6e:	e2 17       	cp	r30, r18
     d70:	f3 07       	cpc	r31, r19
     d72:	c1 f7       	brne	.-16     	; 0xd64 <spi_send_bytes+0xc>
     d74:	08 95       	ret

00000d76 <spi_exchange_bytes>:
     d76:	44 23       	and	r20, r20
     d78:	81 f0       	breq	.+32     	; 0xd9a <spi_exchange_bytes+0x24>
     d7a:	fc 01       	movw	r30, r24
     d7c:	a6 2f       	mov	r26, r22
     d7e:	b7 2f       	mov	r27, r23
     d80:	9c 01       	movw	r18, r24
     d82:	24 0f       	add	r18, r20
     d84:	31 1d       	adc	r19, r1
     d86:	91 91       	ld	r25, Z+
     d88:	9e bd       	out	0x2e, r25	; 46
     d8a:	0d b4       	in	r0, 0x2d	; 45
     d8c:	07 fe       	sbrs	r0, 7
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <spi_exchange_bytes+0x14>
     d90:	9e b5       	in	r25, 0x2e	; 46
     d92:	9d 93       	st	X+, r25
     d94:	e2 17       	cp	r30, r18
     d96:	f3 07       	cpc	r31, r19
     d98:	b1 f7       	brne	.-20     	; 0xd86 <spi_exchange_bytes+0x10>
     d9a:	08 95       	ret

00000d9c <usart0_send_char>:
     d9c:	e0 ec       	ldi	r30, 0xC0	; 192
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	90 81       	ld	r25, Z
     da2:	95 ff       	sbrs	r25, 5
     da4:	fd cf       	rjmp	.-6      	; 0xda0 <usart0_send_char+0x4>
     da6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     daa:	08 95       	ret

00000dac <setup_usart0>:
     dac:	98 e1       	ldi	r25, 0x18	; 24
     dae:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     db2:	96 e0       	ldi	r25, 0x06	; 6
     db4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     db8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     dbc:	08 95       	ret

00000dbe <__subsf3>:
     dbe:	50 58       	subi	r21, 0x80	; 128

00000dc0 <__addsf3>:
     dc0:	bb 27       	eor	r27, r27
     dc2:	aa 27       	eor	r26, r26
     dc4:	0e 94 f7 06 	call	0xdee	; 0xdee <__addsf3x>
     dc8:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_round>
     dcc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_pscA>
     dd0:	38 f0       	brcs	.+14     	; 0xde0 <__addsf3+0x20>
     dd2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscB>
     dd6:	20 f0       	brcs	.+8      	; 0xde0 <__addsf3+0x20>
     dd8:	39 f4       	brne	.+14     	; 0xde8 <__addsf3+0x28>
     dda:	9f 3f       	cpi	r25, 0xFF	; 255
     ddc:	19 f4       	brne	.+6      	; 0xde4 <__addsf3+0x24>
     dde:	26 f4       	brtc	.+8      	; 0xde8 <__addsf3+0x28>
     de0:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_nan>
     de4:	0e f4       	brtc	.+2      	; 0xde8 <__addsf3+0x28>
     de6:	e0 95       	com	r30
     de8:	e7 fb       	bst	r30, 7
     dea:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>

00000dee <__addsf3x>:
     dee:	e9 2f       	mov	r30, r25
     df0:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_split3>
     df4:	58 f3       	brcs	.-42     	; 0xdcc <__addsf3+0xc>
     df6:	ba 17       	cp	r27, r26
     df8:	62 07       	cpc	r22, r18
     dfa:	73 07       	cpc	r23, r19
     dfc:	84 07       	cpc	r24, r20
     dfe:	95 07       	cpc	r25, r21
     e00:	20 f0       	brcs	.+8      	; 0xe0a <__addsf3x+0x1c>
     e02:	79 f4       	brne	.+30     	; 0xe22 <__addsf3x+0x34>
     e04:	a6 f5       	brtc	.+104    	; 0xe6e <__addsf3x+0x80>
     e06:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_zero>
     e0a:	0e f4       	brtc	.+2      	; 0xe0e <__addsf3x+0x20>
     e0c:	e0 95       	com	r30
     e0e:	0b 2e       	mov	r0, r27
     e10:	ba 2f       	mov	r27, r26
     e12:	a0 2d       	mov	r26, r0
     e14:	0b 01       	movw	r0, r22
     e16:	b9 01       	movw	r22, r18
     e18:	90 01       	movw	r18, r0
     e1a:	0c 01       	movw	r0, r24
     e1c:	ca 01       	movw	r24, r20
     e1e:	a0 01       	movw	r20, r0
     e20:	11 24       	eor	r1, r1
     e22:	ff 27       	eor	r31, r31
     e24:	59 1b       	sub	r21, r25
     e26:	99 f0       	breq	.+38     	; 0xe4e <__addsf3x+0x60>
     e28:	59 3f       	cpi	r21, 0xF9	; 249
     e2a:	50 f4       	brcc	.+20     	; 0xe40 <__addsf3x+0x52>
     e2c:	50 3e       	cpi	r21, 0xE0	; 224
     e2e:	68 f1       	brcs	.+90     	; 0xe8a <__addsf3x+0x9c>
     e30:	1a 16       	cp	r1, r26
     e32:	f0 40       	sbci	r31, 0x00	; 0
     e34:	a2 2f       	mov	r26, r18
     e36:	23 2f       	mov	r18, r19
     e38:	34 2f       	mov	r19, r20
     e3a:	44 27       	eor	r20, r20
     e3c:	58 5f       	subi	r21, 0xF8	; 248
     e3e:	f3 cf       	rjmp	.-26     	; 0xe26 <__addsf3x+0x38>
     e40:	46 95       	lsr	r20
     e42:	37 95       	ror	r19
     e44:	27 95       	ror	r18
     e46:	a7 95       	ror	r26
     e48:	f0 40       	sbci	r31, 0x00	; 0
     e4a:	53 95       	inc	r21
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <__addsf3x+0x52>
     e4e:	7e f4       	brtc	.+30     	; 0xe6e <__addsf3x+0x80>
     e50:	1f 16       	cp	r1, r31
     e52:	ba 0b       	sbc	r27, r26
     e54:	62 0b       	sbc	r22, r18
     e56:	73 0b       	sbc	r23, r19
     e58:	84 0b       	sbc	r24, r20
     e5a:	ba f0       	brmi	.+46     	; 0xe8a <__addsf3x+0x9c>
     e5c:	91 50       	subi	r25, 0x01	; 1
     e5e:	a1 f0       	breq	.+40     	; 0xe88 <__addsf3x+0x9a>
     e60:	ff 0f       	add	r31, r31
     e62:	bb 1f       	adc	r27, r27
     e64:	66 1f       	adc	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	c2 f7       	brpl	.-16     	; 0xe5c <__addsf3x+0x6e>
     e6c:	0e c0       	rjmp	.+28     	; 0xe8a <__addsf3x+0x9c>
     e6e:	ba 0f       	add	r27, r26
     e70:	62 1f       	adc	r22, r18
     e72:	73 1f       	adc	r23, r19
     e74:	84 1f       	adc	r24, r20
     e76:	48 f4       	brcc	.+18     	; 0xe8a <__addsf3x+0x9c>
     e78:	87 95       	ror	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	b7 95       	ror	r27
     e80:	f7 95       	ror	r31
     e82:	9e 3f       	cpi	r25, 0xFE	; 254
     e84:	08 f0       	brcs	.+2      	; 0xe88 <__addsf3x+0x9a>
     e86:	b0 cf       	rjmp	.-160    	; 0xde8 <__addsf3+0x28>
     e88:	93 95       	inc	r25
     e8a:	88 0f       	add	r24, r24
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__addsf3x+0xa2>
     e8e:	99 27       	eor	r25, r25
     e90:	ee 0f       	add	r30, r30
     e92:	97 95       	ror	r25
     e94:	87 95       	ror	r24
     e96:	08 95       	ret

00000e98 <__cmpsf2>:
     e98:	0e 94 36 08 	call	0x106c	; 0x106c <__fp_cmp>
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <__cmpsf2+0x8>
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	08 95       	ret

00000ea2 <__divsf3>:
     ea2:	0e 94 65 07 	call	0xeca	; 0xeca <__divsf3x>
     ea6:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_round>
     eaa:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscB>
     eae:	58 f0       	brcs	.+22     	; 0xec6 <__divsf3+0x24>
     eb0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_pscA>
     eb4:	40 f0       	brcs	.+16     	; 0xec6 <__divsf3+0x24>
     eb6:	29 f4       	brne	.+10     	; 0xec2 <__divsf3+0x20>
     eb8:	5f 3f       	cpi	r21, 0xFF	; 255
     eba:	29 f0       	breq	.+10     	; 0xec6 <__divsf3+0x24>
     ebc:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
     ec0:	51 11       	cpse	r21, r1
     ec2:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     ec6:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_nan>

00000eca <__divsf3x>:
     eca:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_split3>
     ece:	68 f3       	brcs	.-38     	; 0xeaa <__divsf3+0x8>

00000ed0 <__divsf3_pse>:
     ed0:	99 23       	and	r25, r25
     ed2:	b1 f3       	breq	.-20     	; 0xec0 <__divsf3+0x1e>
     ed4:	55 23       	and	r21, r21
     ed6:	91 f3       	breq	.-28     	; 0xebc <__divsf3+0x1a>
     ed8:	95 1b       	sub	r25, r21
     eda:	55 0b       	sbc	r21, r21
     edc:	bb 27       	eor	r27, r27
     ede:	aa 27       	eor	r26, r26
     ee0:	62 17       	cp	r22, r18
     ee2:	73 07       	cpc	r23, r19
     ee4:	84 07       	cpc	r24, r20
     ee6:	38 f0       	brcs	.+14     	; 0xef6 <__divsf3_pse+0x26>
     ee8:	9f 5f       	subi	r25, 0xFF	; 255
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	22 0f       	add	r18, r18
     eee:	33 1f       	adc	r19, r19
     ef0:	44 1f       	adc	r20, r20
     ef2:	aa 1f       	adc	r26, r26
     ef4:	a9 f3       	breq	.-22     	; 0xee0 <__divsf3_pse+0x10>
     ef6:	35 d0       	rcall	.+106    	; 0xf62 <__divsf3_pse+0x92>
     ef8:	0e 2e       	mov	r0, r30
     efa:	3a f0       	brmi	.+14     	; 0xf0a <__divsf3_pse+0x3a>
     efc:	e0 e8       	ldi	r30, 0x80	; 128
     efe:	32 d0       	rcall	.+100    	; 0xf64 <__divsf3_pse+0x94>
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	50 40       	sbci	r21, 0x00	; 0
     f04:	e6 95       	lsr	r30
     f06:	00 1c       	adc	r0, r0
     f08:	ca f7       	brpl	.-14     	; 0xefc <__divsf3_pse+0x2c>
     f0a:	2b d0       	rcall	.+86     	; 0xf62 <__divsf3_pse+0x92>
     f0c:	fe 2f       	mov	r31, r30
     f0e:	29 d0       	rcall	.+82     	; 0xf62 <__divsf3_pse+0x92>
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	bb 1f       	adc	r27, r27
     f18:	26 17       	cp	r18, r22
     f1a:	37 07       	cpc	r19, r23
     f1c:	48 07       	cpc	r20, r24
     f1e:	ab 07       	cpc	r26, r27
     f20:	b0 e8       	ldi	r27, 0x80	; 128
     f22:	09 f0       	breq	.+2      	; 0xf26 <__divsf3_pse+0x56>
     f24:	bb 0b       	sbc	r27, r27
     f26:	80 2d       	mov	r24, r0
     f28:	bf 01       	movw	r22, r30
     f2a:	ff 27       	eor	r31, r31
     f2c:	93 58       	subi	r25, 0x83	; 131
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	3a f0       	brmi	.+14     	; 0xf40 <__divsf3_pse+0x70>
     f32:	9e 3f       	cpi	r25, 0xFE	; 254
     f34:	51 05       	cpc	r21, r1
     f36:	78 f0       	brcs	.+30     	; 0xf56 <__divsf3_pse+0x86>
     f38:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
     f3c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     f40:	5f 3f       	cpi	r21, 0xFF	; 255
     f42:	e4 f3       	brlt	.-8      	; 0xf3c <__divsf3_pse+0x6c>
     f44:	98 3e       	cpi	r25, 0xE8	; 232
     f46:	d4 f3       	brlt	.-12     	; 0xf3c <__divsf3_pse+0x6c>
     f48:	86 95       	lsr	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b7 95       	ror	r27
     f50:	f7 95       	ror	r31
     f52:	9f 5f       	subi	r25, 0xFF	; 255
     f54:	c9 f7       	brne	.-14     	; 0xf48 <__divsf3_pse+0x78>
     f56:	88 0f       	add	r24, r24
     f58:	91 1d       	adc	r25, r1
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	97 f9       	bld	r25, 7
     f60:	08 95       	ret
     f62:	e1 e0       	ldi	r30, 0x01	; 1
     f64:	66 0f       	add	r22, r22
     f66:	77 1f       	adc	r23, r23
     f68:	88 1f       	adc	r24, r24
     f6a:	bb 1f       	adc	r27, r27
     f6c:	62 17       	cp	r22, r18
     f6e:	73 07       	cpc	r23, r19
     f70:	84 07       	cpc	r24, r20
     f72:	ba 07       	cpc	r27, r26
     f74:	20 f0       	brcs	.+8      	; 0xf7e <__divsf3_pse+0xae>
     f76:	62 1b       	sub	r22, r18
     f78:	73 0b       	sbc	r23, r19
     f7a:	84 0b       	sbc	r24, r20
     f7c:	ba 0b       	sbc	r27, r26
     f7e:	ee 1f       	adc	r30, r30
     f80:	88 f7       	brcc	.-30     	; 0xf64 <__divsf3_pse+0x94>
     f82:	e0 95       	com	r30
     f84:	08 95       	ret

00000f86 <__fixsfsi>:
     f86:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     f8a:	68 94       	set
     f8c:	b1 11       	cpse	r27, r1
     f8e:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     f92:	08 95       	ret

00000f94 <__fixunssfsi>:
     f94:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_splitA>
     f98:	88 f0       	brcs	.+34     	; 0xfbc <__fixunssfsi+0x28>
     f9a:	9f 57       	subi	r25, 0x7F	; 127
     f9c:	98 f0       	brcs	.+38     	; 0xfc4 <__fixunssfsi+0x30>
     f9e:	b9 2f       	mov	r27, r25
     fa0:	99 27       	eor	r25, r25
     fa2:	b7 51       	subi	r27, 0x17	; 23
     fa4:	b0 f0       	brcs	.+44     	; 0xfd2 <__fixunssfsi+0x3e>
     fa6:	e1 f0       	breq	.+56     	; 0xfe0 <__fixunssfsi+0x4c>
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	1a f0       	brmi	.+6      	; 0xfb8 <__fixunssfsi+0x24>
     fb2:	ba 95       	dec	r27
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__fixunssfsi+0x14>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <__fixunssfsi+0x4c>
     fb8:	b1 30       	cpi	r27, 0x01	; 1
     fba:	91 f0       	breq	.+36     	; 0xfe0 <__fixunssfsi+0x4c>
     fbc:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_zero>
     fc0:	b1 e0       	ldi	r27, 0x01	; 1
     fc2:	08 95       	ret
     fc4:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_zero>
     fc8:	67 2f       	mov	r22, r23
     fca:	78 2f       	mov	r23, r24
     fcc:	88 27       	eor	r24, r24
     fce:	b8 5f       	subi	r27, 0xF8	; 248
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <__fixunssfsi+0x4c>
     fd2:	b9 3f       	cpi	r27, 0xF9	; 249
     fd4:	cc f3       	brlt	.-14     	; 0xfc8 <__fixunssfsi+0x34>
     fd6:	86 95       	lsr	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	b3 95       	inc	r27
     fde:	d9 f7       	brne	.-10     	; 0xfd6 <__fixunssfsi+0x42>
     fe0:	3e f4       	brtc	.+14     	; 0xff0 <__fixunssfsi+0x5c>
     fe2:	90 95       	com	r25
     fe4:	80 95       	com	r24
     fe6:	70 95       	com	r23
     fe8:	61 95       	neg	r22
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__floatunsisf>:
     ff2:	e8 94       	clt
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <__floatsisf+0x12>

00000ff6 <__floatsisf>:
     ff6:	97 fb       	bst	r25, 7
     ff8:	3e f4       	brtc	.+14     	; 0x1008 <__floatsisf+0x12>
     ffa:	90 95       	com	r25
     ffc:	80 95       	com	r24
     ffe:	70 95       	com	r23
    1000:	61 95       	neg	r22
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	99 23       	and	r25, r25
    100a:	a9 f0       	breq	.+42     	; 0x1036 <__floatsisf+0x40>
    100c:	f9 2f       	mov	r31, r25
    100e:	96 e9       	ldi	r25, 0x96	; 150
    1010:	bb 27       	eor	r27, r27
    1012:	93 95       	inc	r25
    1014:	f6 95       	lsr	r31
    1016:	87 95       	ror	r24
    1018:	77 95       	ror	r23
    101a:	67 95       	ror	r22
    101c:	b7 95       	ror	r27
    101e:	f1 11       	cpse	r31, r1
    1020:	f8 cf       	rjmp	.-16     	; 0x1012 <__floatsisf+0x1c>
    1022:	fa f4       	brpl	.+62     	; 0x1062 <__floatsisf+0x6c>
    1024:	bb 0f       	add	r27, r27
    1026:	11 f4       	brne	.+4      	; 0x102c <__floatsisf+0x36>
    1028:	60 ff       	sbrs	r22, 0
    102a:	1b c0       	rjmp	.+54     	; 0x1062 <__floatsisf+0x6c>
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	16 c0       	rjmp	.+44     	; 0x1062 <__floatsisf+0x6c>
    1036:	88 23       	and	r24, r24
    1038:	11 f0       	breq	.+4      	; 0x103e <__floatsisf+0x48>
    103a:	96 e9       	ldi	r25, 0x96	; 150
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <__floatsisf+0x6a>
    103e:	77 23       	and	r23, r23
    1040:	21 f0       	breq	.+8      	; 0x104a <__floatsisf+0x54>
    1042:	9e e8       	ldi	r25, 0x8E	; 142
    1044:	87 2f       	mov	r24, r23
    1046:	76 2f       	mov	r23, r22
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <__floatsisf+0x5e>
    104a:	66 23       	and	r22, r22
    104c:	71 f0       	breq	.+28     	; 0x106a <__floatsisf+0x74>
    104e:	96 e8       	ldi	r25, 0x86	; 134
    1050:	86 2f       	mov	r24, r22
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	2a f0       	brmi	.+10     	; 0x1062 <__floatsisf+0x6c>
    1058:	9a 95       	dec	r25
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	da f7       	brpl	.-10     	; 0x1058 <__floatsisf+0x62>
    1062:	88 0f       	add	r24, r24
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
    1068:	97 f9       	bld	r25, 7
    106a:	08 95       	ret

0000106c <__fp_cmp>:
    106c:	99 0f       	add	r25, r25
    106e:	00 08       	sbc	r0, r0
    1070:	55 0f       	add	r21, r21
    1072:	aa 0b       	sbc	r26, r26
    1074:	e0 e8       	ldi	r30, 0x80	; 128
    1076:	fe ef       	ldi	r31, 0xFE	; 254
    1078:	16 16       	cp	r1, r22
    107a:	17 06       	cpc	r1, r23
    107c:	e8 07       	cpc	r30, r24
    107e:	f9 07       	cpc	r31, r25
    1080:	c0 f0       	brcs	.+48     	; 0x10b2 <__fp_cmp+0x46>
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	e4 07       	cpc	r30, r20
    1088:	f5 07       	cpc	r31, r21
    108a:	98 f0       	brcs	.+38     	; 0x10b2 <__fp_cmp+0x46>
    108c:	62 1b       	sub	r22, r18
    108e:	73 0b       	sbc	r23, r19
    1090:	84 0b       	sbc	r24, r20
    1092:	95 0b       	sbc	r25, r21
    1094:	39 f4       	brne	.+14     	; 0x10a4 <__fp_cmp+0x38>
    1096:	0a 26       	eor	r0, r26
    1098:	61 f0       	breq	.+24     	; 0x10b2 <__fp_cmp+0x46>
    109a:	23 2b       	or	r18, r19
    109c:	24 2b       	or	r18, r20
    109e:	25 2b       	or	r18, r21
    10a0:	21 f4       	brne	.+8      	; 0x10aa <__fp_cmp+0x3e>
    10a2:	08 95       	ret
    10a4:	0a 26       	eor	r0, r26
    10a6:	09 f4       	brne	.+2      	; 0x10aa <__fp_cmp+0x3e>
    10a8:	a1 40       	sbci	r26, 0x01	; 1
    10aa:	a6 95       	lsr	r26
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	81 1d       	adc	r24, r1
    10b0:	81 1d       	adc	r24, r1
    10b2:	08 95       	ret

000010b4 <__fp_inf>:
    10b4:	97 f9       	bld	r25, 7
    10b6:	9f 67       	ori	r25, 0x7F	; 127
    10b8:	80 e8       	ldi	r24, 0x80	; 128
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	08 95       	ret

000010c0 <__fp_nan>:
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	80 ec       	ldi	r24, 0xC0	; 192
    10c4:	08 95       	ret

000010c6 <__fp_pscA>:
    10c6:	00 24       	eor	r0, r0
    10c8:	0a 94       	dec	r0
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	18 06       	cpc	r1, r24
    10d0:	09 06       	cpc	r0, r25
    10d2:	08 95       	ret

000010d4 <__fp_pscB>:
    10d4:	00 24       	eor	r0, r0
    10d6:	0a 94       	dec	r0
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	14 06       	cpc	r1, r20
    10de:	05 06       	cpc	r0, r21
    10e0:	08 95       	ret

000010e2 <__fp_round>:
    10e2:	09 2e       	mov	r0, r25
    10e4:	03 94       	inc	r0
    10e6:	00 0c       	add	r0, r0
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__fp_round+0xc>
    10ea:	88 23       	and	r24, r24
    10ec:	52 f0       	brmi	.+20     	; 0x1102 <__fp_round+0x20>
    10ee:	bb 0f       	add	r27, r27
    10f0:	40 f4       	brcc	.+16     	; 0x1102 <__fp_round+0x20>
    10f2:	bf 2b       	or	r27, r31
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__fp_round+0x18>
    10f6:	60 ff       	sbrs	r22, 0
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <__fp_round+0x20>
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	08 95       	ret

00001104 <__fp_split3>:
    1104:	57 fd       	sbrc	r21, 7
    1106:	90 58       	subi	r25, 0x80	; 128
    1108:	44 0f       	add	r20, r20
    110a:	55 1f       	adc	r21, r21
    110c:	59 f0       	breq	.+22     	; 0x1124 <__fp_splitA+0x10>
    110e:	5f 3f       	cpi	r21, 0xFF	; 255
    1110:	71 f0       	breq	.+28     	; 0x112e <__fp_splitA+0x1a>
    1112:	47 95       	ror	r20

00001114 <__fp_splitA>:
    1114:	88 0f       	add	r24, r24
    1116:	97 fb       	bst	r25, 7
    1118:	99 1f       	adc	r25, r25
    111a:	61 f0       	breq	.+24     	; 0x1134 <__fp_splitA+0x20>
    111c:	9f 3f       	cpi	r25, 0xFF	; 255
    111e:	79 f0       	breq	.+30     	; 0x113e <__fp_splitA+0x2a>
    1120:	87 95       	ror	r24
    1122:	08 95       	ret
    1124:	12 16       	cp	r1, r18
    1126:	13 06       	cpc	r1, r19
    1128:	14 06       	cpc	r1, r20
    112a:	55 1f       	adc	r21, r21
    112c:	f2 cf       	rjmp	.-28     	; 0x1112 <__fp_split3+0xe>
    112e:	46 95       	lsr	r20
    1130:	f1 df       	rcall	.-30     	; 0x1114 <__fp_splitA>
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <__fp_splitA+0x30>
    1134:	16 16       	cp	r1, r22
    1136:	17 06       	cpc	r1, r23
    1138:	18 06       	cpc	r1, r24
    113a:	99 1f       	adc	r25, r25
    113c:	f1 cf       	rjmp	.-30     	; 0x1120 <__fp_splitA+0xc>
    113e:	86 95       	lsr	r24
    1140:	71 05       	cpc	r23, r1
    1142:	61 05       	cpc	r22, r1
    1144:	08 94       	sec
    1146:	08 95       	ret

00001148 <__fp_zero>:
    1148:	e8 94       	clt

0000114a <__fp_szero>:
    114a:	bb 27       	eor	r27, r27
    114c:	66 27       	eor	r22, r22
    114e:	77 27       	eor	r23, r23
    1150:	cb 01       	movw	r24, r22
    1152:	97 f9       	bld	r25, 7
    1154:	08 95       	ret

00001156 <__gesf2>:
    1156:	0e 94 36 08 	call	0x106c	; 0x106c <__fp_cmp>
    115a:	08 f4       	brcc	.+2      	; 0x115e <__gesf2+0x8>
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__mulsf3>:
    1160:	0e 94 c3 08 	call	0x1186	; 0x1186 <__mulsf3x>
    1164:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_round>
    1168:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_pscA>
    116c:	38 f0       	brcs	.+14     	; 0x117c <__mulsf3+0x1c>
    116e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscB>
    1172:	20 f0       	brcs	.+8      	; 0x117c <__mulsf3+0x1c>
    1174:	95 23       	and	r25, r21
    1176:	11 f0       	breq	.+4      	; 0x117c <__mulsf3+0x1c>
    1178:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
    117c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_nan>
    1180:	11 24       	eor	r1, r1
    1182:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>

00001186 <__mulsf3x>:
    1186:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_split3>
    118a:	70 f3       	brcs	.-36     	; 0x1168 <__mulsf3+0x8>

0000118c <__mulsf3_pse>:
    118c:	95 9f       	mul	r25, r21
    118e:	c1 f3       	breq	.-16     	; 0x1180 <__mulsf3+0x20>
    1190:	95 0f       	add	r25, r21
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	55 1f       	adc	r21, r21
    1196:	62 9f       	mul	r22, r18
    1198:	f0 01       	movw	r30, r0
    119a:	72 9f       	mul	r23, r18
    119c:	bb 27       	eor	r27, r27
    119e:	f0 0d       	add	r31, r0
    11a0:	b1 1d       	adc	r27, r1
    11a2:	63 9f       	mul	r22, r19
    11a4:	aa 27       	eor	r26, r26
    11a6:	f0 0d       	add	r31, r0
    11a8:	b1 1d       	adc	r27, r1
    11aa:	aa 1f       	adc	r26, r26
    11ac:	64 9f       	mul	r22, r20
    11ae:	66 27       	eor	r22, r22
    11b0:	b0 0d       	add	r27, r0
    11b2:	a1 1d       	adc	r26, r1
    11b4:	66 1f       	adc	r22, r22
    11b6:	82 9f       	mul	r24, r18
    11b8:	22 27       	eor	r18, r18
    11ba:	b0 0d       	add	r27, r0
    11bc:	a1 1d       	adc	r26, r1
    11be:	62 1f       	adc	r22, r18
    11c0:	73 9f       	mul	r23, r19
    11c2:	b0 0d       	add	r27, r0
    11c4:	a1 1d       	adc	r26, r1
    11c6:	62 1f       	adc	r22, r18
    11c8:	83 9f       	mul	r24, r19
    11ca:	a0 0d       	add	r26, r0
    11cc:	61 1d       	adc	r22, r1
    11ce:	22 1f       	adc	r18, r18
    11d0:	74 9f       	mul	r23, r20
    11d2:	33 27       	eor	r19, r19
    11d4:	a0 0d       	add	r26, r0
    11d6:	61 1d       	adc	r22, r1
    11d8:	23 1f       	adc	r18, r19
    11da:	84 9f       	mul	r24, r20
    11dc:	60 0d       	add	r22, r0
    11de:	21 1d       	adc	r18, r1
    11e0:	82 2f       	mov	r24, r18
    11e2:	76 2f       	mov	r23, r22
    11e4:	6a 2f       	mov	r22, r26
    11e6:	11 24       	eor	r1, r1
    11e8:	9f 57       	subi	r25, 0x7F	; 127
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	9a f0       	brmi	.+38     	; 0x1214 <__mulsf3_pse+0x88>
    11ee:	f1 f0       	breq	.+60     	; 0x122c <__mulsf3_pse+0xa0>
    11f0:	88 23       	and	r24, r24
    11f2:	4a f0       	brmi	.+18     	; 0x1206 <__mulsf3_pse+0x7a>
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	bb 1f       	adc	r27, r27
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	91 50       	subi	r25, 0x01	; 1
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__mulsf3_pse+0x64>
    1206:	9e 3f       	cpi	r25, 0xFE	; 254
    1208:	51 05       	cpc	r21, r1
    120a:	80 f0       	brcs	.+32     	; 0x122c <__mulsf3_pse+0xa0>
    120c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
    1210:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	e4 f3       	brlt	.-8      	; 0x1210 <__mulsf3_pse+0x84>
    1218:	98 3e       	cpi	r25, 0xE8	; 232
    121a:	d4 f3       	brlt	.-12     	; 0x1210 <__mulsf3_pse+0x84>
    121c:	86 95       	lsr	r24
    121e:	77 95       	ror	r23
    1220:	67 95       	ror	r22
    1222:	b7 95       	ror	r27
    1224:	f7 95       	ror	r31
    1226:	e7 95       	ror	r30
    1228:	9f 5f       	subi	r25, 0xFF	; 255
    122a:	c1 f7       	brne	.-16     	; 0x121c <__mulsf3_pse+0x90>
    122c:	fe 2b       	or	r31, r30
    122e:	88 0f       	add	r24, r24
    1230:	91 1d       	adc	r25, r1
    1232:	96 95       	lsr	r25
    1234:	87 95       	ror	r24
    1236:	97 f9       	bld	r25, 7
    1238:	08 95       	ret

0000123a <__divmodhi4>:
    123a:	97 fb       	bst	r25, 7
    123c:	07 2e       	mov	r0, r23
    123e:	16 f4       	brtc	.+4      	; 0x1244 <__divmodhi4+0xa>
    1240:	00 94       	com	r0
    1242:	07 d0       	rcall	.+14     	; 0x1252 <__divmodhi4_neg1>
    1244:	77 fd       	sbrc	r23, 7
    1246:	09 d0       	rcall	.+18     	; 0x125a <__divmodhi4_neg2>
    1248:	0e 94 31 09 	call	0x1262	; 0x1262 <__udivmodhi4>
    124c:	07 fc       	sbrc	r0, 7
    124e:	05 d0       	rcall	.+10     	; 0x125a <__divmodhi4_neg2>
    1250:	3e f4       	brtc	.+14     	; 0x1260 <__divmodhi4_exit>

00001252 <__divmodhi4_neg1>:
    1252:	90 95       	com	r25
    1254:	81 95       	neg	r24
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <__divmodhi4_neg2>:
    125a:	70 95       	com	r23
    125c:	61 95       	neg	r22
    125e:	7f 4f       	sbci	r23, 0xFF	; 255

00001260 <__divmodhi4_exit>:
    1260:	08 95       	ret

00001262 <__udivmodhi4>:
    1262:	aa 1b       	sub	r26, r26
    1264:	bb 1b       	sub	r27, r27
    1266:	51 e1       	ldi	r21, 0x11	; 17
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <__udivmodhi4_ep>

0000126a <__udivmodhi4_loop>:
    126a:	aa 1f       	adc	r26, r26
    126c:	bb 1f       	adc	r27, r27
    126e:	a6 17       	cp	r26, r22
    1270:	b7 07       	cpc	r27, r23
    1272:	10 f0       	brcs	.+4      	; 0x1278 <__udivmodhi4_ep>
    1274:	a6 1b       	sub	r26, r22
    1276:	b7 0b       	sbc	r27, r23

00001278 <__udivmodhi4_ep>:
    1278:	88 1f       	adc	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	5a 95       	dec	r21
    127e:	a9 f7       	brne	.-22     	; 0x126a <__udivmodhi4_loop>
    1280:	80 95       	com	r24
    1282:	90 95       	com	r25
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	08 95       	ret

0000128a <__itoa_ncheck>:
    128a:	bb 27       	eor	r27, r27
    128c:	4a 30       	cpi	r20, 0x0A	; 10
    128e:	31 f4       	brne	.+12     	; 0x129c <__itoa_ncheck+0x12>
    1290:	99 23       	and	r25, r25
    1292:	22 f4       	brpl	.+8      	; 0x129c <__itoa_ncheck+0x12>
    1294:	bd e2       	ldi	r27, 0x2D	; 45
    1296:	90 95       	com	r25
    1298:	81 95       	neg	r24
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__utoa_common>

000012a0 <__utoa_ncheck>:
    12a0:	bb 27       	eor	r27, r27

000012a2 <__utoa_common>:
    12a2:	fb 01       	movw	r30, r22
    12a4:	55 27       	eor	r21, r21
    12a6:	aa 27       	eor	r26, r26
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	aa 1f       	adc	r26, r26
    12ae:	a4 17       	cp	r26, r20
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <__utoa_common+0x14>
    12b2:	a4 1b       	sub	r26, r20
    12b4:	83 95       	inc	r24
    12b6:	50 51       	subi	r21, 0x10	; 16
    12b8:	b9 f7       	brne	.-18     	; 0x12a8 <__utoa_common+0x6>
    12ba:	a0 5d       	subi	r26, 0xD0	; 208
    12bc:	aa 33       	cpi	r26, 0x3A	; 58
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <__utoa_common+0x20>
    12c0:	a9 5d       	subi	r26, 0xD9	; 217
    12c2:	a1 93       	st	Z+, r26
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	79 f7       	brne	.-34     	; 0x12a6 <__utoa_common+0x4>
    12c8:	b1 11       	cpse	r27, r1
    12ca:	b1 93       	st	Z+, r27
    12cc:	11 92       	st	Z+, r1
    12ce:	cb 01       	movw	r24, r22
    12d0:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <strrev>

000012d4 <strrev>:
    12d4:	dc 01       	movw	r26, r24
    12d6:	fc 01       	movw	r30, r24
    12d8:	67 2f       	mov	r22, r23
    12da:	71 91       	ld	r23, Z+
    12dc:	77 23       	and	r23, r23
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <strrev+0x4>
    12e0:	32 97       	sbiw	r30, 0x02	; 2
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <strrev+0x18>
    12e4:	7c 91       	ld	r23, X
    12e6:	6d 93       	st	X+, r22
    12e8:	70 83       	st	Z, r23
    12ea:	62 91       	ld	r22, -Z
    12ec:	ae 17       	cp	r26, r30
    12ee:	bf 07       	cpc	r27, r31
    12f0:	c8 f3       	brcs	.-14     	; 0x12e4 <strrev+0x10>
    12f2:	08 95       	ret

000012f4 <_exit>:
    12f4:	f8 94       	cli

000012f6 <__stop_program>:
    12f6:	ff cf       	rjmp	.-2      	; 0x12f6 <__stop_program>
