
nRF24L01_ATmega640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800220  00800220  00000864  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b5f  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ca  00000000  00000000  00003657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001591  00000000  00000000  00004b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005bc  00000000  00000000  000060b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000942  00000000  00000000  00006670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e91  00000000  00000000  00006fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00008e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_1>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 eb       	ldi	r30, 0xB0	; 176
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 32       	cpi	r26, 0x20	; 32
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a0 e2       	ldi	r26, 0x20	; 32
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a1 32       	cpi	r26, 0x21	; 33
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 c9 01 	call	0x392	; 0x392 <main>
 11a:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setup_ports>:


void setup_ports()
{
	// LEDs
	DDRL |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED5) | (1<<LED6); // set LEDs as outputs
 122:	ea e0       	ldi	r30, 0x0A	; 10
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	80 81       	ld	r24, Z
 128:	8f 63       	ori	r24, 0x3F	; 63
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <LED_check>:

}

void LED_check()
{
 12e:	23 e0       	ldi	r18, 0x03	; 3
 130:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	
	for (i=0; i<3; i++)
	{
		LED1_ON;
 132:	eb e0       	ldi	r30, 0x0B	; 11
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LED_check+0x12>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LED_check+0x18>
 146:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
		LED2_ON;
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9c e9       	ldi	r25, 0x9C	; 156
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LED_check+0x2a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LED_check+0x30>
 15e:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24
		LED3_ON;
 166:	80 81       	ld	r24, Z
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	80 83       	st	Z, r24
 16c:	8f e3       	ldi	r24, 0x3F	; 63
 16e:	9c e9       	ldi	r25, 0x9C	; 156
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LED_check+0x42>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LED_check+0x48>
 176:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
 178:	80 81       	ld	r24, Z
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	80 83       	st	Z, r24
		LED4_ON;
 17e:	80 81       	ld	r24, Z
 180:	88 60       	ori	r24, 0x08	; 8
 182:	80 83       	st	Z, r24
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LED_check+0x5a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LED_check+0x60>
 18e:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
 190:	80 81       	ld	r24, Z
 192:	87 7f       	andi	r24, 0xF7	; 247
 194:	80 83       	st	Z, r24
		LED5_ON;
 196:	80 81       	ld	r24, Z
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	80 83       	st	Z, r24
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	9c e9       	ldi	r25, 0x9C	; 156
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LED_check+0x72>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LED_check+0x78>
 1a6:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 7e       	andi	r24, 0xEF	; 239
 1ac:	80 83       	st	Z, r24
		LED6_ON;
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24
 1b4:	8f e3       	ldi	r24, 0x3F	; 63
 1b6:	9c e9       	ldi	r25, 0x9C	; 156
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LED_check+0x8a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LED_check+0x90>
 1be:	00 00       	nop
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LED_check+0x96>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LED_check+0x9c>
 1ca:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		
		_delay_ms(LED_check_DELAY);
		LED6_OFF;
 1cc:	80 81       	ld	r24, Z
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	80 83       	st	Z, r24
		LED5_ON;
 1d2:	80 81       	ld	r24, Z
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	80 83       	st	Z, r24
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	9c e9       	ldi	r25, 0x9C	; 156
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LED_check+0xae>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LED_check+0xb4>
 1e2:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 7e       	andi	r24, 0xEF	; 239
 1e8:	80 83       	st	Z, r24
		LED4_ON;
 1ea:	80 81       	ld	r24, Z
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	80 83       	st	Z, r24
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LED_check+0xc6>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LED_check+0xcc>
 1fa:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
 1fc:	80 81       	ld	r24, Z
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	80 83       	st	Z, r24
		LED3_ON;
 202:	80 81       	ld	r24, Z
 204:	84 60       	ori	r24, 0x04	; 4
 206:	80 83       	st	Z, r24
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	9c e9       	ldi	r25, 0x9C	; 156
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LED_check+0xde>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LED_check+0xe4>
 212:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
 214:	80 81       	ld	r24, Z
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	80 83       	st	Z, r24
		LED2_ON;
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	80 83       	st	Z, r24
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LED_check+0xf6>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LED_check+0xfc>
 22a:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
 22c:	80 81       	ld	r24, Z
 22e:	8d 7f       	andi	r24, 0xFD	; 253
 230:	80 83       	st	Z, r24
		LED1_ON;
 232:	80 81       	ld	r24, Z
 234:	81 60       	ori	r24, 0x01	; 1
 236:	80 83       	st	Z, r24
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9c e9       	ldi	r25, 0x9C	; 156
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LED_check+0x10e>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LED_check+0x114>
 242:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
 244:	80 81       	ld	r24, Z
 246:	8e 7f       	andi	r24, 0xFE	; 254
 248:	80 83       	st	Z, r24
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	31 09       	sbc	r19, r1

void LED_check()
{
	int i;
	
	for (i=0; i<3; i++)
 24e:	09 f0       	breq	.+2      	; 0x252 <LED_check+0x124>
 250:	72 cf       	rjmp	.-284    	; 0x136 <LED_check+0x8>
		LED1_ON;
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
	}

 252:	08 95       	ret

00000254 <data_to_port>:


void data_to_port(char data)
{
	// DB0
	if ( (data >> 0)&(0x01) )
 254:	80 ff       	sbrs	r24, 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <data_to_port+0x8>
		PORTC |= (1<<DB0);
 258:	43 9a       	sbi	0x08, 3	; 8
 25a:	01 c0       	rjmp	.+2      	; 0x25e <data_to_port+0xa>
	else
		PORTC &= ~(1<<DB0);
 25c:	43 98       	cbi	0x08, 3	; 8
	// DB1
	if ( (data >> 1)&(0x01) )
 25e:	81 ff       	sbrs	r24, 1
 260:	02 c0       	rjmp	.+4      	; 0x266 <data_to_port+0x12>
		PORTC |= (1<<DB1);
 262:	44 9a       	sbi	0x08, 4	; 8
 264:	01 c0       	rjmp	.+2      	; 0x268 <data_to_port+0x14>
	else
		PORTC &= ~(1<<DB1);
 266:	44 98       	cbi	0x08, 4	; 8
	// DB2
	if ( (data >> 2)&(0x01) )
 268:	82 ff       	sbrs	r24, 2
 26a:	02 c0       	rjmp	.+4      	; 0x270 <data_to_port+0x1c>
		PORTC |= (1<<DB2);
 26c:	45 9a       	sbi	0x08, 5	; 8
 26e:	01 c0       	rjmp	.+2      	; 0x272 <data_to_port+0x1e>
	else
		PORTC &= ~(1<<DB2);
 270:	45 98       	cbi	0x08, 5	; 8
	// DB3
	if ( (data >> 3)&(0x01) )
 272:	83 ff       	sbrs	r24, 3
 274:	02 c0       	rjmp	.+4      	; 0x27a <data_to_port+0x26>
		PORTC |= (1<<DB3);
 276:	46 9a       	sbi	0x08, 6	; 8
 278:	01 c0       	rjmp	.+2      	; 0x27c <data_to_port+0x28>
	else
		PORTC &= ~(1<<DB3);
 27a:	46 98       	cbi	0x08, 6	; 8
	// DB4
	if ( (data >> 4)&(0x01) )
 27c:	84 ff       	sbrs	r24, 4
 27e:	02 c0       	rjmp	.+4      	; 0x284 <data_to_port+0x30>
		PORTC |= (1<<DB4);
 280:	47 9a       	sbi	0x08, 7	; 8
 282:	01 c0       	rjmp	.+2      	; 0x286 <data_to_port+0x32>
	else
		PORTC &= ~(1<<DB4);
 284:	47 98       	cbi	0x08, 7	; 8
	// DB5
	if ( (data >> 5)&(0x01) )
 286:	85 ff       	sbrs	r24, 5
 288:	02 c0       	rjmp	.+4      	; 0x28e <data_to_port+0x3a>
		PORTG |= (1<<DB5);
 28a:	a0 9a       	sbi	0x14, 0	; 20
 28c:	01 c0       	rjmp	.+2      	; 0x290 <data_to_port+0x3c>
	else
		PORTG &= ~(1<<DB5);
 28e:	a0 98       	cbi	0x14, 0	; 20
	// DB6
	if ( (data >> 6)&(0x01) )
 290:	86 ff       	sbrs	r24, 6
 292:	02 c0       	rjmp	.+4      	; 0x298 <data_to_port+0x44>
		PORTG |= (1<<DB6);
 294:	a1 9a       	sbi	0x14, 1	; 20
 296:	01 c0       	rjmp	.+2      	; 0x29a <data_to_port+0x46>
	else
		PORTG &= ~(1<<DB6);
 298:	a1 98       	cbi	0x14, 1	; 20
	// DB7
	if ( (data >> 7)&(0x01) )
 29a:	88 23       	and	r24, r24
 29c:	14 f4       	brge	.+4      	; 0x2a2 <data_to_port+0x4e>
		PORTD |= (1<<DB7);
 29e:	5f 9a       	sbi	0x0b, 7	; 11
 2a0:	08 95       	ret
	else
		PORTD &= ~(1<<DB7);
 2a2:	5f 98       	cbi	0x0b, 7	; 11
 2a4:	08 95       	ret

000002a6 <lcd_send_cmd>:
	
}

void lcd_send_cmd(char cmd)
{
	data_to_port(cmd); //put data on PORT
 2a6:	0e 94 2a 01 	call	0x254	; 0x254 <data_to_port>
	
	RS_LOW; // send command
 2aa:	42 98       	cbi	0x08, 2	; 8
	RW_LOW; // write operation
 2ac:	41 98       	cbi	0x08, 1	; 8
		
	// enable pulse
	E_HIGH;
 2ae:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e8       	ldi	r24, 0x8F	; 143
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_send_cmd+0xe>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_send_cmd+0x14>
 2ba:	00 00       	nop
		_delay_us(100); 
	E_LOW;
 2bc:	40 98       	cbi	0x08, 0	; 8
 2be:	08 95       	ret

000002c0 <setup_lcd>:
#include <avr/io.h>

void setup_lcd()
{	
	// PORT setup
	DDRC |= (1<<RS)  | (1<<RW)  | (1<<E) | (1<<DB0) | (1<<DB1) | (1<<DB2) | (1<<DB3) | (1<<DB4) ;
 2c0:	87 b1       	in	r24, 0x07	; 7
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	87 b9       	out	0x07, r24	; 7
	DDRG |= (1<<DB5) | (1<<DB6);
 2c6:	83 b3       	in	r24, 0x13	; 19
 2c8:	83 60       	ori	r24, 0x03	; 3
 2ca:	83 bb       	out	0x13, r24	; 19
	DDRD |= (1<<DB7);
 2cc:	57 9a       	sbi	0x0a, 7	; 10
	
	
	E_LOW;
 2ce:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	83 ed       	ldi	r24, 0xD3	; 211
 2d4:	90 e3       	ldi	r25, 0x30	; 48
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <setup_lcd+0x16>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <setup_lcd+0x20>
 2e0:	00 00       	nop
		_delay_ms(1000); // at least 40 ms
	
	lcd_send_cmd(WAKE_UP);
 2e2:	80 e3       	ldi	r24, 0x30	; 48
 2e4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
 2e8:	8f e3       	ldi	r24, 0x3F	; 63
 2ea:	9c e9       	ldi	r25, 0x9C	; 156
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <setup_lcd+0x2c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <setup_lcd+0x32>
 2f2:	00 00       	nop
	_delay_ms(10); // at least 5 ms
		
	lcd_send_cmd(MODE_8_BIT | MODE_2_LINE); // 8-bit mode, 2-line mode
 2f4:	88 e3       	ldi	r24, 0x38	; 56
 2f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(0x10); // set cursor
 2fa:	80 e1       	ldi	r24, 0x10	; 16
 2fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(DISPLAY_ON); // turn on entire display, cursor is on
 300:	8c e0       	ldi	r24, 0x0C	; 12
 302:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(CLEAR_DISPLAY);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(INCREMENT_CURSOR); // cursor automatically increments after a character is written
 30c:	86 e0       	ldi	r24, 0x06	; 6
 30e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
 312:	08 95       	ret

00000314 <lcd_send_data>:
	E_LOW;
}

void lcd_send_data(char data)
{
	data_to_port(data); //put data on PORT
 314:	0e 94 2a 01 	call	0x254	; 0x254 <data_to_port>

	RS_HIGH; // send data
 318:	42 9a       	sbi	0x08, 2	; 8
	RW_LOW; // write operation
 31a:	41 98       	cbi	0x08, 1	; 8

	// enable pulse
	E_HIGH;
 31c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	8f e8       	ldi	r24, 0x8F	; 143
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <lcd_send_data+0xe>
 326:	00 c0       	rjmp	.+0      	; 0x328 <lcd_send_data+0x14>
 328:	00 00       	nop
		_delay_us(100);
	E_LOW;	
 32a:	40 98       	cbi	0x08, 0	; 8
 32c:	08 95       	ret

0000032e <lcd_set_cursor>:
	else
		PORTD &= ~(1<<DB7);
}

void lcd_set_cursor(char row, char column)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	00 d0       	rcall	.+0      	; 0x334 <lcd_set_cursor+0x6>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
	unsigned char address[2] = {LINE_1, LINE_2};
 338:	90 e8       	ldi	r25, 0x80	; 128
 33a:	99 83       	std	Y+1, r25	; 0x01
 33c:	90 ec       	ldi	r25, 0xC0	; 192
 33e:	9a 83       	std	Y+2, r25	; 0x02
	lcd_send_cmd(address[row-1] + (column-1));
 340:	fe 01       	movw	r30, r28
 342:	e8 0f       	add	r30, r24
 344:	f1 1d       	adc	r31, r1
 346:	61 50       	subi	r22, 0x01	; 1
 348:	80 81       	ld	r24, Z
 34a:	86 0f       	add	r24, r22
 34c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
 350:	8f e8       	ldi	r24, 0x8F	; 143
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_set_cursor+0x26>
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_set_cursor+0x2c>
 35a:	00 00       	nop
	_delay_us(100);
}
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <lcd_print>:

void lcd_print(char *str)
{
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	fc 01       	movw	r30, r24
	unsigned char i =0;
	while(str[i] != 0)
 36e:	80 81       	ld	r24, Z
 370:	88 23       	and	r24, r24
 372:	59 f0       	breq	.+22     	; 0x38a <lcd_print+0x24>
 374:	8f 01       	movw	r16, r30
 376:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_send_data(str[i]);
 378:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_send_data>
		i++;
 37c:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i =0;
	while(str[i] != 0)
 37e:	f8 01       	movw	r30, r16
 380:	ec 0f       	add	r30, r28
 382:	f1 1d       	adc	r31, r1
 384:	80 81       	ld	r24, Z
 386:	81 11       	cpse	r24, r1
 388:	f7 cf       	rjmp	.-18     	; 0x378 <lcd_print+0x12>
	{
		lcd_send_data(str[i]);
		i++;
	}
}
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <main>:

uint8_t status = 0;

int main(void)
{
	setup_ports();
 392:	0e 94 91 00 	call	0x122	; 0x122 <setup_ports>
	setup_lcd();
 396:	0e 94 60 01 	call	0x2c0	; 0x2c0 <setup_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	8f e3       	ldi	r24, 0x3F	; 63
 39c:	9c e9       	ldi	r25, 0x9C	; 156
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0xc>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x12>
 3a4:	00 00       	nop
	_delay_ms(10);
	lcd_set_cursor(1,1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_set_cursor>
	lcd_print("Initializing...");
 3ae:	80 e1       	ldi	r24, 0x10	; 16
 3b0:	92 e0       	ldi	r25, 0x02	; 2
 3b2:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_print>
 3b6:	ef ed       	ldi	r30, 0xDF	; 223
 3b8:	fe e2       	ldi	r31, 0x2E	; 46
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x28>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x2e>
 3c0:	00 00       	nop
	_delay_ms(3);
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <setup_usart0>
	mirf_init();
 3c8:	0e 94 29 02 	call	0x452	; 0x452 <mirf_init>
 3cc:	ff ef       	ldi	r31, 0xFF	; 255
 3ce:	27 ea       	ldi	r18, 0xA7	; 167
 3d0:	81 e6       	ldi	r24, 0x61	; 97
 3d2:	f1 50       	subi	r31, 0x01	; 1
 3d4:	20 40       	sbci	r18, 0x00	; 0
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x40>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x4a>
 3dc:	00 00       	nop
	_delay_ms(2000);	
	lcd_send_cmd(CLEAR_DISPLAY);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	
	LED_check();
 3e4:	0e 94 97 00 	call	0x12e	; 0x12e <LED_check>
	
	sei(); // enable global interrupts
 3e8:	78 94       	sei
	
	mirf_config();
 3ea:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mirf_config>
 3ee:	ef e3       	ldi	r30, 0x3F	; 63
 3f0:	fc e9       	ldi	r31, 0x9C	; 156
 3f2:	31 97       	sbiw	r30, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <main+0x60>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0x66>
 3f8:	00 00       	nop
		//lcd_send_cmd(CLEAR_DISPLAY);
		//_delay_ms(3);
		//lcd_set_cursor(1,1);
		//lcd_print("Waiting for data");
		//_delay_ms(3);
		TOGGLE_LED1;
 3fa:	0b e0       	ldi	r16, 0x0B	; 11
 3fc:	11 e0       	ldi	r17, 0x01	; 1
 3fe:	ee 24       	eor	r14, r14
 400:	e3 94       	inc	r14
		//lcd_print_int(buffer[1]);
		//_delay_ms(3);
		
	//	_delay_ms(5000);
		
		buffer[0] = 'K';
 402:	0f 2e       	mov	r0, r31
 404:	fb e4       	ldi	r31, 0x4B	; 75
 406:	ff 2e       	mov	r15, r31
 408:	f0 2d       	mov	r31, r0
		//lcd_send_cmd(CLEAR_DISPLAY);
		//_delay_ms(3);
		//lcd_set_cursor(1,1);
		//lcd_print("Waiting for data");
		//_delay_ms(3);
		TOGGLE_LED1;
 40a:	f8 01       	movw	r30, r16
 40c:	80 81       	ld	r24, Z
 40e:	8e 25       	eor	r24, r14
 410:	80 83       	st	Z, r24
		//lcd_send_cmd(CLEAR_DISPLAY);
		//lcd_set_cursor(1,1);
		//lcd_print("waiting on RX");
		// wait for data
		while(!mirf_data_ready());
 412:	0e 94 37 02 	call	0x46e	; 0x46e <mirf_data_ready>
 416:	88 23       	and	r24, r24
 418:	e1 f3       	breq	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		//lcd_send_cmd(CLEAR_DISPLAY);
		//mirf_config_register(STATUS, (1 << RX_DR) | (1 << MAX_RT)); // Reset status register
		//LED1_ON; // turn on LED when data is received
		
		mirf_get_data(buffer);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mirf_get_data>
		
		println_int_0(buffer[0]);
 422:	c0 e0       	ldi	r28, 0x00	; 0
 424:	d2 e0       	ldi	r29, 0x02	; 2
 426:	88 81       	ld	r24, Y
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <println_int_0>
		//lcd_print_int(buffer[1]);
		//_delay_ms(3);
		
	//	_delay_ms(5000);
		
		buffer[0] = 'K';
 42e:	f8 82       	st	Y, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 430:	f5 e3       	ldi	r31, 0x35	; 53
 432:	fa 95       	dec	r31
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 00       	nop
		//_delay_us(10);
		_delay_us(10);
		//lcd_send_cmd(CLEAR_DISPLAY);
		///lcd_set_cursor(1,1);
		//lcd_print("waiting on TX");
		mirf_send(buffer, mirf_PAYLOAD);
 438:	60 e1       	ldi	r22, 0x10	; 16
 43a:	ce 01       	movw	r24, r28
 43c:	0e 94 82 02 	call	0x504	; 0x504 <mirf_send>
		while (!mirf_data_sent());
 440:	0e 94 44 02 	call	0x488	; 0x488 <mirf_data_sent>
 444:	88 23       	and	r24, r24
 446:	e1 f3       	breq	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		//lcd_send_cmd(CLEAR_DISPLAY);
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
 448:	60 e3       	ldi	r22, 0x30	; 48
 44a:	87 e0       	ldi	r24, 0x07	; 7
 44c:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config_register>
		//_delay_ms(500);
		
		//while(1);
		
		//_delay_ms(LOOP_DELAY);
    }
 450:	dc cf       	rjmp	.-72     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000452 <mirf_init>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr, 5);
 452:	54 9a       	sbi	0x0a, 4	; 10
 454:	20 9a       	sbi	0x04, 0	; 4
 456:	5c 98       	cbi	0x0b, 4	; 11
 458:	28 9a       	sbi	0x05, 0	; 5
 45a:	e8 98       	cbi	0x1d, 0	; 29
 45c:	e9 e6       	ldi	r30, 0x69	; 105
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	82 60       	ori	r24, 0x02	; 2
 464:	80 83       	st	Z, r24
 466:	e8 9a       	sbi	0x1d, 0	; 29
 468:	0e 94 35 03 	call	0x66a	; 0x66a <spi_master_initialize>
 46c:	08 95       	ret

0000046e <mirf_data_ready>:
 46e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 472:	81 11       	cpse	r24, r1
 474:	07 c0       	rjmp	.+14     	; 0x484 <mirf_data_ready+0x16>
 476:	28 98       	cbi	0x05, 0	; 5
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	0e 94 40 03 	call	0x680	; 0x680 <spi_exchange_char>
 47e:	28 9a       	sbi	0x05, 0	; 5
 480:	80 74       	andi	r24, 0x40	; 64
 482:	08 95       	ret
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	08 95       	ret

00000488 <mirf_data_sent>:
 488:	28 98       	cbi	0x05, 0	; 5
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	0e 94 40 03 	call	0x680	; 0x680 <spi_exchange_char>
 490:	28 9a       	sbi	0x05, 0	; 5
 492:	80 72       	andi	r24, 0x20	; 32
 494:	08 95       	ret

00000496 <mirf_config_register>:
 496:	cf 93       	push	r28
 498:	c6 2f       	mov	r28, r22
 49a:	28 98       	cbi	0x05, 0	; 5
 49c:	8f 71       	andi	r24, 0x1F	; 31
 49e:	80 62       	ori	r24, 0x20	; 32
 4a0:	0e 94 3b 03 	call	0x676	; 0x676 <spi_send_char>
 4a4:	8c 2f       	mov	r24, r28
 4a6:	0e 94 3b 03 	call	0x676	; 0x676 <spi_send_char>
 4aa:	28 9a       	sbi	0x05, 0	; 5
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <mirf_config>:
 4b0:	62 e0       	ldi	r22, 0x02	; 2
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config_register>
 4b8:	8f e8       	ldi	r24, 0x8F	; 143
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <mirf_config+0xc>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <mirf_config+0x12>
 4c2:	00 00       	nop
 4c4:	60 e1       	ldi	r22, 0x10	; 16
 4c6:	81 e1       	ldi	r24, 0x11	; 17
 4c8:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config_register>
 4cc:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
 4d0:	6b e4       	ldi	r22, 0x4B	; 75
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config_register>
 4d8:	5c 9a       	sbi	0x0b, 4	; 11
 4da:	08 95       	ret

000004dc <mirf_get_data>:
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	ec 01       	movw	r28, r24
 4e2:	28 98       	cbi	0x05, 0	; 5
 4e4:	81 e6       	ldi	r24, 0x61	; 97
 4e6:	0e 94 3b 03 	call	0x676	; 0x676 <spi_send_char>
 4ea:	40 e1       	ldi	r20, 0x10	; 16
 4ec:	be 01       	movw	r22, r28
 4ee:	ce 01       	movw	r24, r28
 4f0:	0e 94 55 03 	call	0x6aa	; 0x6aa <spi_exchange_bytes>
 4f4:	28 9a       	sbi	0x05, 0	; 5
 4f6:	60 e4       	ldi	r22, 0x40	; 64
 4f8:	87 e0       	ldi	r24, 0x07	; 7
 4fa:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config_register>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
 50c:	16 2f       	mov	r17, r22
	//println_0("In mirf_send();");

	while (PTX)
 50e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 512:	81 11       	cpse	r24, r1
 514:	fc cf       	rjmp	.-8      	; 0x50e <mirf_send+0xa>
	{

	} // Wait until last packet is send

	mirf_CE_lo;
 516:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1; // Set to transmitter mode
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 51e:	6a e4       	ldi	r22, 0x4A	; 74
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config_register>

	mirf_CSN_lo;             // Pull down chip select
 526:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 528:	81 ee       	ldi	r24, 0xE1	; 225
 52a:	0e 94 3b 03 	call	0x676	; 0x676 <spi_send_char>
	mirf_CSN_hi;             // Pull up chip select
 52e:	28 9a       	sbi	0x05, 0	; 5

	mirf_CSN_lo;                 // Pull down chip select
 530:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 532:	80 ea       	ldi	r24, 0xA0	; 160
 534:	0e 94 3b 03 	call	0x676	; 0x676 <spi_send_char>
	spi_send_bytes(value, len);  // Write payload
 538:	61 2f       	mov	r22, r17
 53a:	ce 01       	movw	r24, r28
 53c:	0e 94 46 03 	call	0x68c	; 0x68c <spi_send_bytes>
	mirf_CSN_hi;                 // Pull up chip select
 540:	28 9a       	sbi	0x05, 0	; 5

	mirf_CE_hi; // Start transmission
 542:	5c 9a       	sbi	0x0b, 4	; 11
}
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	08 95       	ret

0000054c <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
 56e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 572:	88 23       	and	r24, r24
 574:	89 f0       	breq	.+34     	; 0x598 <__vector_1+0x4c>
	{
		// Read MiRF status
		mirf_CSN_lo;                     // Pull down chip select
 576:	28 98       	cbi	0x05, 0	; 5
		status = spi_exchange_char(NOP); // Read status register
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	0e 94 40 03 	call	0x680	; 0x680 <spi_exchange_char>
		mirf_CSN_hi;                     // Pull up chip select
 57e:	28 9a       	sbi	0x05, 0	; 5
 580:	85 e8       	ldi	r24, 0x85	; 133
 582:	8a 95       	dec	r24
 584:	f1 f7       	brne	.-4      	; 0x582 <__vector_1+0x36>
 586:	00 00       	nop
		_delay_us(25);
		mirf_CE_lo;                             // Deactivate transreceiver
 588:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP;                             // Power up in receiving mode
 58a:	6b e4       	ldi	r22, 0x4B	; 75
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config_register>
		mirf_CE_hi;                             // Listening for pakets
 592:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;                                // Set to receiving mode
 594:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <println_int_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_int_0(int number)
{
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	c0 54       	subi	r28, 0x40	; 64
 5cc:	d1 09       	sbc	r29, r1
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	8c 01       	movw	r16, r24
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	89 f1       	breq	.+98     	; 0x640 <println_int_0+0x86>
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	30 e0       	ldi	r19, 0x00	; 0
	{
		temp = temp /10;
 5e2:	ea e0       	ldi	r30, 0x0A	; 10
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <println_int_0+0x30>
		num_digit++;
 5e8:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 5ea:	bf 01       	movw	r22, r30
 5ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divmodhi4>
 5f0:	cb 01       	movw	r24, r22
		num_digit++;
 5f2:	79 01       	movw	r14, r18
 5f4:	4f ef       	ldi	r20, 0xFF	; 255
 5f6:	e4 1a       	sub	r14, r20
 5f8:	f4 0a       	sbc	r15, r20
void println_int_0(int number)
{
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	a9 f7       	brne	.-22     	; 0x5e8 <println_int_0+0x2e>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 5fe:	11 23       	and	r17, r17
 600:	24 f4       	brge	.+8      	; 0x60a <println_int_0+0x50>
 602:	79 01       	movw	r14, r18
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	e8 0e       	add	r14, r24
 608:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 60a:	4a e0       	ldi	r20, 0x0A	; 10
 60c:	be 01       	movw	r22, r28
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	c8 01       	movw	r24, r16
 614:	0e 94 a1 03 	call	0x742	; 0x742 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 618:	1e 14       	cp	r1, r14
 61a:	1f 04       	cpc	r1, r15
 61c:	6c f4       	brge	.+26     	; 0x638 <println_int_0+0x7e>
 61e:	8e 01       	movw	r16, r28
 620:	0f 5f       	subi	r16, 0xFF	; 255
 622:	1f 4f       	sbci	r17, 0xFF	; 255
 624:	e0 0e       	add	r14, r16
 626:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 628:	f8 01       	movw	r30, r16
 62a:	81 91       	ld	r24, Z+
 62c:	8f 01       	movw	r16, r30
 62e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 632:	0e 15       	cp	r16, r14
 634:	1f 05       	cpc	r17, r15
 636:	c1 f7       	brne	.-16     	; 0x628 <println_int_0+0x6e>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 638:	8a e0       	ldi	r24, 0x0A	; 10
 63a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <usart0_send_char>
}
 63e:	07 c0       	rjmp	.+14     	; 0x64e <println_int_0+0x94>
 640:	4a e0       	ldi	r20, 0x0A	; 10
 642:	be 01       	movw	r22, r28
 644:	6f 5f       	subi	r22, 0xFF	; 255
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	0e 94 a1 03 	call	0x742	; 0x742 <__itoa_ncheck>
 64c:	f5 cf       	rjmp	.-22     	; 0x638 <println_int_0+0x7e>
 64e:	c0 5c       	subi	r28, 0xC0	; 192
 650:	df 4f       	sbci	r29, 0xFF	; 255
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	08 95       	ret

0000066a <spi_master_initialize>:
}
void spi_slave_initialize()
{
	DDRB |= (1 << MISO);	// MSIO_0 is output
	
	SPCR = (1 << SPE); // Enable SPI, Slave
 66a:	84 b1       	in	r24, 0x04	; 4
 66c:	87 60       	ori	r24, 0x07	; 7
 66e:	84 b9       	out	0x04, r24	; 4
 670:	81 e5       	ldi	r24, 0x51	; 81
 672:	8c bd       	out	0x2c, r24	; 44
 674:	08 95       	ret

00000676 <spi_send_char>:
}

void spi_send_char(char data)
{
	SPDR = data;
 676:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)))
 678:	0d b4       	in	r0, 0x2d	; 45
 67a:	07 fe       	sbrs	r0, 7
 67c:	fd cf       	rjmp	.-6      	; 0x678 <spi_send_char+0x2>
	; // wait for transmission to complete
}
 67e:	08 95       	ret

00000680 <spi_exchange_char>:


char spi_exchange_char(char data)
{
	SPDR = data; // start transmission
 680:	8e bd       	out	0x2e, r24	; 46
	
	while (!(SPSR & (1 << SPIF)))
 682:	0d b4       	in	r0, 0x2d	; 45
 684:	07 fe       	sbrs	r0, 7
 686:	fd cf       	rjmp	.-6      	; 0x682 <spi_exchange_char+0x2>
	; // wait for transmission complete
	
	return SPDR;
 688:	8e b5       	in	r24, 0x2e	; 46
}
 68a:	08 95       	ret

0000068c <spi_send_bytes>:

void spi_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 68c:	66 23       	and	r22, r22
 68e:	61 f0       	breq	.+24     	; 0x6a8 <spi_send_bytes+0x1c>
 690:	fc 01       	movw	r30, r24
 692:	9c 01       	movw	r18, r24
 694:	26 0f       	add	r18, r22
 696:	31 1d       	adc	r19, r1
	{
		SPDR = pdata[i]; // start transmission
 698:	91 91       	ld	r25, Z+
 69a:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1 << SPIF)))
 69c:	0d b4       	in	r0, 0x2d	; 45
 69e:	07 fe       	sbrs	r0, 7
 6a0:	fd cf       	rjmp	.-6      	; 0x69c <spi_send_bytes+0x10>

void spi_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 6a2:	e2 17       	cp	r30, r18
 6a4:	f3 07       	cpc	r31, r19
 6a6:	c1 f7       	brne	.-16     	; 0x698 <spi_send_bytes+0xc>
 6a8:	08 95       	ret

000006aa <spi_exchange_bytes>:

void spi_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 6aa:	44 23       	and	r20, r20
 6ac:	81 f0       	breq	.+32     	; 0x6ce <spi_exchange_bytes+0x24>
 6ae:	fc 01       	movw	r30, r24
 6b0:	a6 2f       	mov	r26, r22
 6b2:	b7 2f       	mov	r27, r23
 6b4:	9c 01       	movw	r18, r24
 6b6:	24 0f       	add	r18, r20
 6b8:	31 1d       	adc	r19, r1
	{
		SPDR = mosi[i]; // start transmission
 6ba:	91 91       	ld	r25, Z+
 6bc:	9e bd       	out	0x2e, r25	; 46

		while (!(SPSR & (1 << SPIF)))
 6be:	0d b4       	in	r0, 0x2d	; 45
 6c0:	07 fe       	sbrs	r0, 7
 6c2:	fd cf       	rjmp	.-6      	; 0x6be <spi_exchange_bytes+0x14>
		; // wait for transmission complete
		miso[i] = SPDR;
 6c4:	9e b5       	in	r25, 0x2e	; 46
 6c6:	9d 93       	st	X+, r25

void spi_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 6c8:	e2 17       	cp	r30, r18
 6ca:	f3 07       	cpc	r31, r19
 6cc:	b1 f7       	brne	.-20     	; 0x6ba <spi_exchange_bytes+0x10>
 6ce:	08 95       	ret

000006d0 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC0))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 6d0:	e0 ec       	ldi	r30, 0xC0	; 192
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	90 81       	ld	r25, Z
 6d6:	95 ff       	sbrs	r25, 5
 6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <usart0_send_char+0x4>
 6da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6de:	08 95       	ret

000006e0 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); // enable USART1
 6e0:	98 e1       	ldi	r25, 0x18	; 24
 6e2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);               // 8-bit character size
 6e6:	96 e0       	ldi	r25, 0x06	; 6
 6e8:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 6ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 6f0:	08 95       	ret

000006f2 <__divmodhi4>:
 6f2:	97 fb       	bst	r25, 7
 6f4:	07 2e       	mov	r0, r23
 6f6:	16 f4       	brtc	.+4      	; 0x6fc <__divmodhi4+0xa>
 6f8:	00 94       	com	r0
 6fa:	07 d0       	rcall	.+14     	; 0x70a <__divmodhi4_neg1>
 6fc:	77 fd       	sbrc	r23, 7
 6fe:	09 d0       	rcall	.+18     	; 0x712 <__divmodhi4_neg2>
 700:	0e 94 8d 03 	call	0x71a	; 0x71a <__udivmodhi4>
 704:	07 fc       	sbrc	r0, 7
 706:	05 d0       	rcall	.+10     	; 0x712 <__divmodhi4_neg2>
 708:	3e f4       	brtc	.+14     	; 0x718 <__divmodhi4_exit>

0000070a <__divmodhi4_neg1>:
 70a:	90 95       	com	r25
 70c:	81 95       	neg	r24
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	08 95       	ret

00000712 <__divmodhi4_neg2>:
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255

00000718 <__divmodhi4_exit>:
 718:	08 95       	ret

0000071a <__udivmodhi4>:
 71a:	aa 1b       	sub	r26, r26
 71c:	bb 1b       	sub	r27, r27
 71e:	51 e1       	ldi	r21, 0x11	; 17
 720:	07 c0       	rjmp	.+14     	; 0x730 <__udivmodhi4_ep>

00000722 <__udivmodhi4_loop>:
 722:	aa 1f       	adc	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	a6 17       	cp	r26, r22
 728:	b7 07       	cpc	r27, r23
 72a:	10 f0       	brcs	.+4      	; 0x730 <__udivmodhi4_ep>
 72c:	a6 1b       	sub	r26, r22
 72e:	b7 0b       	sbc	r27, r23

00000730 <__udivmodhi4_ep>:
 730:	88 1f       	adc	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	5a 95       	dec	r21
 736:	a9 f7       	brne	.-22     	; 0x722 <__udivmodhi4_loop>
 738:	80 95       	com	r24
 73a:	90 95       	com	r25
 73c:	bc 01       	movw	r22, r24
 73e:	cd 01       	movw	r24, r26
 740:	08 95       	ret

00000742 <__itoa_ncheck>:
 742:	bb 27       	eor	r27, r27
 744:	4a 30       	cpi	r20, 0x0A	; 10
 746:	31 f4       	brne	.+12     	; 0x754 <__itoa_ncheck+0x12>
 748:	99 23       	and	r25, r25
 74a:	22 f4       	brpl	.+8      	; 0x754 <__itoa_ncheck+0x12>
 74c:	bd e2       	ldi	r27, 0x2D	; 45
 74e:	90 95       	com	r25
 750:	81 95       	neg	r24
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__utoa_common>

00000758 <__utoa_ncheck>:
 758:	bb 27       	eor	r27, r27

0000075a <__utoa_common>:
 75a:	fb 01       	movw	r30, r22
 75c:	55 27       	eor	r21, r21
 75e:	aa 27       	eor	r26, r26
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	aa 1f       	adc	r26, r26
 766:	a4 17       	cp	r26, r20
 768:	10 f0       	brcs	.+4      	; 0x76e <__utoa_common+0x14>
 76a:	a4 1b       	sub	r26, r20
 76c:	83 95       	inc	r24
 76e:	50 51       	subi	r21, 0x10	; 16
 770:	b9 f7       	brne	.-18     	; 0x760 <__utoa_common+0x6>
 772:	a0 5d       	subi	r26, 0xD0	; 208
 774:	aa 33       	cpi	r26, 0x3A	; 58
 776:	08 f0       	brcs	.+2      	; 0x77a <__utoa_common+0x20>
 778:	a9 5d       	subi	r26, 0xD9	; 217
 77a:	a1 93       	st	Z+, r26
 77c:	00 97       	sbiw	r24, 0x00	; 0
 77e:	79 f7       	brne	.-34     	; 0x75e <__utoa_common+0x4>
 780:	b1 11       	cpse	r27, r1
 782:	b1 93       	st	Z+, r27
 784:	11 92       	st	Z+, r1
 786:	cb 01       	movw	r24, r22
 788:	0c 94 c6 03 	jmp	0x78c	; 0x78c <strrev>

0000078c <strrev>:
 78c:	dc 01       	movw	r26, r24
 78e:	fc 01       	movw	r30, r24
 790:	67 2f       	mov	r22, r23
 792:	71 91       	ld	r23, Z+
 794:	77 23       	and	r23, r23
 796:	e1 f7       	brne	.-8      	; 0x790 <strrev+0x4>
 798:	32 97       	sbiw	r30, 0x02	; 2
 79a:	04 c0       	rjmp	.+8      	; 0x7a4 <strrev+0x18>
 79c:	7c 91       	ld	r23, X
 79e:	6d 93       	st	X+, r22
 7a0:	70 83       	st	Z, r23
 7a2:	62 91       	ld	r22, -Z
 7a4:	ae 17       	cp	r26, r30
 7a6:	bf 07       	cpc	r27, r31
 7a8:	c8 f3       	brcs	.-14     	; 0x79c <strrev+0x10>
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
