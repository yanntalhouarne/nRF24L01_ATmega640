
nRF24L01_ATmega640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  000006c6  0000075a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800232  00800232  0000078c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c86  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001453  00000000  00000000  000036a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155d  00000000  00000000  00004af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00006058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000942  00000000  00000000  00006620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e47  00000000  00000000  00006f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00008da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_4>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e6 ec       	ldi	r30, 0xC6	; 198
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 33       	cpi	r26, 0x32	; 50
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a2 e3       	ldi	r26, 0x32	; 50
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a5 33       	cpi	r26, 0x35	; 53
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 c9 01 	call	0x392	; 0x392 <main>
 11a:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setup_ports>:


void setup_ports()
{
	// LEDs
	DDRL |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED5) | (1<<LED6); // set LEDs as outputs
 122:	ea e0       	ldi	r30, 0x0A	; 10
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	80 81       	ld	r24, Z
 128:	8f 63       	ori	r24, 0x3F	; 63
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <LED_check>:

}

void LED_check()
{
 12e:	23 e0       	ldi	r18, 0x03	; 3
 130:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	
	for (i=0; i<3; i++)
	{
		LED1_ON;
 132:	eb e0       	ldi	r30, 0x0B	; 11
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LED_check+0x12>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LED_check+0x18>
 146:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
		LED2_ON;
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9c e9       	ldi	r25, 0x9C	; 156
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LED_check+0x2a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LED_check+0x30>
 15e:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24
		LED3_ON;
 166:	80 81       	ld	r24, Z
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	80 83       	st	Z, r24
 16c:	8f e3       	ldi	r24, 0x3F	; 63
 16e:	9c e9       	ldi	r25, 0x9C	; 156
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LED_check+0x42>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LED_check+0x48>
 176:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
 178:	80 81       	ld	r24, Z
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	80 83       	st	Z, r24
		LED4_ON;
 17e:	80 81       	ld	r24, Z
 180:	88 60       	ori	r24, 0x08	; 8
 182:	80 83       	st	Z, r24
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LED_check+0x5a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LED_check+0x60>
 18e:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
 190:	80 81       	ld	r24, Z
 192:	87 7f       	andi	r24, 0xF7	; 247
 194:	80 83       	st	Z, r24
		LED5_ON;
 196:	80 81       	ld	r24, Z
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	80 83       	st	Z, r24
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	9c e9       	ldi	r25, 0x9C	; 156
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LED_check+0x72>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LED_check+0x78>
 1a6:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 7e       	andi	r24, 0xEF	; 239
 1ac:	80 83       	st	Z, r24
		LED6_ON;
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24
 1b4:	8f e3       	ldi	r24, 0x3F	; 63
 1b6:	9c e9       	ldi	r25, 0x9C	; 156
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LED_check+0x8a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LED_check+0x90>
 1be:	00 00       	nop
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LED_check+0x96>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LED_check+0x9c>
 1ca:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		
		_delay_ms(LED_check_DELAY);
		LED6_OFF;
 1cc:	80 81       	ld	r24, Z
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	80 83       	st	Z, r24
		LED5_ON;
 1d2:	80 81       	ld	r24, Z
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	80 83       	st	Z, r24
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	9c e9       	ldi	r25, 0x9C	; 156
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LED_check+0xae>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LED_check+0xb4>
 1e2:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 7e       	andi	r24, 0xEF	; 239
 1e8:	80 83       	st	Z, r24
		LED4_ON;
 1ea:	80 81       	ld	r24, Z
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	80 83       	st	Z, r24
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LED_check+0xc6>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LED_check+0xcc>
 1fa:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
 1fc:	80 81       	ld	r24, Z
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	80 83       	st	Z, r24
		LED3_ON;
 202:	80 81       	ld	r24, Z
 204:	84 60       	ori	r24, 0x04	; 4
 206:	80 83       	st	Z, r24
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	9c e9       	ldi	r25, 0x9C	; 156
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LED_check+0xde>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LED_check+0xe4>
 212:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
 214:	80 81       	ld	r24, Z
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	80 83       	st	Z, r24
		LED2_ON;
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	80 83       	st	Z, r24
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LED_check+0xf6>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LED_check+0xfc>
 22a:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
 22c:	80 81       	ld	r24, Z
 22e:	8d 7f       	andi	r24, 0xFD	; 253
 230:	80 83       	st	Z, r24
		LED1_ON;
 232:	80 81       	ld	r24, Z
 234:	81 60       	ori	r24, 0x01	; 1
 236:	80 83       	st	Z, r24
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9c e9       	ldi	r25, 0x9C	; 156
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LED_check+0x10e>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LED_check+0x114>
 242:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
 244:	80 81       	ld	r24, Z
 246:	8e 7f       	andi	r24, 0xFE	; 254
 248:	80 83       	st	Z, r24
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	31 09       	sbc	r19, r1

void LED_check()
{
	int i;
	
	for (i=0; i<3; i++)
 24e:	09 f0       	breq	.+2      	; 0x252 <LED_check+0x124>
 250:	72 cf       	rjmp	.-284    	; 0x136 <LED_check+0x8>
		LED1_ON;
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
	}

 252:	08 95       	ret

00000254 <data_to_port>:


void data_to_port(char data)
{
	// DB0
	if ( (data >> 0)&(0x01) )
 254:	80 ff       	sbrs	r24, 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <data_to_port+0x8>
		PORTC |= (1<<DB0);
 258:	43 9a       	sbi	0x08, 3	; 8
 25a:	01 c0       	rjmp	.+2      	; 0x25e <data_to_port+0xa>
	else
		PORTC &= ~(1<<DB0);
 25c:	43 98       	cbi	0x08, 3	; 8
	// DB1
	if ( (data >> 1)&(0x01) )
 25e:	81 ff       	sbrs	r24, 1
 260:	02 c0       	rjmp	.+4      	; 0x266 <data_to_port+0x12>
		PORTC |= (1<<DB1);
 262:	44 9a       	sbi	0x08, 4	; 8
 264:	01 c0       	rjmp	.+2      	; 0x268 <data_to_port+0x14>
	else
		PORTC &= ~(1<<DB1);
 266:	44 98       	cbi	0x08, 4	; 8
	// DB2
	if ( (data >> 2)&(0x01) )
 268:	82 ff       	sbrs	r24, 2
 26a:	02 c0       	rjmp	.+4      	; 0x270 <data_to_port+0x1c>
		PORTC |= (1<<DB2);
 26c:	45 9a       	sbi	0x08, 5	; 8
 26e:	01 c0       	rjmp	.+2      	; 0x272 <data_to_port+0x1e>
	else
		PORTC &= ~(1<<DB2);
 270:	45 98       	cbi	0x08, 5	; 8
	// DB3
	if ( (data >> 3)&(0x01) )
 272:	83 ff       	sbrs	r24, 3
 274:	02 c0       	rjmp	.+4      	; 0x27a <data_to_port+0x26>
		PORTC |= (1<<DB3);
 276:	46 9a       	sbi	0x08, 6	; 8
 278:	01 c0       	rjmp	.+2      	; 0x27c <data_to_port+0x28>
	else
		PORTC &= ~(1<<DB3);
 27a:	46 98       	cbi	0x08, 6	; 8
	// DB4
	if ( (data >> 4)&(0x01) )
 27c:	84 ff       	sbrs	r24, 4
 27e:	02 c0       	rjmp	.+4      	; 0x284 <data_to_port+0x30>
		PORTC |= (1<<DB4);
 280:	47 9a       	sbi	0x08, 7	; 8
 282:	01 c0       	rjmp	.+2      	; 0x286 <data_to_port+0x32>
	else
		PORTC &= ~(1<<DB4);
 284:	47 98       	cbi	0x08, 7	; 8
	// DB5
	if ( (data >> 5)&(0x01) )
 286:	85 ff       	sbrs	r24, 5
 288:	02 c0       	rjmp	.+4      	; 0x28e <data_to_port+0x3a>
		PORTG |= (1<<DB5);
 28a:	a0 9a       	sbi	0x14, 0	; 20
 28c:	01 c0       	rjmp	.+2      	; 0x290 <data_to_port+0x3c>
	else
		PORTG &= ~(1<<DB5);
 28e:	a0 98       	cbi	0x14, 0	; 20
	// DB6
	if ( (data >> 6)&(0x01) )
 290:	86 ff       	sbrs	r24, 6
 292:	02 c0       	rjmp	.+4      	; 0x298 <data_to_port+0x44>
		PORTG |= (1<<DB6);
 294:	a1 9a       	sbi	0x14, 1	; 20
 296:	01 c0       	rjmp	.+2      	; 0x29a <data_to_port+0x46>
	else
		PORTG &= ~(1<<DB6);
 298:	a1 98       	cbi	0x14, 1	; 20
	// DB7
	if ( (data >> 7)&(0x01) )
 29a:	88 23       	and	r24, r24
 29c:	14 f4       	brge	.+4      	; 0x2a2 <data_to_port+0x4e>
		PORTD |= (1<<DB7);
 29e:	5f 9a       	sbi	0x0b, 7	; 11
 2a0:	08 95       	ret
	else
		PORTD &= ~(1<<DB7);
 2a2:	5f 98       	cbi	0x0b, 7	; 11
 2a4:	08 95       	ret

000002a6 <lcd_send_cmd>:
	
}

void lcd_send_cmd(char cmd)
{
	data_to_port(cmd); //put data on PORT
 2a6:	0e 94 2a 01 	call	0x254	; 0x254 <data_to_port>
	
	RS_LOW; // send command
 2aa:	42 98       	cbi	0x08, 2	; 8
	RW_LOW; // write operation
 2ac:	41 98       	cbi	0x08, 1	; 8
		
	// enable pulse
	E_HIGH;
 2ae:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e8       	ldi	r24, 0x8F	; 143
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_send_cmd+0xe>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_send_cmd+0x14>
 2ba:	00 00       	nop
		_delay_us(100); 
	E_LOW;
 2bc:	40 98       	cbi	0x08, 0	; 8
 2be:	08 95       	ret

000002c0 <setup_lcd>:
#include <avr/io.h>

void setup_lcd()
{	
	// PORT setup
	DDRC |= (1<<RS)  | (1<<RW)  | (1<<E) | (1<<DB0) | (1<<DB1) | (1<<DB2) | (1<<DB3) | (1<<DB4) ;
 2c0:	87 b1       	in	r24, 0x07	; 7
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	87 b9       	out	0x07, r24	; 7
	DDRG |= (1<<DB5) | (1<<DB6);
 2c6:	83 b3       	in	r24, 0x13	; 19
 2c8:	83 60       	ori	r24, 0x03	; 3
 2ca:	83 bb       	out	0x13, r24	; 19
	DDRD |= (1<<DB7);
 2cc:	57 9a       	sbi	0x0a, 7	; 10
	
	
	E_LOW;
 2ce:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	83 ed       	ldi	r24, 0xD3	; 211
 2d4:	90 e3       	ldi	r25, 0x30	; 48
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <setup_lcd+0x16>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <setup_lcd+0x20>
 2e0:	00 00       	nop
		_delay_ms(1000); // at least 40 ms
	
	lcd_send_cmd(WAKE_UP);
 2e2:	80 e3       	ldi	r24, 0x30	; 48
 2e4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
 2e8:	8f e3       	ldi	r24, 0x3F	; 63
 2ea:	9c e9       	ldi	r25, 0x9C	; 156
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <setup_lcd+0x2c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <setup_lcd+0x32>
 2f2:	00 00       	nop
	_delay_ms(10); // at least 5 ms
		
	lcd_send_cmd(MODE_8_BIT | MODE_2_LINE); // 8-bit mode, 2-line mode
 2f4:	88 e3       	ldi	r24, 0x38	; 56
 2f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(0x10); // set cursor
 2fa:	80 e1       	ldi	r24, 0x10	; 16
 2fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(DISPLAY_ON); // turn on entire display, cursor is on
 300:	8c e0       	ldi	r24, 0x0C	; 12
 302:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(CLEAR_DISPLAY);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	lcd_send_cmd(INCREMENT_CURSOR); // cursor automatically increments after a character is written
 30c:	86 e0       	ldi	r24, 0x06	; 6
 30e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
 312:	08 95       	ret

00000314 <lcd_send_data>:
	E_LOW;
}

void lcd_send_data(char data)
{
	data_to_port(data); //put data on PORT
 314:	0e 94 2a 01 	call	0x254	; 0x254 <data_to_port>

	RS_HIGH; // send data
 318:	42 9a       	sbi	0x08, 2	; 8
	RW_LOW; // write operation
 31a:	41 98       	cbi	0x08, 1	; 8

	// enable pulse
	E_HIGH;
 31c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	8f e8       	ldi	r24, 0x8F	; 143
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <lcd_send_data+0xe>
 326:	00 c0       	rjmp	.+0      	; 0x328 <lcd_send_data+0x14>
 328:	00 00       	nop
		_delay_us(100);
	E_LOW;	
 32a:	40 98       	cbi	0x08, 0	; 8
 32c:	08 95       	ret

0000032e <lcd_set_cursor>:
	else
		PORTD &= ~(1<<DB7);
}

void lcd_set_cursor(char row, char column)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	00 d0       	rcall	.+0      	; 0x334 <lcd_set_cursor+0x6>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
	unsigned char address[2] = {LINE_1, LINE_2};
 338:	90 e8       	ldi	r25, 0x80	; 128
 33a:	99 83       	std	Y+1, r25	; 0x01
 33c:	90 ec       	ldi	r25, 0xC0	; 192
 33e:	9a 83       	std	Y+2, r25	; 0x02
	lcd_send_cmd(address[row-1] + (column-1));
 340:	fe 01       	movw	r30, r28
 342:	e8 0f       	add	r30, r24
 344:	f1 1d       	adc	r31, r1
 346:	61 50       	subi	r22, 0x01	; 1
 348:	80 81       	ld	r24, Z
 34a:	86 0f       	add	r24, r22
 34c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
 350:	8f e8       	ldi	r24, 0x8F	; 143
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_set_cursor+0x26>
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_set_cursor+0x2c>
 35a:	00 00       	nop
	_delay_us(100);
}
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <lcd_print>:

void lcd_print(char *str)
{
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	fc 01       	movw	r30, r24
	unsigned char i =0;
	while(str[i] != 0)
 36e:	80 81       	ld	r24, Z
 370:	88 23       	and	r24, r24
 372:	59 f0       	breq	.+22     	; 0x38a <lcd_print+0x24>
 374:	8f 01       	movw	r16, r30
 376:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_send_data(str[i]);
 378:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_send_data>
		i++;
 37c:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i =0;
	while(str[i] != 0)
 37e:	f8 01       	movw	r30, r16
 380:	ec 0f       	add	r30, r28
 382:	f1 1d       	adc	r31, r1
 384:	80 81       	ld	r24, Z
 386:	81 11       	cpse	r24, r1
 388:	f7 cf       	rjmp	.-18     	; 0x378 <lcd_print+0x12>
	{
		lcd_send_data(str[i]);
		i++;
	}
}
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <main>:
int8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
int8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

int main(void)
{
	setup_ports();
 392:	0e 94 91 00 	call	0x122	; 0x122 <setup_ports>
	setup_lcd();
 396:	0e 94 60 01 	call	0x2c0	; 0x2c0 <setup_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	8f e3       	ldi	r24, 0x3F	; 63
 39c:	9c e9       	ldi	r25, 0x9C	; 156
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0xc>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x12>
 3a4:	00 00       	nop
	_delay_ms(10);
	lcd_set_cursor(1,1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_set_cursor>
	lcd_print("Initializing...");
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	92 e0       	ldi	r25, 0x02	; 2
 3b2:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_print>
 3b6:	8f ed       	ldi	r24, 0xDF	; 223
 3b8:	9e e2       	ldi	r25, 0x2E	; 46
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x28>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x2e>
 3c0:	00 00       	nop
	_delay_ms(3);
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <setup_usart0>
	mirf_init();
 3c8:	0e 94 29 02 	call	0x452	; 0x452 <mirf_init>
 3cc:	9f ef       	ldi	r25, 0xFF	; 255
 3ce:	27 ea       	ldi	r18, 0xA7	; 167
 3d0:	81 e6       	ldi	r24, 0x61	; 97
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	20 40       	sbci	r18, 0x00	; 0
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x40>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x4a>
 3dc:	00 00       	nop
	_delay_ms(2000);	
	lcd_send_cmd(CLEAR_DISPLAY);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_cmd>
	
	LED_check();
 3e4:	0e 94 97 00 	call	0x12e	; 0x12e <LED_check>
	
	sei(); // enable global interrupts
 3e8:	78 94       	sei
	
	//mirf_config_register(EN_AA, (1<<0));
	//	mirf_config_register(EN_AA, (1<<1));
	
	mirf_config();
 3ea:	0e 94 4b 02 	call	0x496	; 0x496 <mirf_config>
	
	 /* Set the device addresses */
	mirf_set_TADDR(tx_address);
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	92 e0       	ldi	r25, 0x02	; 2
 3f2:	0e 94 a7 02 	call	0x54e	; 0x54e <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	0e 94 9f 02 	call	0x53e	; 0x53e <mirf_set_RADDR>
 3fe:	8f e3       	ldi	r24, 0x3F	; 63
 400:	9c e9       	ldi	r25, 0x9C	; 156
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
	
	
	_delay_ms(10);
	
	print_0("System initialized...;");
 40a:	8a e1       	ldi	r24, 0x1A	; 26
 40c:	92 e0       	ldi	r25, 0x02	; 2
 40e:	0e 94 0d 03 	call	0x61a	; 0x61a <print_0>
		//lcd_send_cmd(CLEAR_DISPLAY);
		//_delay_ms(3);
		//lcd_set_cursor(1,1);
		//lcd_print("Waiting for data");
		//_delay_ms(3);
		TOGGLE_LED1;
 412:	cb e0       	ldi	r28, 0x0B	; 11
 414:	d1 e0       	ldi	r29, 0x01	; 1
 416:	11 e0       	ldi	r17, 0x01	; 1
 418:	88 81       	ld	r24, Y
 41a:	81 27       	eor	r24, r17
 41c:	88 83       	st	Y, r24
		//lcd_send_cmd(CLEAR_DISPLAY);
		//lcd_set_cursor(1,1);
		//lcd_print("waiting on RX");
		// wait for data
		//while(!mirf_data_ready());
		mirf_send(buffer, mirf_PAYLOAD);
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	82 e3       	ldi	r24, 0x32	; 50
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	0e 94 b7 02 	call	0x56e	; 0x56e <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	95 e3       	ldi	r25, 0x35	; 53
 42a:	9a 95       	dec	r25
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42e:	00 00       	nop
		_delay_us(10);
		while (!mirf_data_sent());
 430:	0e 94 37 02 	call	0x46e	; 0x46e <mirf_data_sent>
 434:	88 23       	and	r24, r24
 436:	e1 f3       	breq	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		TOGGLE_LED1
 438:	88 81       	ld	r24, Y
 43a:	81 27       	eor	r24, r17
 43c:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	86 e7       	ldi	r24, 0x76	; 118
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	e3 cf       	rjmp	.-58     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

00000452 <mirf_init>:
{
	mirf_CSN_lo;
	spi_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi_exchange_bytes(value, value, len);
	mirf_CSN_hi;
}
 452:	54 9a       	sbi	0x0a, 4	; 10
 454:	20 9a       	sbi	0x04, 0	; 4
 456:	5c 98       	cbi	0x0b, 4	; 11
 458:	28 9a       	sbi	0x05, 0	; 5
 45a:	ea 98       	cbi	0x1d, 2	; 29
 45c:	e9 e6       	ldi	r30, 0x69	; 105
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	80 62       	ori	r24, 0x20	; 32
 464:	80 83       	st	Z, r24
 466:	ea 9a       	sbi	0x1d, 2	; 29
 468:	0e 94 30 03 	call	0x660	; 0x660 <spi_master_initialize>
 46c:	08 95       	ret

0000046e <mirf_data_sent>:
 46e:	28 98       	cbi	0x05, 0	; 5
 470:	8f ef       	ldi	r24, 0xFF	; 255
 472:	0e 94 3b 03 	call	0x676	; 0x676 <spi_exchange_char>
 476:	28 9a       	sbi	0x05, 0	; 5
 478:	80 72       	andi	r24, 0x20	; 32
 47a:	08 95       	ret

0000047c <mirf_config_register>:
 47c:	cf 93       	push	r28
 47e:	c6 2f       	mov	r28, r22
 480:	28 98       	cbi	0x05, 0	; 5
 482:	8f 71       	andi	r24, 0x1F	; 31
 484:	80 62       	ori	r24, 0x20	; 32
 486:	0e 94 36 03 	call	0x66c	; 0x66c <spi_send_char>
 48a:	8c 2f       	mov	r24, r28
 48c:	0e 94 36 03 	call	0x66c	; 0x66c <spi_send_char>
 490:	28 9a       	sbi	0x05, 0	; 5
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <mirf_config>:
 496:	6c e6       	ldi	r22, 0x6C	; 108
 498:	85 e0       	ldi	r24, 0x05	; 5
 49a:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 49e:	6f ef       	ldi	r22, 0xFF	; 255
 4a0:	84 e0       	ldi	r24, 0x04	; 4
 4a2:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	81 e1       	ldi	r24, 0x11	; 17
 4aa:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	82 e1       	ldi	r24, 0x12	; 18
 4b2:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	83 e1       	ldi	r24, 0x13	; 19
 4ba:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	84 e1       	ldi	r24, 0x14	; 20
 4c2:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	85 e1       	ldi	r24, 0x15	; 21
 4ca:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	86 e1       	ldi	r24, 0x16	; 22
 4d2:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4d6:	66 e2       	ldi	r22, 0x26	; 38
 4d8:	86 e0       	ldi	r24, 0x06	; 6
 4da:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4e6:	63 e0       	ldi	r22, 0x03	; 3
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4ee:	6f e4       	ldi	r22, 0x4F	; 79
 4f0:	84 e0       	ldi	r24, 0x04	; 4
 4f2:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 4f6:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <PTX>
 4fa:	60 e7       	ldi	r22, 0x70	; 112
 4fc:	87 e0       	ldi	r24, 0x07	; 7
 4fe:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 502:	28 98       	cbi	0x05, 0	; 5
 504:	81 ee       	ldi	r24, 0xE1	; 225
 506:	0e 94 36 03 	call	0x66c	; 0x66c <spi_send_char>
 50a:	28 9a       	sbi	0x05, 0	; 5
 50c:	6b e5       	ldi	r22, 0x5B	; 91
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
 514:	5c 9a       	sbi	0x0b, 4	; 11
 516:	08 95       	ret

00000518 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	eb 01       	movw	r28, r22
 520:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 522:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_REGISTER | (REGISTER_MASK & reg));
 524:	8f 71       	andi	r24, 0x1F	; 31
 526:	80 62       	ori	r24, 0x20	; 32
 528:	0e 94 36 03 	call	0x66c	; 0x66c <spi_send_char>
	spi_send_bytes(value, len);
 52c:	61 2f       	mov	r22, r17
 52e:	ce 01       	movw	r24, r28
 530:	0e 94 41 03 	call	0x682	; 0x682 <spi_send_bytes>
	mirf_CSN_hi;
 534:	28 9a       	sbi	0x05, 0	; 5
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	08 95       	ret

0000053e <mirf_set_RADDR>:
}

void mirf_set_RADDR(int8_t *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 53e:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
 540:	45 e0       	ldi	r20, 0x05	; 5
 542:	bc 01       	movw	r22, r24
 544:	8b e0       	ldi	r24, 0x0B	; 11
 546:	0e 94 8c 02 	call	0x518	; 0x518 <mirf_write_register>
	mirf_CE_hi;
 54a:	5c 9a       	sbi	0x0b, 4	; 11
 54c:	08 95       	ret

0000054e <mirf_set_TADDR>:
}

void mirf_set_TADDR(int8_t *adr)
// Sets the transmitting address
{
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
	mirf_write_register(RX_ADDR_P0, adr, 5);
 554:	45 e0       	ldi	r20, 0x05	; 5
 556:	bc 01       	movw	r22, r24
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	0e 94 8c 02 	call	0x518	; 0x518 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 55e:	45 e0       	ldi	r20, 0x05	; 5
 560:	be 01       	movw	r22, r28
 562:	80 e1       	ldi	r24, 0x10	; 16
 564:	0e 94 8c 02 	call	0x518	; 0x518 <mirf_write_register>
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	ec 01       	movw	r28, r24
 576:	16 2f       	mov	r17, r22
	//while (PTX)
	//{

	//} // Wait until last packet is send

	mirf_CE_lo;
 578:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1; // Set to transmitter mode
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 580:	6a e5       	ldi	r22, 0x5A	; 90
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>

	mirf_CSN_lo;             // Pull down chip select
 588:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 58a:	81 ee       	ldi	r24, 0xE1	; 225
 58c:	0e 94 36 03 	call	0x66c	; 0x66c <spi_send_char>
	mirf_CSN_hi;             // Pull up chip select
 590:	28 9a       	sbi	0x05, 0	; 5
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 592:	60 e7       	ldi	r22, 0x70	; 112
 594:	87 e0       	ldi	r24, 0x07	; 7
 596:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 59a:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 59c:	80 ea       	ldi	r24, 0xA0	; 160
 59e:	0e 94 36 03 	call	0x66c	; 0x66c <spi_send_char>
	spi_send_bytes(value, len);  // Write payload
 5a2:	61 2f       	mov	r22, r17
 5a4:	ce 01       	movw	r24, r28
 5a6:	0e 94 41 03 	call	0x682	; 0x682 <spi_send_bytes>
	mirf_CSN_hi;                 // Pull up chip select
 5aa:	28 9a       	sbi	0x05, 0	; 5

	mirf_CE_hi; // Start transmission
 5ac:	5c 9a       	sbi	0x0b, 4	; 11
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	08 95       	ret

000005b6 <__vector_4>:

ISR(INT3_vect) // Interrupt handler
{
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	//char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
 5d8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <PTX>
 5dc:	88 23       	and	r24, r24
 5de:	61 f0       	breq	.+24     	; 0x5f8 <__vector_4+0x42>
	{
		print_0('H');
 5e0:	88 e4       	ldi	r24, 0x48	; 72
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 0d 03 	call	0x61a	; 0x61a <print_0>
		// Read MiRF status
		//mirf_CSN_lo;                     // Pull down chip select
		//status = spi_exchange_char(NOP); // Read status register
		//mirf_CSN_hi;                     // Pull up chip select
		//_delay_us(25);
		mirf_CE_lo;                             // Deactivate transreceiver
 5e8:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP;                             // Power up in receiving mode
 5ea:	6b e5       	ldi	r22, 0x5B	; 91
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 3e 02 	call	0x47c	; 0x47c <mirf_config_register>
		mirf_CE_hi;                             // Listening for packets
 5f2:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;                                // Set to receiving mode                              // Set to receiving mode
 5f4:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <PTX>
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	bf 91       	pop	r27
 5fe:	af 91       	pop	r26
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	7f 91       	pop	r23
 606:	6f 91       	pop	r22
 608:	5f 91       	pop	r21
 60a:	4f 91       	pop	r20
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <print_0>:
	usart0_send_char(character);
}


void print_0(char char_array[]) // prints to usart
{
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	fc 01       	movw	r30, r24
	for (int i=0; i<200 ; i++)
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
 624:	80 81       	ld	r24, Z
 626:	8a 30       	cpi	r24, 0x0A	; 10
 628:	b1 f0       	breq	.+44     	; 0x656 <print_0+0x3c>
 62a:	8b 33       	cpi	r24, 0x3B	; 59
 62c:	61 f4       	brne	.+24     	; 0x646 <print_0+0x2c>
 62e:	13 c0       	rjmp	.+38     	; 0x656 <print_0+0x3c>
 630:	89 91       	ld	r24, Y+
 632:	8a 30       	cpi	r24, 0x0A	; 10
 634:	81 f0       	breq	.+32     	; 0x656 <print_0+0x3c>
 636:	8b 33       	cpi	r24, 0x3B	; 59
 638:	71 f0       	breq	.+28     	; 0x656 <print_0+0x3c>
			break;
		usart0_send_char(char_array[i]);
 63a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <usart0_send_char>
}


void print_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 63e:	0c 17       	cp	r16, r28
 640:	1d 07       	cpc	r17, r29
 642:	b1 f7       	brne	.-20     	; 0x630 <print_0+0x16>
 644:	08 c0       	rjmp	.+16     	; 0x656 <print_0+0x3c>
 646:	8f 01       	movw	r16, r30
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 648:	0e 94 50 03 	call	0x6a0	; 0x6a0 <usart0_send_char>
 64c:	e8 01       	movw	r28, r16
 64e:	21 96       	adiw	r28, 0x01	; 1
 650:	08 53       	subi	r16, 0x38	; 56
 652:	1f 4f       	sbci	r17, 0xFF	; 255
 654:	ed cf       	rjmp	.-38     	; 0x630 <print_0+0x16>
	}
}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	08 95       	ret

00000660 <spi_master_initialize>:
}
void spi_slave_initialize()
{
	DDRB |= (1 << MISO);	// MSIO_0 is output
	
	SPCR = (1 << SPE); // Enable SPI, Slave
 660:	84 b1       	in	r24, 0x04	; 4
 662:	87 60       	ori	r24, 0x07	; 7
 664:	84 b9       	out	0x04, r24	; 4
 666:	81 e5       	ldi	r24, 0x51	; 81
 668:	8c bd       	out	0x2c, r24	; 44
 66a:	08 95       	ret

0000066c <spi_send_char>:
}

void spi_send_char(char data)
{
	SPDR = data;
 66c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)))
 66e:	0d b4       	in	r0, 0x2d	; 45
 670:	07 fe       	sbrs	r0, 7
 672:	fd cf       	rjmp	.-6      	; 0x66e <spi_send_char+0x2>
	; // wait for transmission to complete
}
 674:	08 95       	ret

00000676 <spi_exchange_char>:


char spi_exchange_char(char data)
{
	SPDR = data; // start transmission
 676:	8e bd       	out	0x2e, r24	; 46
	
	while (!(SPSR & (1 << SPIF)))
 678:	0d b4       	in	r0, 0x2d	; 45
 67a:	07 fe       	sbrs	r0, 7
 67c:	fd cf       	rjmp	.-6      	; 0x678 <spi_exchange_char+0x2>
	; // wait for transmission complete
	
	return SPDR;
 67e:	8e b5       	in	r24, 0x2e	; 46
}
 680:	08 95       	ret

00000682 <spi_send_bytes>:

void spi_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 682:	66 23       	and	r22, r22
 684:	61 f0       	breq	.+24     	; 0x69e <spi_send_bytes+0x1c>
 686:	fc 01       	movw	r30, r24
 688:	9c 01       	movw	r18, r24
 68a:	26 0f       	add	r18, r22
 68c:	31 1d       	adc	r19, r1
	{
		SPDR = pdata[i]; // start transmission
 68e:	91 91       	ld	r25, Z+
 690:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1 << SPIF)))
 692:	0d b4       	in	r0, 0x2d	; 45
 694:	07 fe       	sbrs	r0, 7
 696:	fd cf       	rjmp	.-6      	; 0x692 <spi_send_bytes+0x10>

void spi_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 698:	e2 17       	cp	r30, r18
 69a:	f3 07       	cpc	r31, r19
 69c:	c1 f7       	brne	.-16     	; 0x68e <spi_send_bytes+0xc>
 69e:	08 95       	ret

000006a0 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC0))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 6a0:	e0 ec       	ldi	r30, 0xC0	; 192
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	90 81       	ld	r25, Z
 6a6:	95 ff       	sbrs	r25, 5
 6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <usart0_send_char+0x4>
 6aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6ae:	08 95       	ret

000006b0 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); // enable USART1
 6b0:	98 e1       	ldi	r25, 0x18	; 24
 6b2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);               // 8-bit character size
 6b6:	96 e0       	ldi	r25, 0x06	; 6
 6b8:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 6bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 6c0:	08 95       	ret

000006c2 <_exit>:
 6c2:	f8 94       	cli

000006c4 <__stop_program>:
 6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <__stop_program>
