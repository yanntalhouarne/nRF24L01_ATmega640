
nRF24L01_ATmega640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800200  0000144c  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000144c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080029a  0080029a  0000157a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002da2  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001482  00000000  00000000  000045ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c1  00000000  00000000  00005a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00007230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a0d  00000000  00000000  000076e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001336  00000000  00000000  000080f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000942b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__vector_4>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_32>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ec e4       	ldi	r30, 0x4C	; 76
      f8:	f4 e1       	ldi	r31, 0x14	; 20
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	aa 39       	cpi	r26, 0x9A	; 154
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	aa e9       	ldi	r26, 0x9A	; 154
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a3 3b       	cpi	r26, 0xB3	; 179
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 a6 03 	call	0x74c	; 0x74c <main>
     11a:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setup_adc>:
     122:	ec e7       	ldi	r30, 0x7C	; 124
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	80 64       	ori	r24, 0x40	; 64
     12a:	80 83       	st	Z, r24
     12c:	ea e7       	ldi	r30, 0x7A	; 122
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	87 68       	ori	r24, 0x87	; 135
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <analog_read>:
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	90 81       	ld	r25, Z
     13e:	98 7f       	andi	r25, 0xF8	; 248
     140:	87 70       	andi	r24, 0x07	; 7
     142:	89 2b       	or	r24, r25
     144:	80 83       	st	Z, r24
     146:	ea e7       	ldi	r30, 0x7A	; 122
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	80 64       	ori	r24, 0x40	; 64
     14e:	80 83       	st	Z, r24
     150:	80 81       	ld	r24, Z
     152:	84 ff       	sbrs	r24, 4
     154:	fd cf       	rjmp	.-6      	; 0x150 <analog_read+0x18>
     156:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	98 2f       	mov	r25, r24
     162:	88 27       	eor	r24, r24
     164:	88 27       	eor	r24, r24
     166:	9f 72       	andi	r25, 0x2F	; 47
     168:	82 2b       	or	r24, r18
     16a:	08 95       	ret

0000016c <analog_get_average>:
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	e6 2e       	mov	r14, r22
     17c:	f1 2c       	mov	r15, r1
     17e:	1e 14       	cp	r1, r14
     180:	1f 04       	cpc	r1, r15
     182:	ac f4       	brge	.+42     	; 0x1ae <analog_get_average+0x42>
     184:	d8 2e       	mov	r13, r24
     186:	c0 e0       	ldi	r28, 0x00	; 0
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	8d 2d       	mov	r24, r13
     190:	0e 94 9c 00 	call	0x138	; 0x138 <analog_read>
     194:	08 0f       	add	r16, r24
     196:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     198:	8f e9       	ldi	r24, 0x9F	; 159
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <analog_get_average+0x30>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <analog_get_average+0x36>
     1a2:	00 00       	nop
     1a4:	21 96       	adiw	r28, 0x01	; 1
     1a6:	ce 15       	cp	r28, r14
     1a8:	df 05       	cpc	r29, r15
     1aa:	89 f7       	brne	.-30     	; 0x18e <analog_get_average+0x22>
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <analog_get_average+0x46>
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	c8 01       	movw	r24, r16
     1b4:	b7 01       	movw	r22, r14
     1b6:	0e 94 c7 09 	call	0x138e	; 0x138e <__divmodhi4>
     1ba:	cb 01       	movw	r24, r22
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	08 95       	ret

000001cc <setup_ports>:
     1cc:	ea e0       	ldi	r30, 0x0A	; 10
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z
     1d2:	8f 63       	ori	r24, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	08 95       	ret

000001d8 <LED_check>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	eb e0       	ldi	r30, 0x0B	; 11
     1de:	f1 e0       	ldi	r31, 0x01	; 1
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	80 83       	st	Z, r24
     1e6:	8f e3       	ldi	r24, 0x3F	; 63
     1e8:	9c e9       	ldi	r25, 0x9C	; 156
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LED_check+0x12>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LED_check+0x18>
     1f0:	00 00       	nop
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	80 83       	st	Z, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	82 60       	ori	r24, 0x02	; 2
     1fc:	80 83       	st	Z, r24
     1fe:	8f e3       	ldi	r24, 0x3F	; 63
     200:	9c e9       	ldi	r25, 0x9C	; 156
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <LED_check+0x2a>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LED_check+0x30>
     208:	00 00       	nop
     20a:	80 81       	ld	r24, Z
     20c:	8d 7f       	andi	r24, 0xFD	; 253
     20e:	80 83       	st	Z, r24
     210:	80 81       	ld	r24, Z
     212:	84 60       	ori	r24, 0x04	; 4
     214:	80 83       	st	Z, r24
     216:	8f e3       	ldi	r24, 0x3F	; 63
     218:	9c e9       	ldi	r25, 0x9C	; 156
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <LED_check+0x42>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <LED_check+0x48>
     220:	00 00       	nop
     222:	80 81       	ld	r24, Z
     224:	8b 7f       	andi	r24, 0xFB	; 251
     226:	80 83       	st	Z, r24
     228:	80 81       	ld	r24, Z
     22a:	88 60       	ori	r24, 0x08	; 8
     22c:	80 83       	st	Z, r24
     22e:	8f e3       	ldi	r24, 0x3F	; 63
     230:	9c e9       	ldi	r25, 0x9C	; 156
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LED_check+0x5a>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LED_check+0x60>
     238:	00 00       	nop
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	80 83       	st	Z, r24
     240:	80 81       	ld	r24, Z
     242:	80 61       	ori	r24, 0x10	; 16
     244:	80 83       	st	Z, r24
     246:	8f e3       	ldi	r24, 0x3F	; 63
     248:	9c e9       	ldi	r25, 0x9C	; 156
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <LED_check+0x72>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <LED_check+0x78>
     250:	00 00       	nop
     252:	80 81       	ld	r24, Z
     254:	8f 7e       	andi	r24, 0xEF	; 239
     256:	80 83       	st	Z, r24
     258:	80 81       	ld	r24, Z
     25a:	80 62       	ori	r24, 0x20	; 32
     25c:	80 83       	st	Z, r24
     25e:	8f e3       	ldi	r24, 0x3F	; 63
     260:	9c e9       	ldi	r25, 0x9C	; 156
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LED_check+0x8a>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LED_check+0x90>
     268:	00 00       	nop
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	9c e9       	ldi	r25, 0x9C	; 156
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <LED_check+0x96>
     272:	00 c0       	rjmp	.+0      	; 0x274 <LED_check+0x9c>
     274:	00 00       	nop
     276:	80 81       	ld	r24, Z
     278:	8f 7d       	andi	r24, 0xDF	; 223
     27a:	80 83       	st	Z, r24
     27c:	80 81       	ld	r24, Z
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	80 83       	st	Z, r24
     282:	8f e3       	ldi	r24, 0x3F	; 63
     284:	9c e9       	ldi	r25, 0x9C	; 156
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LED_check+0xae>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LED_check+0xb4>
     28c:	00 00       	nop
     28e:	80 81       	ld	r24, Z
     290:	8f 7e       	andi	r24, 0xEF	; 239
     292:	80 83       	st	Z, r24
     294:	80 81       	ld	r24, Z
     296:	88 60       	ori	r24, 0x08	; 8
     298:	80 83       	st	Z, r24
     29a:	8f e3       	ldi	r24, 0x3F	; 63
     29c:	9c e9       	ldi	r25, 0x9C	; 156
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <LED_check+0xc6>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LED_check+0xcc>
     2a4:	00 00       	nop
     2a6:	80 81       	ld	r24, Z
     2a8:	87 7f       	andi	r24, 0xF7	; 247
     2aa:	80 83       	st	Z, r24
     2ac:	80 81       	ld	r24, Z
     2ae:	84 60       	ori	r24, 0x04	; 4
     2b0:	80 83       	st	Z, r24
     2b2:	8f e3       	ldi	r24, 0x3F	; 63
     2b4:	9c e9       	ldi	r25, 0x9C	; 156
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LED_check+0xde>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LED_check+0xe4>
     2bc:	00 00       	nop
     2be:	80 81       	ld	r24, Z
     2c0:	8b 7f       	andi	r24, 0xFB	; 251
     2c2:	80 83       	st	Z, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	82 60       	ori	r24, 0x02	; 2
     2c8:	80 83       	st	Z, r24
     2ca:	8f e3       	ldi	r24, 0x3F	; 63
     2cc:	9c e9       	ldi	r25, 0x9C	; 156
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <LED_check+0xf6>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LED_check+0xfc>
     2d4:	00 00       	nop
     2d6:	80 81       	ld	r24, Z
     2d8:	8d 7f       	andi	r24, 0xFD	; 253
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	80 83       	st	Z, r24
     2e2:	8f e3       	ldi	r24, 0x3F	; 63
     2e4:	9c e9       	ldi	r25, 0x9C	; 156
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LED_check+0x10e>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LED_check+0x114>
     2ec:	00 00       	nop
     2ee:	80 81       	ld	r24, Z
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	80 83       	st	Z, r24
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	31 09       	sbc	r19, r1
     2f8:	09 f0       	breq	.+2      	; 0x2fc <LED_check+0x124>
     2fa:	72 cf       	rjmp	.-284    	; 0x1e0 <LED_check+0x8>
     2fc:	08 95       	ret

000002fe <data_to_port>:
     2fe:	80 ff       	sbrs	r24, 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <data_to_port+0x8>
     302:	43 9a       	sbi	0x08, 3	; 8
     304:	01 c0       	rjmp	.+2      	; 0x308 <data_to_port+0xa>
     306:	43 98       	cbi	0x08, 3	; 8
     308:	81 ff       	sbrs	r24, 1
     30a:	02 c0       	rjmp	.+4      	; 0x310 <data_to_port+0x12>
     30c:	44 9a       	sbi	0x08, 4	; 8
     30e:	01 c0       	rjmp	.+2      	; 0x312 <data_to_port+0x14>
     310:	44 98       	cbi	0x08, 4	; 8
     312:	82 ff       	sbrs	r24, 2
     314:	02 c0       	rjmp	.+4      	; 0x31a <data_to_port+0x1c>
     316:	45 9a       	sbi	0x08, 5	; 8
     318:	01 c0       	rjmp	.+2      	; 0x31c <data_to_port+0x1e>
     31a:	45 98       	cbi	0x08, 5	; 8
     31c:	83 ff       	sbrs	r24, 3
     31e:	02 c0       	rjmp	.+4      	; 0x324 <data_to_port+0x26>
     320:	46 9a       	sbi	0x08, 6	; 8
     322:	01 c0       	rjmp	.+2      	; 0x326 <data_to_port+0x28>
     324:	46 98       	cbi	0x08, 6	; 8
     326:	84 ff       	sbrs	r24, 4
     328:	02 c0       	rjmp	.+4      	; 0x32e <data_to_port+0x30>
     32a:	47 9a       	sbi	0x08, 7	; 8
     32c:	01 c0       	rjmp	.+2      	; 0x330 <data_to_port+0x32>
     32e:	47 98       	cbi	0x08, 7	; 8
     330:	85 ff       	sbrs	r24, 5
     332:	02 c0       	rjmp	.+4      	; 0x338 <data_to_port+0x3a>
     334:	a0 9a       	sbi	0x14, 0	; 20
     336:	01 c0       	rjmp	.+2      	; 0x33a <data_to_port+0x3c>
     338:	a0 98       	cbi	0x14, 0	; 20
     33a:	86 ff       	sbrs	r24, 6
     33c:	02 c0       	rjmp	.+4      	; 0x342 <data_to_port+0x44>
     33e:	a1 9a       	sbi	0x14, 1	; 20
     340:	01 c0       	rjmp	.+2      	; 0x344 <data_to_port+0x46>
     342:	a1 98       	cbi	0x14, 1	; 20
     344:	88 23       	and	r24, r24
     346:	14 f4       	brge	.+4      	; 0x34c <data_to_port+0x4e>
     348:	5f 9a       	sbi	0x0b, 7	; 11
     34a:	08 95       	ret
     34c:	5f 98       	cbi	0x0b, 7	; 11
     34e:	08 95       	ret

00000350 <lcd_send_cmd>:
     350:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>
     354:	42 98       	cbi	0x08, 2	; 8
     356:	41 98       	cbi	0x08, 1	; 8
     358:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35a:	8f e8       	ldi	r24, 0x8F	; 143
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <lcd_send_cmd+0xe>
     362:	00 c0       	rjmp	.+0      	; 0x364 <lcd_send_cmd+0x14>
     364:	00 00       	nop
     366:	40 98       	cbi	0x08, 0	; 8
     368:	08 95       	ret

0000036a <setup_lcd>:
     36a:	87 b1       	in	r24, 0x07	; 7
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	87 b9       	out	0x07, r24	; 7
     370:	83 b3       	in	r24, 0x13	; 19
     372:	83 60       	ori	r24, 0x03	; 3
     374:	83 bb       	out	0x13, r24	; 19
     376:	57 9a       	sbi	0x0a, 7	; 10
     378:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	2f ef       	ldi	r18, 0xFF	; 255
     37c:	83 ed       	ldi	r24, 0xD3	; 211
     37e:	90 e3       	ldi	r25, 0x30	; 48
     380:	21 50       	subi	r18, 0x01	; 1
     382:	80 40       	sbci	r24, 0x00	; 0
     384:	90 40       	sbci	r25, 0x00	; 0
     386:	e1 f7       	brne	.-8      	; 0x380 <setup_lcd+0x16>
     388:	00 c0       	rjmp	.+0      	; 0x38a <setup_lcd+0x20>
     38a:	00 00       	nop
     38c:	80 e3       	ldi	r24, 0x30	; 48
     38e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     392:	8f e3       	ldi	r24, 0x3F	; 63
     394:	9c e9       	ldi	r25, 0x9C	; 156
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <setup_lcd+0x2c>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <setup_lcd+0x32>
     39c:	00 00       	nop
     39e:	88 e3       	ldi	r24, 0x38	; 56
     3a0:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3aa:	8c e0       	ldi	r24, 0x0C	; 12
     3ac:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3bc:	08 95       	ret

000003be <lcd_send_data>:
     3be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>
     3c2:	42 9a       	sbi	0x08, 2	; 8
     3c4:	41 98       	cbi	0x08, 1	; 8
     3c6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c8:	8f e8       	ldi	r24, 0x8F	; 143
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_send_data+0xe>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_send_data+0x14>
     3d2:	00 00       	nop
     3d4:	40 98       	cbi	0x08, 0	; 8
     3d6:	08 95       	ret

000003d8 <lcd_set_cursor>:
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	00 d0       	rcall	.+0      	; 0x3de <lcd_set_cursor+0x6>
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	90 e8       	ldi	r25, 0x80	; 128
     3e4:	99 83       	std	Y+1, r25	; 0x01
     3e6:	90 ec       	ldi	r25, 0xC0	; 192
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	fe 01       	movw	r30, r28
     3ec:	e8 0f       	add	r30, r24
     3ee:	f1 1d       	adc	r31, r1
     3f0:	61 50       	subi	r22, 0x01	; 1
     3f2:	80 81       	ld	r24, Z
     3f4:	86 0f       	add	r24, r22
     3f6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3fa:	8f e8       	ldi	r24, 0x8F	; 143
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_set_cursor+0x26>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	00 00       	nop
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <lcd_print>:
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	fc 01       	movw	r30, r24
     418:	80 81       	ld	r24, Z
     41a:	88 23       	and	r24, r24
     41c:	59 f0       	breq	.+22     	; 0x434 <lcd_print+0x24>
     41e:	8f 01       	movw	r16, r30
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_send_data>
     426:	cf 5f       	subi	r28, 0xFF	; 255
     428:	f8 01       	movw	r30, r16
     42a:	ec 0f       	add	r30, r28
     42c:	f1 1d       	adc	r31, r1
     42e:	80 81       	ld	r24, Z
     430:	81 11       	cpse	r24, r1
     432:	f7 cf       	rjmp	.-18     	; 0x422 <lcd_print+0x12>
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <lcd_print_int>:
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	60 97       	sbiw	r28, 0x10	; 16
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	fc 01       	movw	r30, r24
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	41 f0       	breq	.+16     	; 0x466 <lcd_print_int+0x2a>
     456:	2a e0       	ldi	r18, 0x0A	; 10
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	b9 01       	movw	r22, r18
     45c:	0e 94 c7 09 	call	0x138e	; 0x138e <__divmodhi4>
     460:	cb 01       	movw	r24, r22
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	d1 f7       	brne	.-12     	; 0x45a <lcd_print_int+0x1e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     466:	4a e0       	ldi	r20, 0x0A	; 10
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	cf 01       	movw	r24, r30
     470:	0e 94 ef 09 	call	0x13de	; 0x13de <__itoa_ncheck>
     474:	ce 01       	movw	r24, r28
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     47c:	60 96       	adiw	r28, 0x10	; 16
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <js_mtr_scaling>:

}

void reset_TMR1()
{
	TCNT1 = 0;
     48e:	bc 01       	movw	r22, r24
     490:	99 0f       	add	r25, r25
     492:	88 0b       	sbc	r24, r24
     494:	99 0b       	sbc	r25, r25
     496:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatsisf>
     49a:	2c ee       	ldi	r18, 0xEC	; 236
     49c:	31 e5       	ldi	r19, 0x51	; 81
     49e:	48 eb       	ldi	r20, 0xB8	; 184
     4a0:	5f e3       	ldi	r21, 0x3F	; 63
     4a2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 ee       	ldi	r20, 0xE0	; 224
     4ac:	50 e4       	ldi	r21, 0x40	; 64
     4ae:	0e 94 89 07 	call	0xf12	; 0xf12 <__subsf3>
     4b2:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixsfsi>
     4b6:	ab 01       	movw	r20, r22
     4b8:	9b 01       	movw	r18, r22
     4ba:	2d 5c       	subi	r18, 0xCD	; 205
     4bc:	31 40       	sbci	r19, 0x01	; 1
     4be:	29 35       	cpi	r18, 0x59	; 89
     4c0:	31 05       	cpc	r19, r1
     4c2:	c8 f0       	brcs	.+50     	; 0x4f6 <js_mtr_scaling+0x68>
     4c4:	67 32       	cpi	r22, 0x27	; 39
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	72 07       	cpc	r23, r18
     4ca:	2c f0       	brlt	.+10     	; 0x4d6 <js_mtr_scaling+0x48>
     4cc:	4d 5e       	subi	r20, 0xED	; 237
     4ce:	51 40       	sbci	r21, 0x01	; 1
     4d0:	44 0f       	add	r20, r20
     4d2:	55 1f       	adc	r21, r21
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <js_mtr_scaling+0x6c>
     4d6:	6c 3c       	cpi	r22, 0xCC	; 204
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	72 07       	cpc	r23, r18
     4dc:	74 f4       	brge	.+28     	; 0x4fa <js_mtr_scaling+0x6c>
     4de:	2d ee       	ldi	r18, 0xED	; 237
     4e0:	31 e0       	ldi	r19, 0x01	; 1
     4e2:	c9 01       	movw	r24, r18
     4e4:	86 1b       	sub	r24, r22
     4e6:	97 0b       	sbc	r25, r23
     4e8:	91 95       	neg	r25
     4ea:	81 95       	neg	r24
     4ec:	91 09       	sbc	r25, r1
     4ee:	ac 01       	movw	r20, r24
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <js_mtr_scaling+0x6c>
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	ca 01       	movw	r24, r20
     4fc:	49 3e       	cpi	r20, 0xE9	; 233
     4fe:	53 40       	sbci	r21, 0x03	; 3
     500:	14 f0       	brlt	.+4      	; 0x506 <js_mtr_scaling+0x78>
     502:	88 ee       	ldi	r24, 0xE8	; 232
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	08 95       	ret

00000508 <js_srv_scaling>:
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	2c ee       	ldi	r18, 0xEC	; 236
     512:	31 e5       	ldi	r19, 0x51	; 81
     514:	48 eb       	ldi	r20, 0xB8	; 184
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 ee       	ldi	r20, 0xE0	; 224
     522:	50 e4       	ldi	r21, 0x40	; 64
     524:	0e 94 89 07 	call	0xf12	; 0xf12 <__subsf3>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e8       	ldi	r19, 0x80	; 128
     530:	49 e0       	ldi	r20, 0x09	; 9
     532:	54 e4       	ldi	r21, 0x44	; 68
     534:	0e 94 f6 07 	call	0xfec	; 0xfec <__cmpsf2>
     538:	88 23       	and	r24, r24
     53a:	5c f4       	brge	.+22     	; 0x552 <js_srv_scaling+0x4a>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	46 ee       	ldi	r20, 0xE6	; 230
     542:	53 e4       	ldi	r21, 0x43	; 67
     544:	c7 01       	movw	r24, r14
     546:	b6 01       	movw	r22, r12
     548:	0e 94 55 09 	call	0x12aa	; 0x12aa <__gesf2>
     54c:	18 16       	cp	r1, r24
     54e:	0c f4       	brge	.+2      	; 0x552 <js_srv_scaling+0x4a>
     550:	5c c0       	rjmp	.+184    	; 0x60a <js_srv_scaling+0x102>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e8       	ldi	r19, 0x80	; 128
     556:	49 e0       	ldi	r20, 0x09	; 9
     558:	54 e4       	ldi	r21, 0x44	; 68
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__gesf2>
     562:	18 16       	cp	r1, r24
     564:	ac f4       	brge	.+42     	; 0x590 <js_srv_scaling+0x88>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e8       	ldi	r19, 0x80	; 128
     56a:	46 ef       	ldi	r20, 0xF6	; 246
     56c:	53 e4       	ldi	r21, 0x43	; 67
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0e 94 89 07 	call	0xf12	; 0xf12 <__subsf3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	0e 94 8a 07 	call	0xf14	; 0xf14 <__addsf3>
     57e:	2a e9       	ldi	r18, 0x9A	; 154
     580:	39 e9       	ldi	r19, 0x99	; 153
     582:	41 eb       	ldi	r20, 0xB1	; 177
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divsf3>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	20 c0       	rjmp	.+64     	; 0x5d0 <js_srv_scaling+0xc8>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	46 ee       	ldi	r20, 0xE6	; 230
     596:	53 e4       	ldi	r21, 0x43	; 67
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 f6 07 	call	0xfec	; 0xfec <__cmpsf2>
     5a0:	88 23       	and	r24, r24
     5a2:	b4 f4       	brge	.+44     	; 0x5d0 <js_srv_scaling+0xc8>
     5a4:	a7 01       	movw	r20, r14
     5a6:	96 01       	movw	r18, r12
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e8       	ldi	r23, 0x80	; 128
     5ac:	86 ef       	ldi	r24, 0xF6	; 246
     5ae:	93 e4       	ldi	r25, 0x43	; 67
     5b0:	0e 94 89 07 	call	0xf12	; 0xf12 <__subsf3>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 ec       	ldi	r21, 0xC0	; 192
     5bc:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     5c0:	2a e9       	ldi	r18, 0x9A	; 154
     5c2:	39 e9       	ldi	r19, 0x99	; 153
     5c4:	41 eb       	ldi	r20, 0xB1	; 177
     5c6:	51 e4       	ldi	r21, 0x41	; 65
     5c8:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divsf3>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4a e7       	ldi	r20, 0x7A	; 122
     5d6:	54 e4       	ldi	r21, 0x44	; 68
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 55 09 	call	0x12aa	; 0x12aa <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	bc f0       	brlt	.+46     	; 0x612 <js_srv_scaling+0x10a>
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	4a e7       	ldi	r20, 0x7A	; 122
     5ea:	54 ec       	ldi	r21, 0xC4	; 196
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 f6 07 	call	0xfec	; 0xfec <__cmpsf2>
     5f4:	88 23       	and	r24, r24
     5f6:	ac f4       	brge	.+42     	; 0x622 <js_srv_scaling+0x11a>
     5f8:	0f 2e       	mov	r0, r31
     5fa:	c1 2c       	mov	r12, r1
     5fc:	d1 2c       	mov	r13, r1
     5fe:	fa e7       	ldi	r31, 0x7A	; 122
     600:	ef 2e       	mov	r14, r31
     602:	f4 ec       	ldi	r31, 0xC4	; 196
     604:	ff 2e       	mov	r15, r31
     606:	f0 2d       	mov	r31, r0
     608:	0c c0       	rjmp	.+24     	; 0x622 <js_srv_scaling+0x11a>
     60a:	c1 2c       	mov	r12, r1
     60c:	d1 2c       	mov	r13, r1
     60e:	76 01       	movw	r14, r12
     610:	08 c0       	rjmp	.+16     	; 0x622 <js_srv_scaling+0x11a>
     612:	0f 2e       	mov	r0, r31
     614:	c1 2c       	mov	r12, r1
     616:	d1 2c       	mov	r13, r1
     618:	fa e7       	ldi	r31, 0x7A	; 122
     61a:	ef 2e       	mov	r14, r31
     61c:	f4 e4       	ldi	r31, 0x44	; 68
     61e:	ff 2e       	mov	r15, r31
     620:	f0 2d       	mov	r31, r0
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixsfsi>
     62a:	cb 01       	movw	r24, r22
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <lcd_print_position>:
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     646:	67 e0       	ldi	r22, 0x07	; 7
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     64e:	87 e8       	ldi	r24, 0x87	; 135
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     656:	6a e0       	ldi	r22, 0x0A	; 10
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     65e:	87 e8       	ldi	r24, 0x87	; 135
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     66e:	8f e0       	ldi	r24, 0x0F	; 15
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     676:	67 e0       	ldi	r22, 0x07	; 7
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     67e:	87 e8       	ldi	r24, 0x87	; 135
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     686:	6a e0       	ldi	r22, 0x0A	; 10
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     68e:	87 e8       	ldi	r24, 0x87	; 135
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     696:	65 e0       	ldi	r22, 0x05	; 5
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     69e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <lat_deg>
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
     6a8:	68 e0       	ldi	r22, 0x08	; 8
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     6b0:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <lat_min>
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
     6ba:	6b e0       	ldi	r22, 0x0B	; 11
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     6c2:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <lat_sec>
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
     6cc:	88 e1       	ldi	r24, 0x18	; 24
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     6d4:	65 e0       	ldi	r22, 0x05	; 5
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     6dc:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <lon_deg>
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
     6e6:	68 e0       	ldi	r22, 0x08	; 8
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     6ee:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <lon_min>
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
     6f8:	6b e0       	ldi	r22, 0x0B	; 11
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
     700:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <lon_sec>
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
     70a:	84 e1       	ldi	r24, 0x14	; 20
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     712:	08 95       	ret

00000714 <setup_TMR1>:
     714:	e1 e8       	ldi	r30, 0x81	; 129
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	84 60       	ori	r24, 0x04	; 4
     71c:	80 83       	st	Z, r24
     71e:	08 95       	ret

00000720 <setup_TMR3>:
}

void setup_TMR3()
{
	TCCR3A |= (1<<COM3A1); // set OC2A on compare match
     720:	e0 e9       	ldi	r30, 0x90	; 144
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	80 68       	ori	r24, 0x80	; 128
     728:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32) | (1<<CS32) | (1<<CS30); // 1024 prescaler, CTC mode
     72a:	e1 e9       	ldi	r30, 0x91	; 145
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	8d 60       	ori	r24, 0x0D	; 13
     732:	80 83       	st	Z, r24
	OCR3A = 31248; 
     734:	80 e1       	ldi	r24, 0x10	; 16
     736:	9a e7       	ldi	r25, 0x7A	; 122
     738:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     73c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	TIMSK3 |= (1<<OCIE3A);
     740:	e1 e7       	ldi	r30, 0x71	; 113
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	82 60       	ori	r24, 0x02	; 2
     748:	80 83       	st	Z, r24
     74a:	08 95       	ret

0000074c <main>:
uint8_t BOAT_ON = 0;
uint8_t BOAT_OFF = 0;

int main(void)
{
	setup_ports();
     74c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setup_ports>
	setup_TMR1();
     750:	0e 94 8a 03 	call	0x714	; 0x714 <setup_TMR1>
	setup_TMR3();
     754:	0e 94 90 03 	call	0x720	; 0x720 <setup_TMR3>
	setup_lcd();
     758:	0e 94 b5 01 	call	0x36a	; 0x36a <setup_lcd>
	setup_adc();
     75c:	0e 94 91 00 	call	0x122	; 0x122 <setup_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     760:	8f e3       	ldi	r24, 0x3F	; 63
     762:	9c e9       	ldi	r25, 0x9C	; 156
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <main+0x18>
     768:	00 c0       	rjmp	.+0      	; 0x76a <main+0x1e>
     76a:	00 00       	nop
	_delay_ms(10);
	lcd_set_cursor(1,1);
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("Initializing...");
     774:	8a e1       	ldi	r24, 0x1A	; 26
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     77c:	ef ed       	ldi	r30, 0xDF	; 223
     77e:	fe e2       	ldi	r31, 0x2E	; 46
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <main+0x34>
     784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x3a>
     786:	00 00       	nop
	_delay_ms(3);
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	0e 94 80 07 	call	0xf00	; 0xf00 <setup_usart0>
	mirf_init();	
     78e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <mirf_init>
	lcd_send_cmd(CLEAR_DISPLAY);
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	
	LED_check();
     798:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LED_check>
	
	mirf_config();
     79c:	0e 94 9b 06 	call	0xd36	; 0xd36 <mirf_config>
	
	 /* Set the device addresses */
	mirf_set_TADDR(tx_address);
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 0b 07 	call	0xe16	; 0xe16 <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	0e 94 03 07 	call	0xe06	; 0xe06 <mirf_set_RADDR>
     7b0:	8f e3       	ldi	r24, 0x3F	; 63
     7b2:	9c e9       	ldi	r25, 0x9C	; 156
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <main+0x68>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <main+0x6e>
     7ba:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_send_cmd(CLEAR_DISPLAY);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     7c2:	ef ed       	ldi	r30, 0xDF	; 223
     7c4:	fe e2       	ldi	r31, 0x2E	; 46
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <main+0x7a>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <main+0x80>
     7cc:	00 00       	nop
	_delay_ms(3);
	lcd_set_cursor(1,1);
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("Initialization  ");
     7d6:	8a e2       	ldi	r24, 0x2A	; 42
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     7de:	ff ef       	ldi	r31, 0xFF	; 255
     7e0:	23 ed       	ldi	r18, 0xD3	; 211
     7e2:	80 e3       	ldi	r24, 0x30	; 48
     7e4:	f1 50       	subi	r31, 0x01	; 1
     7e6:	20 40       	sbci	r18, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <main+0x98>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0xa2>
     7ee:	00 00       	nop
	_delay_ms(1000);
	sei(); // enable global interrupts
     7f0:	78 94       	sei
	
	lcd_send_cmd(CLEAR_DISPLAY);
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     7f8:	ef ed       	ldi	r30, 0xDF	; 223
     7fa:	fe e2       	ldi	r31, 0x2E	; 46
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <main+0xb0>
     800:	00 c0       	rjmp	.+0      	; 0x802 <main+0xb6>
     802:	00 00       	nop
	_delay_ms(3);
	
	lcd_set_cursor(1,1);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("NO CONNECTION");
     80c:	8b e3       	ldi	r24, 0x3B	; 59
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>

		}
		
		loop_delay_counter++;
		
		TOGGLE_LED1;
     814:	0f 2e       	mov	r0, r31
     816:	fb e0       	ldi	r31, 0x0B	; 11
     818:	ef 2e       	mov	r14, r31
     81a:	ff 24       	eor	r15, r15
     81c:	f3 94       	inc	r15
     81e:	f0 2d       	mov	r31, r0

	
	
		if (loop_delay_counter == 50)
		{
			buffer[0] = 'A';
     820:	0f ea       	ldi	r16, 0xAF	; 175
     822:	12 e0       	ldi	r17, 0x02	; 2

}

void reset_TMR1()
{
	TCNT1 = 0;
     824:	c4 e8       	ldi	r28, 0x84	; 132
     826:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if (TCNT1 > 3000) // timeout of one second
				{
					comm_lost = 1;
					comm_lost_count++;
					TOGGLE_LED3;
     828:	68 94       	set
     82a:	99 24       	eor	r9, r9
     82c:	92 f8       	bld	r9, 2
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
			buffer[2] = srv_cmd;
     82e:	0f 2e       	mov	r0, r31
     830:	f7 ea       	ldi	r31, 0xA7	; 167
     832:	af 2e       	mov	r10, r31
     834:	f2 e0       	ldi	r31, 0x02	; 2
     836:	bf 2e       	mov	r11, r31
     838:	f0 2d       	mov	r31, r0
			old_srv_cmd = srv_cmd;
			srv_cmd = js_srv_scaling(srv_cmd);
			if ((srv_cmd < 5) && (srv_cmd > -5))
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
     83a:	0f 2e       	mov	r0, r31
     83c:	fd e2       	ldi	r31, 0x2D	; 45
     83e:	2f 2e       	mov	r2, r31
     840:	31 2c       	mov	r3, r1
     842:	f0 2d       	mov	r31, r0
			}
		}
		if (loop_delay_counter > 100)
		{
			loop_delay_counter = 0;
			buffer[0] = 'O';
     844:	0f 2e       	mov	r0, r31
     846:	ff e4       	ldi	r31, 0x4F	; 79
     848:	8f 2e       	mov	r8, r31
     84a:	f0 2d       	mov	r31, r0
	lcd_set_cursor(1,1);
	lcd_print("NO CONNECTION");

    while (1) 
    {
		if (comm_lost_count > 50)
     84c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <comm_lost_count>
     850:	83 33       	cpi	r24, 0x33	; 51
     852:	20 f0       	brcs	.+8      	; 0x85c <main+0x110>
		{
			comm_lost_count = 0;
     854:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <comm_lost_count>
			mirf_config();
     858:	0e 94 9b 06 	call	0xd36	; 0xd36 <mirf_config>
		}
		
		if (GPS_ON && (BOAT_OFF == 0))
     85c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <GPS_ON>
     860:	88 23       	and	r24, r24
     862:	31 f0       	breq	.+12     	; 0x870 <main+0x124>
     864:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     868:	81 11       	cpse	r24, r1
     86a:	1e c0       	rjmp	.+60     	; 0x8a8 <main+0x15c>
		{
			lcd_print_position();
     86c:	0e 94 1b 03 	call	0x636	; 0x636 <lcd_print_position>
		}
		
		if (BOAT_ON && (BOAT_OFF == 0))
     870:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <BOAT_ON>
     874:	88 23       	and	r24, r24
     876:	c1 f0       	breq	.+48     	; 0x8a8 <main+0x15c>
     878:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     87c:	81 11       	cpse	r24, r1
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <main+0x15c>
		{
			if (!GPS_ON)
     880:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <GPS_ON>
     884:	81 11       	cpse	r24, r1
     886:	10 c0       	rjmp	.+32     	; 0x8a8 <main+0x15c>
			{
				lcd_set_cursor(1,1);
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
				lcd_print("Connected,   ");
     890:	89 e4       	ldi	r24, 0x49	; 73
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
				lcd_set_cursor(2,1);
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
				lcd_print("Waiting on GPS  ");	
     8a0:	87 e5       	ldi	r24, 0x57	; 87
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
			}

		}
		
		loop_delay_counter++;
     8a8:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <loop_delay_counter>
     8ac:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <loop_delay_counter+0x1>
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <loop_delay_counter+0x1>
     8b6:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <loop_delay_counter>
		
		TOGGLE_LED1;
     8ba:	f7 01       	movw	r30, r14
     8bc:	90 81       	ld	r25, Z
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	89 27       	eor	r24, r25
     8c2:	80 83       	st	Z, r24


	
	
		if (loop_delay_counter == 50)
     8c4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <loop_delay_counter>
     8c8:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <loop_delay_counter+0x1>
     8cc:	c2 97       	sbiw	r24, 0x32	; 50
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <main+0x186>
     8d0:	62 c0       	rjmp	.+196    	; 0x996 <main+0x24a>
		{
			buffer[0] = 'A';
     8d2:	21 e4       	ldi	r18, 0x41	; 65
     8d4:	f8 01       	movw	r30, r16
     8d6:	20 83       	st	Z, r18
			mirf_send(buffer, mirf_PAYLOAD);
     8d8:	63 e0       	ldi	r22, 0x03	; 3
     8da:	c8 01       	movw	r24, r16
     8dc:	0e 94 1b 07 	call	0xe36	; 0xe36 <mirf_send>

}

void reset_TMR1()
{
	TCNT1 = 0;
     8e0:	19 82       	std	Y+1, r1	; 0x01
     8e2:	18 82       	st	Y, r1
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <main+0x1be>
			buffer[0] = 'A';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     8e6:	88 81       	ld	r24, Y
     8e8:	99 81       	ldd	r25, Y+1	; 0x01
     8ea:	89 3b       	cpi	r24, 0xB9	; 185
     8ec:	9b 40       	sbci	r25, 0x0B	; 11
     8ee:	68 f0       	brcs	.+26     	; 0x90a <main+0x1be>
				{
					comm_lost = 1;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <comm_lost>
					comm_lost_count++;
     8f6:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <comm_lost_count>
     8fa:	8f 5f       	subi	r24, 0xFF	; 255
     8fc:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <comm_lost_count>
					TOGGLE_LED3;
     900:	f7 01       	movw	r30, r14
     902:	80 81       	ld	r24, Z
     904:	89 25       	eor	r24, r9
     906:	80 83       	st	Z, r24
					break;
     908:	04 c0       	rjmp	.+8      	; 0x912 <main+0x1c6>
		if (loop_delay_counter == 50)
		{
			buffer[0] = 'A';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
     90a:	0e 94 76 06 	call	0xcec	; 0xcec <mirf_data_sent>
     90e:	88 23       	and	r24, r24
     910:	51 f3       	breq	.-44     	; 0x8e6 <main+0x19a>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     912:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <comm_lost>
     916:	81 11       	cpse	r24, r1
     918:	3c c0       	rjmp	.+120    	; 0x992 <main+0x246>
			{
				set_RX_MODE();
     91a:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_RX_MODE>

}

void reset_TMR1()
{
	TCNT1 = 0;
     91e:	19 82       	std	Y+1, r1	; 0x01
     920:	18 82       	st	Y, r1
     922:	14 c0       	rjmp	.+40     	; 0x94c <main+0x200>
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
				{
					if (TCNT1 > 3000) // timeout of one second
     924:	88 81       	ld	r24, Y
     926:	99 81       	ldd	r25, Y+1	; 0x01
     928:	89 3b       	cpi	r24, 0xB9	; 185
     92a:	9b 40       	sbci	r25, 0x0B	; 11
     92c:	78 f0       	brcs	.+30     	; 0x94c <main+0x200>
					{
						comm_lost = 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <comm_lost>
						comm_lost_count++;
     934:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <comm_lost_count>
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <comm_lost_count>
						TOGGLE_LED6;
     93e:	f7 01       	movw	r30, r14
     940:	80 81       	ld	r24, Z
     942:	f0 e2       	ldi	r31, 0x20	; 32
     944:	8f 27       	eor	r24, r31
     946:	f7 01       	movw	r30, r14
     948:	80 83       	st	Z, r24
						break;
     94a:	04 c0       	rjmp	.+8      	; 0x954 <main+0x208>
			}
			if (!comm_lost)
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
     94c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <mirf_data_ready>
     950:	88 23       	and	r24, r24
     952:	41 f3       	breq	.-48     	; 0x924 <main+0x1d8>
						comm_lost_count++;
						TOGGLE_LED6;
						break;
					}
				}
				if (!comm_lost)
     954:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <comm_lost>
     958:	81 11       	cpse	r24, r1
     95a:	16 c0       	rjmp	.+44     	; 0x988 <main+0x23c>
				{
					mirf_get_data(buffer); // get the data, put it in buffer
     95c:	c8 01       	movw	r24, r16
     95e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <mirf_get_data>
					if(buffer[0] != 0)
     962:	f8 01       	movw	r30, r16
     964:	80 81       	ld	r24, Z
     966:	88 23       	and	r24, r24
     968:	61 f0       	breq	.+24     	; 0x982 <main+0x236>
					{
						GPS_ON = 1;
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <GPS_ON>
						lat_deg = buffer[0];
     970:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <lat_deg>
						lat_min = buffer[1];
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <lat_min>
						lat_sec = buffer[2];
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <lat_sec>
     980:	0a c0       	rjmp	.+20     	; 0x996 <main+0x24a>
					}
					else
						GPS_ON = 0;
     982:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <GPS_ON>
     986:	07 c0       	rjmp	.+14     	; 0x996 <main+0x24a>
				}
				else
				{
					GPS_ON = 0;
     988:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <GPS_ON>
					comm_lost = 0;
     98c:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <comm_lost>
     990:	02 c0       	rjmp	.+4      	; 0x996 <main+0x24a>
				}
			}
			else
			{
				comm_lost = 0;
     992:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <comm_lost>
			}
		}
		if (loop_delay_counter > 100)
     996:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <loop_delay_counter>
     99a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <loop_delay_counter+0x1>
     99e:	85 36       	cpi	r24, 0x65	; 101
     9a0:	91 05       	cpc	r25, r1
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <main+0x25a>
     9a4:	5c c0       	rjmp	.+184    	; 0xa5e <main+0x312>
		{
			loop_delay_counter = 0;
     9a6:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <loop_delay_counter+0x1>
     9aa:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <loop_delay_counter>
			buffer[0] = 'O';
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 82       	st	Z, r8
			mirf_send(buffer, mirf_PAYLOAD);
     9b2:	63 e0       	ldi	r22, 0x03	; 3
     9b4:	c8 01       	movw	r24, r16
     9b6:	0e 94 1b 07 	call	0xe36	; 0xe36 <mirf_send>

}

void reset_TMR1()
{
	TCNT1 = 0;
     9ba:	19 82       	std	Y+1, r1	; 0x01
     9bc:	18 82       	st	Y, r1
     9be:	12 c0       	rjmp	.+36     	; 0x9e4 <main+0x298>
			buffer[0] = 'O';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     9c0:	88 81       	ld	r24, Y
     9c2:	99 81       	ldd	r25, Y+1	; 0x01
     9c4:	89 3b       	cpi	r24, 0xB9	; 185
     9c6:	9b 40       	sbci	r25, 0x0B	; 11
     9c8:	68 f0       	brcs	.+26     	; 0x9e4 <main+0x298>
				{
					comm_lost = 1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <comm_lost>
					comm_lost_count++;
     9d0:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <comm_lost_count>
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <comm_lost_count>
					TOGGLE_LED3;
     9da:	f7 01       	movw	r30, r14
     9dc:	80 81       	ld	r24, Z
     9de:	89 25       	eor	r24, r9
     9e0:	80 83       	st	Z, r24
					break;
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <main+0x2a0>
		{
			loop_delay_counter = 0;
			buffer[0] = 'O';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
     9e4:	0e 94 76 06 	call	0xcec	; 0xcec <mirf_data_sent>
     9e8:	88 23       	and	r24, r24
     9ea:	51 f3       	breq	.-44     	; 0x9c0 <main+0x274>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     9ec:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <comm_lost>
     9f0:	81 11       	cpse	r24, r1
     9f2:	32 c0       	rjmp	.+100    	; 0xa58 <main+0x30c>
			{
				set_RX_MODE();
     9f4:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_RX_MODE>

}

void reset_TMR1()
{
	TCNT1 = 0;
     9f8:	19 82       	std	Y+1, r1	; 0x01
     9fa:	18 82       	st	Y, r1
     9fc:	14 c0       	rjmp	.+40     	; 0xa26 <main+0x2da>
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
				{
					if (TCNT1 > 3000) // timeout of one second
     9fe:	88 81       	ld	r24, Y
     a00:	99 81       	ldd	r25, Y+1	; 0x01
     a02:	89 3b       	cpi	r24, 0xB9	; 185
     a04:	9b 40       	sbci	r25, 0x0B	; 11
     a06:	78 f0       	brcs	.+30     	; 0xa26 <main+0x2da>
					{
						comm_lost = 1;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <comm_lost>
						comm_lost_count++;
     a0e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <comm_lost_count>
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <comm_lost_count>
						TOGGLE_LED6;
     a18:	f7 01       	movw	r30, r14
     a1a:	80 81       	ld	r24, Z
     a1c:	f0 e2       	ldi	r31, 0x20	; 32
     a1e:	8f 27       	eor	r24, r31
     a20:	f7 01       	movw	r30, r14
     a22:	80 83       	st	Z, r24
						break;
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <main+0x2e2>
			}
			if (!comm_lost)
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
     a26:	0e 94 69 06 	call	0xcd2	; 0xcd2 <mirf_data_ready>
     a2a:	88 23       	and	r24, r24
     a2c:	41 f3       	breq	.-48     	; 0x9fe <main+0x2b2>
						comm_lost_count++;
						TOGGLE_LED6;
						break;
					}
				}
				if (!comm_lost)
     a2e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <comm_lost>
     a32:	81 11       	cpse	r24, r1
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <main+0x306>
				{
					mirf_get_data(buffer); // get the data, put it in buffer
     a36:	c8 01       	movw	r24, r16
     a38:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <mirf_get_data>
					lon_deg = buffer[0];
     a3c:	f8 01       	movw	r30, r16
     a3e:	80 81       	ld	r24, Z
     a40:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <lon_deg>
					lon_min = buffer[1];
     a44:	81 81       	ldd	r24, Z+1	; 0x01
     a46:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <lon_min>
					lon_sec = buffer[2];
     a4a:	82 81       	ldd	r24, Z+2	; 0x02
     a4c:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <lon_sec>
     a50:	cc c0       	rjmp	.+408    	; 0xbea <main+0x49e>
					
				}
				else
				comm_lost = 0;
     a52:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <comm_lost>
     a56:	c9 c0       	rjmp	.+402    	; 0xbea <main+0x49e>
			}
			else
			{
				comm_lost = 0;
     a58:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <comm_lost>
     a5c:	c6 c0       	rjmp	.+396    	; 0xbea <main+0x49e>
			}
		}
		else 
		{
			mtr_cmd = analog_get_average(JOYSTICK2_Y, 5);
     a5e:	65 e0       	ldi	r22, 0x05	; 5
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     a66:	6c 01       	movw	r12, r24
			mtr_cmd = .75 * mtr_cmd + .25 * old_mtr_cmd;
     a68:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <old_mtr_cmd>
     a6c:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <old_mtr_cmd+0x1>
     a70:	07 2e       	mov	r0, r23
     a72:	00 0c       	add	r0, r0
     a74:	88 0b       	sbc	r24, r24
     a76:	99 0b       	sbc	r25, r25
     a78:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatsisf>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e8       	ldi	r20, 0x80	; 128
     a82:	5e e3       	ldi	r21, 0x3E	; 62
     a84:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     a88:	2b 01       	movw	r4, r22
     a8a:	3c 01       	movw	r6, r24
     a8c:	b6 01       	movw	r22, r12
     a8e:	dd 0c       	add	r13, r13
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatsisf>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e4       	ldi	r20, 0x40	; 64
     a9e:	5f e3       	ldi	r21, 0x3F	; 63
     aa0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     aa4:	9b 01       	movw	r18, r22
     aa6:	ac 01       	movw	r20, r24
     aa8:	c3 01       	movw	r24, r6
     aaa:	b2 01       	movw	r22, r4
     aac:	0e 94 8a 07 	call	0xf14	; 0xf14 <__addsf3>
     ab0:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixsfsi>
			old_mtr_cmd = mtr_cmd;
     ab4:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <old_mtr_cmd+0x1>
     ab8:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <old_mtr_cmd>
			mtr_cmd = js_mtr_scaling(mtr_cmd); 
     abc:	cb 01       	movw	r24, r22
     abe:	0e 94 47 02 	call	0x48e	; 0x48e <js_mtr_scaling>
     ac2:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <mtr_cmd>
     ac6:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <mtr_cmd+0x1>
			buffer[0] = (mtr_cmd >> 8); // MSB
     aca:	f8 01       	movw	r30, r16
     acc:	90 83       	st	Z, r25
			buffer[1] = mtr_cmd; // LSB
     ace:	81 83       	std	Z+1, r24	; 0x01
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
     ad0:	65 e0       	ldi	r22, 0x05	; 5
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     ad8:	6c 01       	movw	r12, r24
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
     ada:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <old_srv_cmd>
     ade:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <old_srv_cmd+0x1>
     ae2:	07 2e       	mov	r0, r23
     ae4:	00 0c       	add	r0, r0
     ae6:	88 0b       	sbc	r24, r24
     ae8:	99 0b       	sbc	r25, r25
     aea:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatsisf>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e8       	ldi	r20, 0x80	; 128
     af4:	5e e3       	ldi	r21, 0x3E	; 62
     af6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     afa:	2b 01       	movw	r4, r22
     afc:	3c 01       	movw	r6, r24
     afe:	b6 01       	movw	r22, r12
     b00:	dd 0c       	add	r13, r13
     b02:	88 0b       	sbc	r24, r24
     b04:	99 0b       	sbc	r25, r25
     b06:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatsisf>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e4       	ldi	r20, 0x40	; 64
     b10:	5f e3       	ldi	r21, 0x3F	; 63
     b12:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     b16:	9b 01       	movw	r18, r22
     b18:	ac 01       	movw	r20, r24
     b1a:	c3 01       	movw	r24, r6
     b1c:	b2 01       	movw	r22, r4
     b1e:	0e 94 8a 07 	call	0xf14	; 0xf14 <__addsf3>
     b22:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixsfsi>
			old_srv_cmd = srv_cmd;
     b26:	70 93 aa 02 	sts	0x02AA, r23	; 0x8002aa <old_srv_cmd+0x1>
     b2a:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <old_srv_cmd>
			srv_cmd = js_srv_scaling(srv_cmd);
     b2e:	07 2e       	mov	r0, r23
     b30:	00 0c       	add	r0, r0
     b32:	88 0b       	sbc	r24, r24
     b34:	99 0b       	sbc	r25, r25
     b36:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatsisf>
     b3a:	0e 94 84 02 	call	0x508	; 0x508 <js_srv_scaling>
			if ((srv_cmd < 5) && (srv_cmd > -5))
     b3e:	9c 01       	movw	r18, r24
     b40:	2c 5f       	subi	r18, 0xFC	; 252
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	29 30       	cpi	r18, 0x09	; 9
     b46:	31 05       	cpc	r19, r1
     b48:	28 f4       	brcc	.+10     	; 0xb54 <main+0x408>
				srv_cmd = 0;
     b4a:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <srv_cmd+0x1>
     b4e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <srv_cmd>
     b52:	17 c0       	rjmp	.+46     	; 0xb82 <main+0x436>
			else if (srv_cmd > 45)
     b54:	8e 32       	cpi	r24, 0x2E	; 46
     b56:	91 05       	cpc	r25, r1
     b58:	2c f0       	brlt	.+10     	; 0xb64 <main+0x418>
				srv_cmd = 45;
     b5a:	30 92 a8 02 	sts	0x02A8, r3	; 0x8002a8 <srv_cmd+0x1>
     b5e:	20 92 a7 02 	sts	0x02A7, r2	; 0x8002a7 <srv_cmd>
     b62:	0f c0       	rjmp	.+30     	; 0xb82 <main+0x436>
			else if (srv_cmd < -45)
     b64:	83 3d       	cpi	r24, 0xD3	; 211
     b66:	ff ef       	ldi	r31, 0xFF	; 255
     b68:	9f 07       	cpc	r25, r31
     b6a:	2c f0       	brlt	.+10     	; 0xb76 <main+0x42a>
			buffer[1] = mtr_cmd; // LSB
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
			old_srv_cmd = srv_cmd;
			srv_cmd = js_srv_scaling(srv_cmd);
     b6c:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <srv_cmd+0x1>
     b70:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <srv_cmd>
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <main+0x436>
			if ((srv_cmd < 5) && (srv_cmd > -5))
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
     b76:	83 ed       	ldi	r24, 0xD3	; 211
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <srv_cmd+0x1>
     b7e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <srv_cmd>
			buffer[2] = srv_cmd;
     b82:	f5 01       	movw	r30, r10
     b84:	80 81       	ld	r24, Z
     b86:	f8 01       	movw	r30, r16
     b88:	82 83       	std	Z+2, r24	; 0x02

			mirf_send(buffer, mirf_PAYLOAD);
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 1b 07 	call	0xe36	; 0xe36 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b92:	f5 e3       	ldi	r31, 0x35	; 53
     b94:	fa 95       	dec	r31
     b96:	f1 f7       	brne	.-4      	; 0xb94 <main+0x448>
     b98:	00 00       	nop

}

void reset_TMR1()
{
	TCNT1 = 0;
     b9a:	19 82       	std	Y+1, r1	; 0x01
     b9c:	18 82       	st	Y, r1
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <main+0x478>
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     ba0:	88 81       	ld	r24, Y
     ba2:	99 81       	ldd	r25, Y+1	; 0x01
     ba4:	89 3b       	cpi	r24, 0xB9	; 185
     ba6:	9b 40       	sbci	r25, 0x0B	; 11
     ba8:	68 f0       	brcs	.+26     	; 0xbc4 <main+0x478>
				{
					comm_lost = 1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <comm_lost>
					comm_lost_count++;
     bb0:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <comm_lost_count>
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <comm_lost_count>
					TOGGLE_LED3;
     bba:	f7 01       	movw	r30, r14
     bbc:	80 81       	ld	r24, Z
     bbe:	89 25       	eor	r24, r9
     bc0:	80 83       	st	Z, r24
					break;
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <main+0x480>
			buffer[2] = srv_cmd;

			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
     bc4:	0e 94 76 06 	call	0xcec	; 0xcec <mirf_data_sent>
     bc8:	88 23       	and	r24, r24
     bca:	51 f3       	breq	.-44     	; 0xba0 <main+0x454>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     bcc:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <comm_lost>
     bd0:	81 11       	cpse	r24, r1
     bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <main+0x494>
			{
				BOAT_ON = 1; // one time flag
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <BOAT_ON>
				BOAT_OFF = 0;
     bda:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__data_end>
     bde:	05 c0       	rjmp	.+10     	; 0xbea <main+0x49e>
			}
			else
			{
				comm_lost = 0;	
     be0:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <comm_lost>
				BOAT_OFF = 1;			
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bea:	8f e3       	ldi	r24, 0x3F	; 63
     bec:	9c e9       	ldi	r25, 0x9C	; 156
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <main+0x4a2>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <main+0x4a8>
     bf4:	00 00       	nop
     bf6:	2a ce       	rjmp	.-940    	; 0x84c <main+0x100>

00000bf8 <__vector_32>:
	OCR3A = 31248; 
	TIMSK3 |= (1<<OCIE3A);
}

ISR(TIMER3_COMPA_vect)
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	2f 93       	push	r18
     c04:	3f 93       	push	r19
     c06:	4f 93       	push	r20
     c08:	5f 93       	push	r21
     c0a:	6f 93       	push	r22
     c0c:	7f 93       	push	r23
     c0e:	8f 93       	push	r24
     c10:	9f 93       	push	r25
     c12:	af 93       	push	r26
     c14:	bf 93       	push	r27
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
	if (BOAT_ON)
     c1a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <BOAT_ON>
     c1e:	88 23       	and	r24, r24
     c20:	c9 f1       	breq	.+114    	; 0xc94 <__vector_32+0x9c>
	{
		lcd_set_cursor(1,14);
     c22:	6e e0       	ldi	r22, 0x0E	; 14
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		if( comm_lost_count <= 0)
     c2a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <comm_lost_count>
     c2e:	81 11       	cpse	r24, r1
     c30:	05 c0       	rjmp	.+10     	; 0xc3c <__vector_32+0x44>
		lcd_print("***");
     c32:	88 e6       	ldi	r24, 0x68	; 104
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     c3a:	2a c0       	rjmp	.+84     	; 0xc90 <__vector_32+0x98>
		else if ( (comm_lost_count>0) && (comm_lost_count<3) )
     c3c:	9f ef       	ldi	r25, 0xFF	; 255
     c3e:	98 0f       	add	r25, r24
     c40:	92 30       	cpi	r25, 0x02	; 2
     c42:	28 f4       	brcc	.+10     	; 0xc4e <__vector_32+0x56>
		lcd_print("** ");
     c44:	8c e6       	ldi	r24, 0x6C	; 108
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     c4c:	21 c0       	rjmp	.+66     	; 0xc90 <__vector_32+0x98>
		else if ( (comm_lost_count>=3) && (comm_lost_count<6) )
     c4e:	9d ef       	ldi	r25, 0xFD	; 253
     c50:	98 0f       	add	r25, r24
     c52:	93 30       	cpi	r25, 0x03	; 3
     c54:	28 f4       	brcc	.+10     	; 0xc60 <__vector_32+0x68>
		lcd_print("*  ");
     c56:	80 e7       	ldi	r24, 0x70	; 112
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     c5e:	18 c0       	rjmp	.+48     	; 0xc90 <__vector_32+0x98>
		else if ( (comm_lost_count>=6) && (comm_lost_count<10))
     c60:	86 50       	subi	r24, 0x06	; 6
     c62:	84 30       	cpi	r24, 0x04	; 4
     c64:	28 f4       	brcc	.+10     	; 0xc70 <__vector_32+0x78>
		lcd_print("OFF");
     c66:	84 e7       	ldi	r24, 0x74	; 116
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     c6e:	10 c0       	rjmp	.+32     	; 0xc90 <__vector_32+0x98>
		else 
		{
			lcd_set_cursor(1,1);
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
			lcd_print("CONNECTION LOST,");
     c78:	88 e7       	ldi	r24, 0x78	; 120
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
			lcd_set_cursor(2,1);
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
			lcd_print("RESET CONTROLLER");             
     c88:	89 e8       	ldi	r24, 0x89	; 137
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
		}
		comm_lost_count = 0;
     c90:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <comm_lost_count>
	}
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <mirf_init>:
{
	mirf_CSN_lo;
	spi_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi_exchange_bytes(value, value, len);
	mirf_CSN_hi;
}
     cb6:	54 9a       	sbi	0x0a, 4	; 10
     cb8:	20 9a       	sbi	0x04, 0	; 4
     cba:	5c 98       	cbi	0x0b, 4	; 11
     cbc:	28 9a       	sbi	0x05, 0	; 5
     cbe:	ea 98       	cbi	0x1d, 2	; 29
     cc0:	e9 e6       	ldi	r30, 0x69	; 105
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 62       	ori	r24, 0x20	; 32
     cc8:	80 83       	st	Z, r24
     cca:	ea 9a       	sbi	0x1d, 2	; 29
     ccc:	0e 94 4d 07 	call	0xe9a	; 0xe9a <spi_master_initialize>
     cd0:	08 95       	ret

00000cd2 <mirf_data_ready>:
     cd2:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <PTX>
     cd6:	81 11       	cpse	r24, r1
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <mirf_data_ready+0x16>
     cda:	28 98       	cbi	0x05, 0	; 5
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	0e 94 58 07 	call	0xeb0	; 0xeb0 <spi_exchange_char>
     ce2:	28 9a       	sbi	0x05, 0	; 5
     ce4:	80 74       	andi	r24, 0x40	; 64
     ce6:	08 95       	ret
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	08 95       	ret

00000cec <mirf_data_sent>:
     cec:	28 98       	cbi	0x05, 0	; 5
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <spi_exchange_char>
     cf4:	28 9a       	sbi	0x05, 0	; 5
     cf6:	80 72       	andi	r24, 0x20	; 32
     cf8:	08 95       	ret

00000cfa <mirf_config_register>:
     cfa:	cf 93       	push	r28
     cfc:	c6 2f       	mov	r28, r22
     cfe:	28 98       	cbi	0x05, 0	; 5
     d00:	8f 71       	andi	r24, 0x1F	; 31
     d02:	80 62       	ori	r24, 0x20	; 32
     d04:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
     d08:	8c 2f       	mov	r24, r28
     d0a:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
     d0e:	28 9a       	sbi	0x05, 0	; 5
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <set_RX_MODE>:
     d14:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <PTX>
     d18:	60 e7       	ldi	r22, 0x70	; 112
     d1a:	87 e0       	ldi	r24, 0x07	; 7
     d1c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d20:	28 98       	cbi	0x05, 0	; 5
     d22:	81 ee       	ldi	r24, 0xE1	; 225
     d24:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
     d28:	28 9a       	sbi	0x05, 0	; 5
     d2a:	6b e5       	ldi	r22, 0x5B	; 91
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d32:	5c 9a       	sbi	0x0b, 4	; 11
     d34:	08 95       	ret

00000d36 <mirf_config>:
     d36:	6c e6       	ldi	r22, 0x6C	; 108
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d3e:	6f ef       	ldi	r22, 0xFF	; 255
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	81 e1       	ldi	r24, 0x11	; 17
     d4a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d4e:	63 e0       	ldi	r22, 0x03	; 3
     d50:	82 e1       	ldi	r24, 0x12	; 18
     d52:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	83 e1       	ldi	r24, 0x13	; 19
     d5a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	84 e1       	ldi	r24, 0x14	; 20
     d62:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	85 e1       	ldi	r24, 0x15	; 21
     d6a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	86 e1       	ldi	r24, 0x16	; 22
     d72:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d76:	66 e2       	ldi	r22, 0x26	; 38
     d78:	86 e0       	ldi	r24, 0x06	; 6
     d7a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d7e:	63 e0       	ldi	r22, 0x03	; 3
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d86:	63 e0       	ldi	r22, 0x03	; 3
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d8e:	6f e4       	ldi	r22, 0x4F	; 79
     d90:	84 e0       	ldi	r24, 0x04	; 4
     d92:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     d96:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <PTX>
     d9a:	60 e7       	ldi	r22, 0x70	; 112
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     da2:	28 98       	cbi	0x05, 0	; 5
     da4:	81 ee       	ldi	r24, 0xE1	; 225
     da6:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
     daa:	28 9a       	sbi	0x05, 0	; 5
     dac:	6b e5       	ldi	r22, 0x5B	; 91
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     db4:	5c 9a       	sbi	0x0b, 4	; 11
     db6:	08 95       	ret

00000db8 <mirf_get_data>:
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	ec 01       	movw	r28, r24
     dbe:	28 98       	cbi	0x05, 0	; 5
     dc0:	81 e6       	ldi	r24, 0x61	; 97
     dc2:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
     dc6:	43 e0       	ldi	r20, 0x03	; 3
     dc8:	be 01       	movw	r22, r28
     dca:	ce 01       	movw	r24, r28
     dcc:	0e 94 6d 07 	call	0xeda	; 0xeda <spi_exchange_bytes>
     dd0:	28 9a       	sbi	0x05, 0	; 5
     dd2:	60 e4       	ldi	r22, 0x40	; 64
     dd4:	87 e0       	ldi	r24, 0x07	; 7
     dd6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	eb 01       	movw	r28, r22
     de8:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
     dea:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_REGISTER | (REGISTER_MASK & reg));
     dec:	8f 71       	andi	r24, 0x1F	; 31
     dee:	80 62       	ori	r24, 0x20	; 32
     df0:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
	spi_send_bytes(value, len);
     df4:	61 2f       	mov	r22, r17
     df6:	ce 01       	movw	r24, r28
     df8:	0e 94 5e 07 	call	0xebc	; 0xebc <spi_send_bytes>
	mirf_CSN_hi;
     dfc:	28 9a       	sbi	0x05, 0	; 5
}
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	08 95       	ret

00000e06 <mirf_set_RADDR>:
}

void mirf_set_RADDR(int8_t *adr)
// Sets the receiving address
{
	mirf_CE_lo;
     e06:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
     e08:	45 e0       	ldi	r20, 0x05	; 5
     e0a:	bc 01       	movw	r22, r24
     e0c:	8b e0       	ldi	r24, 0x0B	; 11
     e0e:	0e 94 f0 06 	call	0xde0	; 0xde0 <mirf_write_register>
	mirf_CE_hi;
     e12:	5c 9a       	sbi	0x0b, 4	; 11
     e14:	08 95       	ret

00000e16 <mirf_set_TADDR>:
}

void mirf_set_TADDR(int8_t *adr)
// Sets the transmitting address
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
	mirf_write_register(RX_ADDR_P0, adr, 5);
     e1c:	45 e0       	ldi	r20, 0x05	; 5
     e1e:	bc 01       	movw	r22, r24
     e20:	8a e0       	ldi	r24, 0x0A	; 10
     e22:	0e 94 f0 06 	call	0xde0	; 0xde0 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
     e26:	45 e0       	ldi	r20, 0x05	; 5
     e28:	be 01       	movw	r22, r28
     e2a:	80 e1       	ldi	r24, 0x10	; 16
     e2c:	0e 94 f0 06 	call	0xde0	; 0xde0 <mirf_write_register>
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	ec 01       	movw	r28, r24
     e3e:	16 2f       	mov	r17, r22
	//while (PTX)
	//{

	//} // Wait until last packet is send

	mirf_CE_lo;
     e40:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1; // Set to transmitter mode
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
     e48:	6a e5       	ldi	r22, 0x5A	; 90
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>

	mirf_CSN_lo;             // Pull down chip select
     e50:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(FLUSH_TX); // Write cmd to flush tx fifo
     e52:	81 ee       	ldi	r24, 0xE1	; 225
     e54:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
	mirf_CSN_hi;             // Pull up chip select
     e58:	28 9a       	sbi	0x05, 0	; 5
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     e5a:	60 e7       	ldi	r22, 0x70	; 112
     e5c:	87 e0       	ldi	r24, 0x07	; 7
     e5e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
     e62:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_TX_PAYLOAD); // Write cmd to write payload
     e64:	80 ea       	ldi	r24, 0xA0	; 160
     e66:	0e 94 53 07 	call	0xea6	; 0xea6 <spi_send_char>
	spi_send_bytes(value, len);  // Write payload
     e6a:	61 2f       	mov	r22, r17
     e6c:	ce 01       	movw	r24, r28
     e6e:	0e 94 5e 07 	call	0xebc	; 0xebc <spi_send_bytes>
	mirf_CSN_hi;                 // Pull up chip select
     e72:	28 9a       	sbi	0x05, 0	; 5

	mirf_CE_hi; // Start transmission
     e74:	5c 9a       	sbi	0x0b, 4	; 11
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	08 95       	ret

00000e7e <__vector_4>:

ISR(INT3_vect) // Interrupt handler
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	8f 93       	push	r24
	//char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
     e8a:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <PTX>
// 		}
		
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
     e8e:	8f 91       	pop	r24
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <spi_master_initialize>:
     e9a:	84 b1       	in	r24, 0x04	; 4
     e9c:	87 60       	ori	r24, 0x07	; 7
     e9e:	84 b9       	out	0x04, r24	; 4
     ea0:	81 e5       	ldi	r24, 0x51	; 81
     ea2:	8c bd       	out	0x2c, r24	; 44
     ea4:	08 95       	ret

00000ea6 <spi_send_char>:
     ea6:	8e bd       	out	0x2e, r24	; 46
     ea8:	0d b4       	in	r0, 0x2d	; 45
     eaa:	07 fe       	sbrs	r0, 7
     eac:	fd cf       	rjmp	.-6      	; 0xea8 <spi_send_char+0x2>
     eae:	08 95       	ret

00000eb0 <spi_exchange_char>:
     eb0:	8e bd       	out	0x2e, r24	; 46
     eb2:	0d b4       	in	r0, 0x2d	; 45
     eb4:	07 fe       	sbrs	r0, 7
     eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <spi_exchange_char+0x2>
     eb8:	8e b5       	in	r24, 0x2e	; 46
     eba:	08 95       	ret

00000ebc <spi_send_bytes>:
     ebc:	66 23       	and	r22, r22
     ebe:	61 f0       	breq	.+24     	; 0xed8 <spi_send_bytes+0x1c>
     ec0:	fc 01       	movw	r30, r24
     ec2:	9c 01       	movw	r18, r24
     ec4:	26 0f       	add	r18, r22
     ec6:	31 1d       	adc	r19, r1
     ec8:	91 91       	ld	r25, Z+
     eca:	9e bd       	out	0x2e, r25	; 46
     ecc:	0d b4       	in	r0, 0x2d	; 45
     ece:	07 fe       	sbrs	r0, 7
     ed0:	fd cf       	rjmp	.-6      	; 0xecc <spi_send_bytes+0x10>
     ed2:	e2 17       	cp	r30, r18
     ed4:	f3 07       	cpc	r31, r19
     ed6:	c1 f7       	brne	.-16     	; 0xec8 <spi_send_bytes+0xc>
     ed8:	08 95       	ret

00000eda <spi_exchange_bytes>:
     eda:	44 23       	and	r20, r20
     edc:	81 f0       	breq	.+32     	; 0xefe <spi_exchange_bytes+0x24>
     ede:	fc 01       	movw	r30, r24
     ee0:	a6 2f       	mov	r26, r22
     ee2:	b7 2f       	mov	r27, r23
     ee4:	9c 01       	movw	r18, r24
     ee6:	24 0f       	add	r18, r20
     ee8:	31 1d       	adc	r19, r1
     eea:	91 91       	ld	r25, Z+
     eec:	9e bd       	out	0x2e, r25	; 46
     eee:	0d b4       	in	r0, 0x2d	; 45
     ef0:	07 fe       	sbrs	r0, 7
     ef2:	fd cf       	rjmp	.-6      	; 0xeee <spi_exchange_bytes+0x14>
     ef4:	9e b5       	in	r25, 0x2e	; 46
     ef6:	9d 93       	st	X+, r25
     ef8:	e2 17       	cp	r30, r18
     efa:	f3 07       	cpc	r31, r19
     efc:	b1 f7       	brne	.-20     	; 0xeea <spi_exchange_bytes+0x10>
     efe:	08 95       	ret

00000f00 <setup_usart0>:
     f00:	98 e1       	ldi	r25, 0x18	; 24
     f02:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     f0c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f10:	08 95       	ret

00000f12 <__subsf3>:
     f12:	50 58       	subi	r21, 0x80	; 128

00000f14 <__addsf3>:
     f14:	bb 27       	eor	r27, r27
     f16:	aa 27       	eor	r26, r26
     f18:	0e 94 a1 07 	call	0xf42	; 0xf42 <__addsf3x>
     f1c:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_round>
     f20:	0e 94 0d 09 	call	0x121a	; 0x121a <__fp_pscA>
     f24:	38 f0       	brcs	.+14     	; 0xf34 <__addsf3+0x20>
     f26:	0e 94 14 09 	call	0x1228	; 0x1228 <__fp_pscB>
     f2a:	20 f0       	brcs	.+8      	; 0xf34 <__addsf3+0x20>
     f2c:	39 f4       	brne	.+14     	; 0xf3c <__addsf3+0x28>
     f2e:	9f 3f       	cpi	r25, 0xFF	; 255
     f30:	19 f4       	brne	.+6      	; 0xf38 <__addsf3+0x24>
     f32:	26 f4       	brtc	.+8      	; 0xf3c <__addsf3+0x28>
     f34:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__fp_nan>
     f38:	0e f4       	brtc	.+2      	; 0xf3c <__addsf3+0x28>
     f3a:	e0 95       	com	r30
     f3c:	e7 fb       	bst	r30, 7
     f3e:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>

00000f42 <__addsf3x>:
     f42:	e9 2f       	mov	r30, r25
     f44:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fp_split3>
     f48:	58 f3       	brcs	.-42     	; 0xf20 <__addsf3+0xc>
     f4a:	ba 17       	cp	r27, r26
     f4c:	62 07       	cpc	r22, r18
     f4e:	73 07       	cpc	r23, r19
     f50:	84 07       	cpc	r24, r20
     f52:	95 07       	cpc	r25, r21
     f54:	20 f0       	brcs	.+8      	; 0xf5e <__addsf3x+0x1c>
     f56:	79 f4       	brne	.+30     	; 0xf76 <__addsf3x+0x34>
     f58:	a6 f5       	brtc	.+104    	; 0xfc2 <__addsf3x+0x80>
     f5a:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_zero>
     f5e:	0e f4       	brtc	.+2      	; 0xf62 <__addsf3x+0x20>
     f60:	e0 95       	com	r30
     f62:	0b 2e       	mov	r0, r27
     f64:	ba 2f       	mov	r27, r26
     f66:	a0 2d       	mov	r26, r0
     f68:	0b 01       	movw	r0, r22
     f6a:	b9 01       	movw	r22, r18
     f6c:	90 01       	movw	r18, r0
     f6e:	0c 01       	movw	r0, r24
     f70:	ca 01       	movw	r24, r20
     f72:	a0 01       	movw	r20, r0
     f74:	11 24       	eor	r1, r1
     f76:	ff 27       	eor	r31, r31
     f78:	59 1b       	sub	r21, r25
     f7a:	99 f0       	breq	.+38     	; 0xfa2 <__addsf3x+0x60>
     f7c:	59 3f       	cpi	r21, 0xF9	; 249
     f7e:	50 f4       	brcc	.+20     	; 0xf94 <__addsf3x+0x52>
     f80:	50 3e       	cpi	r21, 0xE0	; 224
     f82:	68 f1       	brcs	.+90     	; 0xfde <__addsf3x+0x9c>
     f84:	1a 16       	cp	r1, r26
     f86:	f0 40       	sbci	r31, 0x00	; 0
     f88:	a2 2f       	mov	r26, r18
     f8a:	23 2f       	mov	r18, r19
     f8c:	34 2f       	mov	r19, r20
     f8e:	44 27       	eor	r20, r20
     f90:	58 5f       	subi	r21, 0xF8	; 248
     f92:	f3 cf       	rjmp	.-26     	; 0xf7a <__addsf3x+0x38>
     f94:	46 95       	lsr	r20
     f96:	37 95       	ror	r19
     f98:	27 95       	ror	r18
     f9a:	a7 95       	ror	r26
     f9c:	f0 40       	sbci	r31, 0x00	; 0
     f9e:	53 95       	inc	r21
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__addsf3x+0x52>
     fa2:	7e f4       	brtc	.+30     	; 0xfc2 <__addsf3x+0x80>
     fa4:	1f 16       	cp	r1, r31
     fa6:	ba 0b       	sbc	r27, r26
     fa8:	62 0b       	sbc	r22, r18
     faa:	73 0b       	sbc	r23, r19
     fac:	84 0b       	sbc	r24, r20
     fae:	ba f0       	brmi	.+46     	; 0xfde <__addsf3x+0x9c>
     fb0:	91 50       	subi	r25, 0x01	; 1
     fb2:	a1 f0       	breq	.+40     	; 0xfdc <__addsf3x+0x9a>
     fb4:	ff 0f       	add	r31, r31
     fb6:	bb 1f       	adc	r27, r27
     fb8:	66 1f       	adc	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	c2 f7       	brpl	.-16     	; 0xfb0 <__addsf3x+0x6e>
     fc0:	0e c0       	rjmp	.+28     	; 0xfde <__addsf3x+0x9c>
     fc2:	ba 0f       	add	r27, r26
     fc4:	62 1f       	adc	r22, r18
     fc6:	73 1f       	adc	r23, r19
     fc8:	84 1f       	adc	r24, r20
     fca:	48 f4       	brcc	.+18     	; 0xfde <__addsf3x+0x9c>
     fcc:	87 95       	ror	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	b7 95       	ror	r27
     fd4:	f7 95       	ror	r31
     fd6:	9e 3f       	cpi	r25, 0xFE	; 254
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <__addsf3x+0x9a>
     fda:	b0 cf       	rjmp	.-160    	; 0xf3c <__addsf3+0x28>
     fdc:	93 95       	inc	r25
     fde:	88 0f       	add	r24, r24
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <__addsf3x+0xa2>
     fe2:	99 27       	eor	r25, r25
     fe4:	ee 0f       	add	r30, r30
     fe6:	97 95       	ror	r25
     fe8:	87 95       	ror	r24
     fea:	08 95       	ret

00000fec <__cmpsf2>:
     fec:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_cmp>
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <__cmpsf2+0x8>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	08 95       	ret

00000ff6 <__divsf3>:
     ff6:	0e 94 0f 08 	call	0x101e	; 0x101e <__divsf3x>
     ffa:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_round>
     ffe:	0e 94 14 09 	call	0x1228	; 0x1228 <__fp_pscB>
    1002:	58 f0       	brcs	.+22     	; 0x101a <__divsf3+0x24>
    1004:	0e 94 0d 09 	call	0x121a	; 0x121a <__fp_pscA>
    1008:	40 f0       	brcs	.+16     	; 0x101a <__divsf3+0x24>
    100a:	29 f4       	brne	.+10     	; 0x1016 <__divsf3+0x20>
    100c:	5f 3f       	cpi	r21, 0xFF	; 255
    100e:	29 f0       	breq	.+10     	; 0x101a <__divsf3+0x24>
    1010:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    1014:	51 11       	cpse	r21, r1
    1016:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_szero>
    101a:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__fp_nan>

0000101e <__divsf3x>:
    101e:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fp_split3>
    1022:	68 f3       	brcs	.-38     	; 0xffe <__divsf3+0x8>

00001024 <__divsf3_pse>:
    1024:	99 23       	and	r25, r25
    1026:	b1 f3       	breq	.-20     	; 0x1014 <__divsf3+0x1e>
    1028:	55 23       	and	r21, r21
    102a:	91 f3       	breq	.-28     	; 0x1010 <__divsf3+0x1a>
    102c:	95 1b       	sub	r25, r21
    102e:	55 0b       	sbc	r21, r21
    1030:	bb 27       	eor	r27, r27
    1032:	aa 27       	eor	r26, r26
    1034:	62 17       	cp	r22, r18
    1036:	73 07       	cpc	r23, r19
    1038:	84 07       	cpc	r24, r20
    103a:	38 f0       	brcs	.+14     	; 0x104a <__divsf3_pse+0x26>
    103c:	9f 5f       	subi	r25, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	44 1f       	adc	r20, r20
    1046:	aa 1f       	adc	r26, r26
    1048:	a9 f3       	breq	.-22     	; 0x1034 <__divsf3_pse+0x10>
    104a:	35 d0       	rcall	.+106    	; 0x10b6 <__divsf3_pse+0x92>
    104c:	0e 2e       	mov	r0, r30
    104e:	3a f0       	brmi	.+14     	; 0x105e <__divsf3_pse+0x3a>
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	32 d0       	rcall	.+100    	; 0x10b8 <__divsf3_pse+0x94>
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	50 40       	sbci	r21, 0x00	; 0
    1058:	e6 95       	lsr	r30
    105a:	00 1c       	adc	r0, r0
    105c:	ca f7       	brpl	.-14     	; 0x1050 <__divsf3_pse+0x2c>
    105e:	2b d0       	rcall	.+86     	; 0x10b6 <__divsf3_pse+0x92>
    1060:	fe 2f       	mov	r31, r30
    1062:	29 d0       	rcall	.+82     	; 0x10b6 <__divsf3_pse+0x92>
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	bb 1f       	adc	r27, r27
    106c:	26 17       	cp	r18, r22
    106e:	37 07       	cpc	r19, r23
    1070:	48 07       	cpc	r20, r24
    1072:	ab 07       	cpc	r26, r27
    1074:	b0 e8       	ldi	r27, 0x80	; 128
    1076:	09 f0       	breq	.+2      	; 0x107a <__divsf3_pse+0x56>
    1078:	bb 0b       	sbc	r27, r27
    107a:	80 2d       	mov	r24, r0
    107c:	bf 01       	movw	r22, r30
    107e:	ff 27       	eor	r31, r31
    1080:	93 58       	subi	r25, 0x83	; 131
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	3a f0       	brmi	.+14     	; 0x1094 <__divsf3_pse+0x70>
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	51 05       	cpc	r21, r1
    108a:	78 f0       	brcs	.+30     	; 0x10aa <__divsf3_pse+0x86>
    108c:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    1090:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	e4 f3       	brlt	.-8      	; 0x1090 <__divsf3_pse+0x6c>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	d4 f3       	brlt	.-12     	; 0x1090 <__divsf3_pse+0x6c>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	9f 5f       	subi	r25, 0xFF	; 255
    10a8:	c9 f7       	brne	.-14     	; 0x109c <__divsf3_pse+0x78>
    10aa:	88 0f       	add	r24, r24
    10ac:	91 1d       	adc	r25, r1
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	97 f9       	bld	r25, 7
    10b4:	08 95       	ret
    10b6:	e1 e0       	ldi	r30, 0x01	; 1
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	bb 1f       	adc	r27, r27
    10c0:	62 17       	cp	r22, r18
    10c2:	73 07       	cpc	r23, r19
    10c4:	84 07       	cpc	r24, r20
    10c6:	ba 07       	cpc	r27, r26
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__divsf3_pse+0xae>
    10ca:	62 1b       	sub	r22, r18
    10cc:	73 0b       	sbc	r23, r19
    10ce:	84 0b       	sbc	r24, r20
    10d0:	ba 0b       	sbc	r27, r26
    10d2:	ee 1f       	adc	r30, r30
    10d4:	88 f7       	brcc	.-30     	; 0x10b8 <__divsf3_pse+0x94>
    10d6:	e0 95       	com	r30
    10d8:	08 95       	ret

000010da <__fixsfsi>:
    10da:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fixunssfsi>
    10de:	68 94       	set
    10e0:	b1 11       	cpse	r27, r1
    10e2:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_szero>
    10e6:	08 95       	ret

000010e8 <__fixunssfsi>:
    10e8:	0e 94 34 09 	call	0x1268	; 0x1268 <__fp_splitA>
    10ec:	88 f0       	brcs	.+34     	; 0x1110 <__fixunssfsi+0x28>
    10ee:	9f 57       	subi	r25, 0x7F	; 127
    10f0:	98 f0       	brcs	.+38     	; 0x1118 <__fixunssfsi+0x30>
    10f2:	b9 2f       	mov	r27, r25
    10f4:	99 27       	eor	r25, r25
    10f6:	b7 51       	subi	r27, 0x17	; 23
    10f8:	b0 f0       	brcs	.+44     	; 0x1126 <__fixunssfsi+0x3e>
    10fa:	e1 f0       	breq	.+56     	; 0x1134 <__fixunssfsi+0x4c>
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	1a f0       	brmi	.+6      	; 0x110c <__fixunssfsi+0x24>
    1106:	ba 95       	dec	r27
    1108:	c9 f7       	brne	.-14     	; 0x10fc <__fixunssfsi+0x14>
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <__fixunssfsi+0x4c>
    110c:	b1 30       	cpi	r27, 0x01	; 1
    110e:	91 f0       	breq	.+36     	; 0x1134 <__fixunssfsi+0x4c>
    1110:	0e 94 4e 09 	call	0x129c	; 0x129c <__fp_zero>
    1114:	b1 e0       	ldi	r27, 0x01	; 1
    1116:	08 95       	ret
    1118:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_zero>
    111c:	67 2f       	mov	r22, r23
    111e:	78 2f       	mov	r23, r24
    1120:	88 27       	eor	r24, r24
    1122:	b8 5f       	subi	r27, 0xF8	; 248
    1124:	39 f0       	breq	.+14     	; 0x1134 <__fixunssfsi+0x4c>
    1126:	b9 3f       	cpi	r27, 0xF9	; 249
    1128:	cc f3       	brlt	.-14     	; 0x111c <__fixunssfsi+0x34>
    112a:	86 95       	lsr	r24
    112c:	77 95       	ror	r23
    112e:	67 95       	ror	r22
    1130:	b3 95       	inc	r27
    1132:	d9 f7       	brne	.-10     	; 0x112a <__fixunssfsi+0x42>
    1134:	3e f4       	brtc	.+14     	; 0x1144 <__fixunssfsi+0x5c>
    1136:	90 95       	com	r25
    1138:	80 95       	com	r24
    113a:	70 95       	com	r23
    113c:	61 95       	neg	r22
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8f 4f       	sbci	r24, 0xFF	; 255
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	08 95       	ret

00001146 <__floatunsisf>:
    1146:	e8 94       	clt
    1148:	09 c0       	rjmp	.+18     	; 0x115c <__floatsisf+0x12>

0000114a <__floatsisf>:
    114a:	97 fb       	bst	r25, 7
    114c:	3e f4       	brtc	.+14     	; 0x115c <__floatsisf+0x12>
    114e:	90 95       	com	r25
    1150:	80 95       	com	r24
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	99 23       	and	r25, r25
    115e:	a9 f0       	breq	.+42     	; 0x118a <__floatsisf+0x40>
    1160:	f9 2f       	mov	r31, r25
    1162:	96 e9       	ldi	r25, 0x96	; 150
    1164:	bb 27       	eor	r27, r27
    1166:	93 95       	inc	r25
    1168:	f6 95       	lsr	r31
    116a:	87 95       	ror	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b7 95       	ror	r27
    1172:	f1 11       	cpse	r31, r1
    1174:	f8 cf       	rjmp	.-16     	; 0x1166 <__floatsisf+0x1c>
    1176:	fa f4       	brpl	.+62     	; 0x11b6 <__floatsisf+0x6c>
    1178:	bb 0f       	add	r27, r27
    117a:	11 f4       	brne	.+4      	; 0x1180 <__floatsisf+0x36>
    117c:	60 ff       	sbrs	r22, 0
    117e:	1b c0       	rjmp	.+54     	; 0x11b6 <__floatsisf+0x6c>
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	16 c0       	rjmp	.+44     	; 0x11b6 <__floatsisf+0x6c>
    118a:	88 23       	and	r24, r24
    118c:	11 f0       	breq	.+4      	; 0x1192 <__floatsisf+0x48>
    118e:	96 e9       	ldi	r25, 0x96	; 150
    1190:	11 c0       	rjmp	.+34     	; 0x11b4 <__floatsisf+0x6a>
    1192:	77 23       	and	r23, r23
    1194:	21 f0       	breq	.+8      	; 0x119e <__floatsisf+0x54>
    1196:	9e e8       	ldi	r25, 0x8E	; 142
    1198:	87 2f       	mov	r24, r23
    119a:	76 2f       	mov	r23, r22
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <__floatsisf+0x5e>
    119e:	66 23       	and	r22, r22
    11a0:	71 f0       	breq	.+28     	; 0x11be <__floatsisf+0x74>
    11a2:	96 e8       	ldi	r25, 0x86	; 134
    11a4:	86 2f       	mov	r24, r22
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	2a f0       	brmi	.+10     	; 0x11b6 <__floatsisf+0x6c>
    11ac:	9a 95       	dec	r25
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	88 1f       	adc	r24, r24
    11b4:	da f7       	brpl	.-10     	; 0x11ac <__floatsisf+0x62>
    11b6:	88 0f       	add	r24, r24
    11b8:	96 95       	lsr	r25
    11ba:	87 95       	ror	r24
    11bc:	97 f9       	bld	r25, 7
    11be:	08 95       	ret

000011c0 <__fp_cmp>:
    11c0:	99 0f       	add	r25, r25
    11c2:	00 08       	sbc	r0, r0
    11c4:	55 0f       	add	r21, r21
    11c6:	aa 0b       	sbc	r26, r26
    11c8:	e0 e8       	ldi	r30, 0x80	; 128
    11ca:	fe ef       	ldi	r31, 0xFE	; 254
    11cc:	16 16       	cp	r1, r22
    11ce:	17 06       	cpc	r1, r23
    11d0:	e8 07       	cpc	r30, r24
    11d2:	f9 07       	cpc	r31, r25
    11d4:	c0 f0       	brcs	.+48     	; 0x1206 <__fp_cmp+0x46>
    11d6:	12 16       	cp	r1, r18
    11d8:	13 06       	cpc	r1, r19
    11da:	e4 07       	cpc	r30, r20
    11dc:	f5 07       	cpc	r31, r21
    11de:	98 f0       	brcs	.+38     	; 0x1206 <__fp_cmp+0x46>
    11e0:	62 1b       	sub	r22, r18
    11e2:	73 0b       	sbc	r23, r19
    11e4:	84 0b       	sbc	r24, r20
    11e6:	95 0b       	sbc	r25, r21
    11e8:	39 f4       	brne	.+14     	; 0x11f8 <__fp_cmp+0x38>
    11ea:	0a 26       	eor	r0, r26
    11ec:	61 f0       	breq	.+24     	; 0x1206 <__fp_cmp+0x46>
    11ee:	23 2b       	or	r18, r19
    11f0:	24 2b       	or	r18, r20
    11f2:	25 2b       	or	r18, r21
    11f4:	21 f4       	brne	.+8      	; 0x11fe <__fp_cmp+0x3e>
    11f6:	08 95       	ret
    11f8:	0a 26       	eor	r0, r26
    11fa:	09 f4       	brne	.+2      	; 0x11fe <__fp_cmp+0x3e>
    11fc:	a1 40       	sbci	r26, 0x01	; 1
    11fe:	a6 95       	lsr	r26
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	81 1d       	adc	r24, r1
    1204:	81 1d       	adc	r24, r1
    1206:	08 95       	ret

00001208 <__fp_inf>:
    1208:	97 f9       	bld	r25, 7
    120a:	9f 67       	ori	r25, 0x7F	; 127
    120c:	80 e8       	ldi	r24, 0x80	; 128
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	08 95       	ret

00001214 <__fp_nan>:
    1214:	9f ef       	ldi	r25, 0xFF	; 255
    1216:	80 ec       	ldi	r24, 0xC0	; 192
    1218:	08 95       	ret

0000121a <__fp_pscA>:
    121a:	00 24       	eor	r0, r0
    121c:	0a 94       	dec	r0
    121e:	16 16       	cp	r1, r22
    1220:	17 06       	cpc	r1, r23
    1222:	18 06       	cpc	r1, r24
    1224:	09 06       	cpc	r0, r25
    1226:	08 95       	ret

00001228 <__fp_pscB>:
    1228:	00 24       	eor	r0, r0
    122a:	0a 94       	dec	r0
    122c:	12 16       	cp	r1, r18
    122e:	13 06       	cpc	r1, r19
    1230:	14 06       	cpc	r1, r20
    1232:	05 06       	cpc	r0, r21
    1234:	08 95       	ret

00001236 <__fp_round>:
    1236:	09 2e       	mov	r0, r25
    1238:	03 94       	inc	r0
    123a:	00 0c       	add	r0, r0
    123c:	11 f4       	brne	.+4      	; 0x1242 <__fp_round+0xc>
    123e:	88 23       	and	r24, r24
    1240:	52 f0       	brmi	.+20     	; 0x1256 <__fp_round+0x20>
    1242:	bb 0f       	add	r27, r27
    1244:	40 f4       	brcc	.+16     	; 0x1256 <__fp_round+0x20>
    1246:	bf 2b       	or	r27, r31
    1248:	11 f4       	brne	.+4      	; 0x124e <__fp_round+0x18>
    124a:	60 ff       	sbrs	r22, 0
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <__fp_round+0x20>
    124e:	6f 5f       	subi	r22, 0xFF	; 255
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	8f 4f       	sbci	r24, 0xFF	; 255
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	08 95       	ret

00001258 <__fp_split3>:
    1258:	57 fd       	sbrc	r21, 7
    125a:	90 58       	subi	r25, 0x80	; 128
    125c:	44 0f       	add	r20, r20
    125e:	55 1f       	adc	r21, r21
    1260:	59 f0       	breq	.+22     	; 0x1278 <__fp_splitA+0x10>
    1262:	5f 3f       	cpi	r21, 0xFF	; 255
    1264:	71 f0       	breq	.+28     	; 0x1282 <__fp_splitA+0x1a>
    1266:	47 95       	ror	r20

00001268 <__fp_splitA>:
    1268:	88 0f       	add	r24, r24
    126a:	97 fb       	bst	r25, 7
    126c:	99 1f       	adc	r25, r25
    126e:	61 f0       	breq	.+24     	; 0x1288 <__fp_splitA+0x20>
    1270:	9f 3f       	cpi	r25, 0xFF	; 255
    1272:	79 f0       	breq	.+30     	; 0x1292 <__fp_splitA+0x2a>
    1274:	87 95       	ror	r24
    1276:	08 95       	ret
    1278:	12 16       	cp	r1, r18
    127a:	13 06       	cpc	r1, r19
    127c:	14 06       	cpc	r1, r20
    127e:	55 1f       	adc	r21, r21
    1280:	f2 cf       	rjmp	.-28     	; 0x1266 <__fp_split3+0xe>
    1282:	46 95       	lsr	r20
    1284:	f1 df       	rcall	.-30     	; 0x1268 <__fp_splitA>
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <__fp_splitA+0x30>
    1288:	16 16       	cp	r1, r22
    128a:	17 06       	cpc	r1, r23
    128c:	18 06       	cpc	r1, r24
    128e:	99 1f       	adc	r25, r25
    1290:	f1 cf       	rjmp	.-30     	; 0x1274 <__fp_splitA+0xc>
    1292:	86 95       	lsr	r24
    1294:	71 05       	cpc	r23, r1
    1296:	61 05       	cpc	r22, r1
    1298:	08 94       	sec
    129a:	08 95       	ret

0000129c <__fp_zero>:
    129c:	e8 94       	clt

0000129e <__fp_szero>:
    129e:	bb 27       	eor	r27, r27
    12a0:	66 27       	eor	r22, r22
    12a2:	77 27       	eor	r23, r23
    12a4:	cb 01       	movw	r24, r22
    12a6:	97 f9       	bld	r25, 7
    12a8:	08 95       	ret

000012aa <__gesf2>:
    12aa:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_cmp>
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <__gesf2+0x8>
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	08 95       	ret

000012b4 <__mulsf3>:
    12b4:	0e 94 6d 09 	call	0x12da	; 0x12da <__mulsf3x>
    12b8:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_round>
    12bc:	0e 94 0d 09 	call	0x121a	; 0x121a <__fp_pscA>
    12c0:	38 f0       	brcs	.+14     	; 0x12d0 <__mulsf3+0x1c>
    12c2:	0e 94 14 09 	call	0x1228	; 0x1228 <__fp_pscB>
    12c6:	20 f0       	brcs	.+8      	; 0x12d0 <__mulsf3+0x1c>
    12c8:	95 23       	and	r25, r21
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <__mulsf3+0x1c>
    12cc:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    12d0:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__fp_nan>
    12d4:	11 24       	eor	r1, r1
    12d6:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_szero>

000012da <__mulsf3x>:
    12da:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fp_split3>
    12de:	70 f3       	brcs	.-36     	; 0x12bc <__mulsf3+0x8>

000012e0 <__mulsf3_pse>:
    12e0:	95 9f       	mul	r25, r21
    12e2:	c1 f3       	breq	.-16     	; 0x12d4 <__mulsf3+0x20>
    12e4:	95 0f       	add	r25, r21
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	55 1f       	adc	r21, r21
    12ea:	62 9f       	mul	r22, r18
    12ec:	f0 01       	movw	r30, r0
    12ee:	72 9f       	mul	r23, r18
    12f0:	bb 27       	eor	r27, r27
    12f2:	f0 0d       	add	r31, r0
    12f4:	b1 1d       	adc	r27, r1
    12f6:	63 9f       	mul	r22, r19
    12f8:	aa 27       	eor	r26, r26
    12fa:	f0 0d       	add	r31, r0
    12fc:	b1 1d       	adc	r27, r1
    12fe:	aa 1f       	adc	r26, r26
    1300:	64 9f       	mul	r22, r20
    1302:	66 27       	eor	r22, r22
    1304:	b0 0d       	add	r27, r0
    1306:	a1 1d       	adc	r26, r1
    1308:	66 1f       	adc	r22, r22
    130a:	82 9f       	mul	r24, r18
    130c:	22 27       	eor	r18, r18
    130e:	b0 0d       	add	r27, r0
    1310:	a1 1d       	adc	r26, r1
    1312:	62 1f       	adc	r22, r18
    1314:	73 9f       	mul	r23, r19
    1316:	b0 0d       	add	r27, r0
    1318:	a1 1d       	adc	r26, r1
    131a:	62 1f       	adc	r22, r18
    131c:	83 9f       	mul	r24, r19
    131e:	a0 0d       	add	r26, r0
    1320:	61 1d       	adc	r22, r1
    1322:	22 1f       	adc	r18, r18
    1324:	74 9f       	mul	r23, r20
    1326:	33 27       	eor	r19, r19
    1328:	a0 0d       	add	r26, r0
    132a:	61 1d       	adc	r22, r1
    132c:	23 1f       	adc	r18, r19
    132e:	84 9f       	mul	r24, r20
    1330:	60 0d       	add	r22, r0
    1332:	21 1d       	adc	r18, r1
    1334:	82 2f       	mov	r24, r18
    1336:	76 2f       	mov	r23, r22
    1338:	6a 2f       	mov	r22, r26
    133a:	11 24       	eor	r1, r1
    133c:	9f 57       	subi	r25, 0x7F	; 127
    133e:	50 40       	sbci	r21, 0x00	; 0
    1340:	9a f0       	brmi	.+38     	; 0x1368 <__mulsf3_pse+0x88>
    1342:	f1 f0       	breq	.+60     	; 0x1380 <__mulsf3_pse+0xa0>
    1344:	88 23       	and	r24, r24
    1346:	4a f0       	brmi	.+18     	; 0x135a <__mulsf3_pse+0x7a>
    1348:	ee 0f       	add	r30, r30
    134a:	ff 1f       	adc	r31, r31
    134c:	bb 1f       	adc	r27, r27
    134e:	66 1f       	adc	r22, r22
    1350:	77 1f       	adc	r23, r23
    1352:	88 1f       	adc	r24, r24
    1354:	91 50       	subi	r25, 0x01	; 1
    1356:	50 40       	sbci	r21, 0x00	; 0
    1358:	a9 f7       	brne	.-22     	; 0x1344 <__mulsf3_pse+0x64>
    135a:	9e 3f       	cpi	r25, 0xFE	; 254
    135c:	51 05       	cpc	r21, r1
    135e:	80 f0       	brcs	.+32     	; 0x1380 <__mulsf3_pse+0xa0>
    1360:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    1364:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_szero>
    1368:	5f 3f       	cpi	r21, 0xFF	; 255
    136a:	e4 f3       	brlt	.-8      	; 0x1364 <__mulsf3_pse+0x84>
    136c:	98 3e       	cpi	r25, 0xE8	; 232
    136e:	d4 f3       	brlt	.-12     	; 0x1364 <__mulsf3_pse+0x84>
    1370:	86 95       	lsr	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b7 95       	ror	r27
    1378:	f7 95       	ror	r31
    137a:	e7 95       	ror	r30
    137c:	9f 5f       	subi	r25, 0xFF	; 255
    137e:	c1 f7       	brne	.-16     	; 0x1370 <__mulsf3_pse+0x90>
    1380:	fe 2b       	or	r31, r30
    1382:	88 0f       	add	r24, r24
    1384:	91 1d       	adc	r25, r1
    1386:	96 95       	lsr	r25
    1388:	87 95       	ror	r24
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret

0000138e <__divmodhi4>:
    138e:	97 fb       	bst	r25, 7
    1390:	07 2e       	mov	r0, r23
    1392:	16 f4       	brtc	.+4      	; 0x1398 <__divmodhi4+0xa>
    1394:	00 94       	com	r0
    1396:	07 d0       	rcall	.+14     	; 0x13a6 <__divmodhi4_neg1>
    1398:	77 fd       	sbrc	r23, 7
    139a:	09 d0       	rcall	.+18     	; 0x13ae <__divmodhi4_neg2>
    139c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__udivmodhi4>
    13a0:	07 fc       	sbrc	r0, 7
    13a2:	05 d0       	rcall	.+10     	; 0x13ae <__divmodhi4_neg2>
    13a4:	3e f4       	brtc	.+14     	; 0x13b4 <__divmodhi4_exit>

000013a6 <__divmodhi4_neg1>:
    13a6:	90 95       	com	r25
    13a8:	81 95       	neg	r24
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	08 95       	ret

000013ae <__divmodhi4_neg2>:
    13ae:	70 95       	com	r23
    13b0:	61 95       	neg	r22
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255

000013b4 <__divmodhi4_exit>:
    13b4:	08 95       	ret

000013b6 <__udivmodhi4>:
    13b6:	aa 1b       	sub	r26, r26
    13b8:	bb 1b       	sub	r27, r27
    13ba:	51 e1       	ldi	r21, 0x11	; 17
    13bc:	07 c0       	rjmp	.+14     	; 0x13cc <__udivmodhi4_ep>

000013be <__udivmodhi4_loop>:
    13be:	aa 1f       	adc	r26, r26
    13c0:	bb 1f       	adc	r27, r27
    13c2:	a6 17       	cp	r26, r22
    13c4:	b7 07       	cpc	r27, r23
    13c6:	10 f0       	brcs	.+4      	; 0x13cc <__udivmodhi4_ep>
    13c8:	a6 1b       	sub	r26, r22
    13ca:	b7 0b       	sbc	r27, r23

000013cc <__udivmodhi4_ep>:
    13cc:	88 1f       	adc	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	5a 95       	dec	r21
    13d2:	a9 f7       	brne	.-22     	; 0x13be <__udivmodhi4_loop>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	08 95       	ret

000013de <__itoa_ncheck>:
    13de:	bb 27       	eor	r27, r27
    13e0:	4a 30       	cpi	r20, 0x0A	; 10
    13e2:	31 f4       	brne	.+12     	; 0x13f0 <__itoa_ncheck+0x12>
    13e4:	99 23       	and	r25, r25
    13e6:	22 f4       	brpl	.+8      	; 0x13f0 <__itoa_ncheck+0x12>
    13e8:	bd e2       	ldi	r27, 0x2D	; 45
    13ea:	90 95       	com	r25
    13ec:	81 95       	neg	r24
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__utoa_common>

000013f4 <__utoa_ncheck>:
    13f4:	bb 27       	eor	r27, r27

000013f6 <__utoa_common>:
    13f6:	fb 01       	movw	r30, r22
    13f8:	55 27       	eor	r21, r21
    13fa:	aa 27       	eor	r26, r26
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	aa 1f       	adc	r26, r26
    1402:	a4 17       	cp	r26, r20
    1404:	10 f0       	brcs	.+4      	; 0x140a <__utoa_common+0x14>
    1406:	a4 1b       	sub	r26, r20
    1408:	83 95       	inc	r24
    140a:	50 51       	subi	r21, 0x10	; 16
    140c:	b9 f7       	brne	.-18     	; 0x13fc <__utoa_common+0x6>
    140e:	a0 5d       	subi	r26, 0xD0	; 208
    1410:	aa 33       	cpi	r26, 0x3A	; 58
    1412:	08 f0       	brcs	.+2      	; 0x1416 <__utoa_common+0x20>
    1414:	a9 5d       	subi	r26, 0xD9	; 217
    1416:	a1 93       	st	Z+, r26
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	79 f7       	brne	.-34     	; 0x13fa <__utoa_common+0x4>
    141c:	b1 11       	cpse	r27, r1
    141e:	b1 93       	st	Z+, r27
    1420:	11 92       	st	Z+, r1
    1422:	cb 01       	movw	r24, r22
    1424:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <strrev>

00001428 <strrev>:
    1428:	dc 01       	movw	r26, r24
    142a:	fc 01       	movw	r30, r24
    142c:	67 2f       	mov	r22, r23
    142e:	71 91       	ld	r23, Z+
    1430:	77 23       	and	r23, r23
    1432:	e1 f7       	brne	.-8      	; 0x142c <strrev+0x4>
    1434:	32 97       	sbiw	r30, 0x02	; 2
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <strrev+0x18>
    1438:	7c 91       	ld	r23, X
    143a:	6d 93       	st	X+, r22
    143c:	70 83       	st	Z, r23
    143e:	62 91       	ld	r22, -Z
    1440:	ae 17       	cp	r26, r30
    1442:	bf 07       	cpc	r27, r31
    1444:	c8 f3       	brcs	.-14     	; 0x1438 <strrev+0x10>
    1446:	08 95       	ret

00001448 <_exit>:
    1448:	f8 94       	cli

0000144a <__stop_program>:
    144a:	ff cf       	rjmp	.-2      	; 0x144a <__stop_program>
