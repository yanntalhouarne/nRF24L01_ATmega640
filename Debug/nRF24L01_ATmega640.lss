
nRF24L01_ATmega640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  000011ea  0000127e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080024c  0080024c  000012ca  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032ca  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000162d  00000000  00000000  000048ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a06  00000000  00000000  00005ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  000078f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6f  00000000  00000000  00007f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000216a  00000000  00000000  000089cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000ab35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__vector_4>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ea ee       	ldi	r30, 0xEA	; 234
      f8:	f1 e1       	ldi	r31, 0x11	; 17
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ac 34       	cpi	r26, 0x4C	; 76
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	ac e4       	ldi	r26, 0x4C	; 76
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	ad 35       	cpi	r26, 0x5D	; 93
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 21 03 	call	0x642	; 0x642 <main>
     11a:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setup_adc>:
     122:	ec e7       	ldi	r30, 0x7C	; 124
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	80 64       	ori	r24, 0x40	; 64
     12a:	80 83       	st	Z, r24
     12c:	ea e7       	ldi	r30, 0x7A	; 122
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	87 68       	ori	r24, 0x87	; 135
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <analog_read>:
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	90 81       	ld	r25, Z
     13e:	98 7f       	andi	r25, 0xF8	; 248
     140:	87 70       	andi	r24, 0x07	; 7
     142:	89 2b       	or	r24, r25
     144:	80 83       	st	Z, r24
     146:	ea e7       	ldi	r30, 0x7A	; 122
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	80 64       	ori	r24, 0x40	; 64
     14e:	80 83       	st	Z, r24
     150:	80 81       	ld	r24, Z
     152:	84 ff       	sbrs	r24, 4
     154:	fd cf       	rjmp	.-6      	; 0x150 <analog_read+0x18>
     156:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	98 2f       	mov	r25, r24
     162:	88 27       	eor	r24, r24
     164:	88 27       	eor	r24, r24
     166:	9f 72       	andi	r25, 0x2F	; 47
     168:	82 2b       	or	r24, r18
     16a:	08 95       	ret

0000016c <analog_get_average>:
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	e6 2e       	mov	r14, r22
     17c:	f1 2c       	mov	r15, r1
     17e:	1e 14       	cp	r1, r14
     180:	1f 04       	cpc	r1, r15
     182:	ac f4       	brge	.+42     	; 0x1ae <analog_get_average+0x42>
     184:	d8 2e       	mov	r13, r24
     186:	c0 e0       	ldi	r28, 0x00	; 0
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	8d 2d       	mov	r24, r13
     190:	0e 94 9c 00 	call	0x138	; 0x138 <analog_read>
     194:	08 0f       	add	r16, r24
     196:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     198:	8f e9       	ldi	r24, 0x9F	; 159
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <analog_get_average+0x30>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <analog_get_average+0x36>
     1a2:	00 00       	nop
     1a4:	21 96       	adiw	r28, 0x01	; 1
     1a6:	ce 15       	cp	r28, r14
     1a8:	df 05       	cpc	r29, r15
     1aa:	89 f7       	brne	.-30     	; 0x18e <analog_get_average+0x22>
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <analog_get_average+0x46>
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	c8 01       	movw	r24, r16
     1b4:	b7 01       	movw	r22, r14
     1b6:	0e 94 96 08 	call	0x112c	; 0x112c <__divmodhi4>
     1ba:	cb 01       	movw	r24, r22
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	08 95       	ret

000001cc <setup_ports>:
     1cc:	ea e0       	ldi	r30, 0x0A	; 10
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z
     1d2:	8f 63       	ori	r24, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	08 95       	ret

000001d8 <LED_check>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	eb e0       	ldi	r30, 0x0B	; 11
     1de:	f1 e0       	ldi	r31, 0x01	; 1
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	80 83       	st	Z, r24
     1e6:	8f e3       	ldi	r24, 0x3F	; 63
     1e8:	9c e9       	ldi	r25, 0x9C	; 156
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LED_check+0x12>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LED_check+0x18>
     1f0:	00 00       	nop
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	80 83       	st	Z, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	82 60       	ori	r24, 0x02	; 2
     1fc:	80 83       	st	Z, r24
     1fe:	8f e3       	ldi	r24, 0x3F	; 63
     200:	9c e9       	ldi	r25, 0x9C	; 156
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <LED_check+0x2a>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LED_check+0x30>
     208:	00 00       	nop
     20a:	80 81       	ld	r24, Z
     20c:	8d 7f       	andi	r24, 0xFD	; 253
     20e:	80 83       	st	Z, r24
     210:	80 81       	ld	r24, Z
     212:	84 60       	ori	r24, 0x04	; 4
     214:	80 83       	st	Z, r24
     216:	8f e3       	ldi	r24, 0x3F	; 63
     218:	9c e9       	ldi	r25, 0x9C	; 156
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <LED_check+0x42>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <LED_check+0x48>
     220:	00 00       	nop
     222:	80 81       	ld	r24, Z
     224:	8b 7f       	andi	r24, 0xFB	; 251
     226:	80 83       	st	Z, r24
     228:	80 81       	ld	r24, Z
     22a:	88 60       	ori	r24, 0x08	; 8
     22c:	80 83       	st	Z, r24
     22e:	8f e3       	ldi	r24, 0x3F	; 63
     230:	9c e9       	ldi	r25, 0x9C	; 156
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LED_check+0x5a>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LED_check+0x60>
     238:	00 00       	nop
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	80 83       	st	Z, r24
     240:	80 81       	ld	r24, Z
     242:	80 61       	ori	r24, 0x10	; 16
     244:	80 83       	st	Z, r24
     246:	8f e3       	ldi	r24, 0x3F	; 63
     248:	9c e9       	ldi	r25, 0x9C	; 156
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <LED_check+0x72>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <LED_check+0x78>
     250:	00 00       	nop
     252:	80 81       	ld	r24, Z
     254:	8f 7e       	andi	r24, 0xEF	; 239
     256:	80 83       	st	Z, r24
     258:	80 81       	ld	r24, Z
     25a:	80 62       	ori	r24, 0x20	; 32
     25c:	80 83       	st	Z, r24
     25e:	8f e3       	ldi	r24, 0x3F	; 63
     260:	9c e9       	ldi	r25, 0x9C	; 156
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LED_check+0x8a>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LED_check+0x90>
     268:	00 00       	nop
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	9c e9       	ldi	r25, 0x9C	; 156
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <LED_check+0x96>
     272:	00 c0       	rjmp	.+0      	; 0x274 <LED_check+0x9c>
     274:	00 00       	nop
     276:	80 81       	ld	r24, Z
     278:	8f 7d       	andi	r24, 0xDF	; 223
     27a:	80 83       	st	Z, r24
     27c:	80 81       	ld	r24, Z
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	80 83       	st	Z, r24
     282:	8f e3       	ldi	r24, 0x3F	; 63
     284:	9c e9       	ldi	r25, 0x9C	; 156
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LED_check+0xae>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LED_check+0xb4>
     28c:	00 00       	nop
     28e:	80 81       	ld	r24, Z
     290:	8f 7e       	andi	r24, 0xEF	; 239
     292:	80 83       	st	Z, r24
     294:	80 81       	ld	r24, Z
     296:	88 60       	ori	r24, 0x08	; 8
     298:	80 83       	st	Z, r24
     29a:	8f e3       	ldi	r24, 0x3F	; 63
     29c:	9c e9       	ldi	r25, 0x9C	; 156
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <LED_check+0xc6>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LED_check+0xcc>
     2a4:	00 00       	nop
     2a6:	80 81       	ld	r24, Z
     2a8:	87 7f       	andi	r24, 0xF7	; 247
     2aa:	80 83       	st	Z, r24
     2ac:	80 81       	ld	r24, Z
     2ae:	84 60       	ori	r24, 0x04	; 4
     2b0:	80 83       	st	Z, r24
     2b2:	8f e3       	ldi	r24, 0x3F	; 63
     2b4:	9c e9       	ldi	r25, 0x9C	; 156
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LED_check+0xde>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LED_check+0xe4>
     2bc:	00 00       	nop
     2be:	80 81       	ld	r24, Z
     2c0:	8b 7f       	andi	r24, 0xFB	; 251
     2c2:	80 83       	st	Z, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	82 60       	ori	r24, 0x02	; 2
     2c8:	80 83       	st	Z, r24
     2ca:	8f e3       	ldi	r24, 0x3F	; 63
     2cc:	9c e9       	ldi	r25, 0x9C	; 156
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <LED_check+0xf6>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LED_check+0xfc>
     2d4:	00 00       	nop
     2d6:	80 81       	ld	r24, Z
     2d8:	8d 7f       	andi	r24, 0xFD	; 253
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	80 83       	st	Z, r24
     2e2:	8f e3       	ldi	r24, 0x3F	; 63
     2e4:	9c e9       	ldi	r25, 0x9C	; 156
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LED_check+0x10e>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LED_check+0x114>
     2ec:	00 00       	nop
     2ee:	80 81       	ld	r24, Z
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	80 83       	st	Z, r24
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	31 09       	sbc	r19, r1
     2f8:	09 f0       	breq	.+2      	; 0x2fc <LED_check+0x124>
     2fa:	72 cf       	rjmp	.-284    	; 0x1e0 <LED_check+0x8>
     2fc:	08 95       	ret

000002fe <data_to_port>:
     2fe:	80 ff       	sbrs	r24, 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <data_to_port+0x8>
     302:	43 9a       	sbi	0x08, 3	; 8
     304:	01 c0       	rjmp	.+2      	; 0x308 <data_to_port+0xa>
     306:	43 98       	cbi	0x08, 3	; 8
     308:	81 ff       	sbrs	r24, 1
     30a:	02 c0       	rjmp	.+4      	; 0x310 <data_to_port+0x12>
     30c:	44 9a       	sbi	0x08, 4	; 8
     30e:	01 c0       	rjmp	.+2      	; 0x312 <data_to_port+0x14>
     310:	44 98       	cbi	0x08, 4	; 8
     312:	82 ff       	sbrs	r24, 2
     314:	02 c0       	rjmp	.+4      	; 0x31a <data_to_port+0x1c>
     316:	45 9a       	sbi	0x08, 5	; 8
     318:	01 c0       	rjmp	.+2      	; 0x31c <data_to_port+0x1e>
     31a:	45 98       	cbi	0x08, 5	; 8
     31c:	83 ff       	sbrs	r24, 3
     31e:	02 c0       	rjmp	.+4      	; 0x324 <data_to_port+0x26>
     320:	46 9a       	sbi	0x08, 6	; 8
     322:	01 c0       	rjmp	.+2      	; 0x326 <data_to_port+0x28>
     324:	46 98       	cbi	0x08, 6	; 8
     326:	84 ff       	sbrs	r24, 4
     328:	02 c0       	rjmp	.+4      	; 0x32e <data_to_port+0x30>
     32a:	47 9a       	sbi	0x08, 7	; 8
     32c:	01 c0       	rjmp	.+2      	; 0x330 <data_to_port+0x32>
     32e:	47 98       	cbi	0x08, 7	; 8
     330:	85 ff       	sbrs	r24, 5
     332:	02 c0       	rjmp	.+4      	; 0x338 <data_to_port+0x3a>
     334:	a0 9a       	sbi	0x14, 0	; 20
     336:	01 c0       	rjmp	.+2      	; 0x33a <data_to_port+0x3c>
     338:	a0 98       	cbi	0x14, 0	; 20
     33a:	86 ff       	sbrs	r24, 6
     33c:	02 c0       	rjmp	.+4      	; 0x342 <data_to_port+0x44>
     33e:	a1 9a       	sbi	0x14, 1	; 20
     340:	01 c0       	rjmp	.+2      	; 0x344 <data_to_port+0x46>
     342:	a1 98       	cbi	0x14, 1	; 20
     344:	88 23       	and	r24, r24
     346:	14 f4       	brge	.+4      	; 0x34c <data_to_port+0x4e>
     348:	5f 9a       	sbi	0x0b, 7	; 11
     34a:	08 95       	ret
     34c:	5f 98       	cbi	0x0b, 7	; 11
     34e:	08 95       	ret

00000350 <lcd_send_cmd>:
     350:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>
     354:	42 98       	cbi	0x08, 2	; 8
     356:	41 98       	cbi	0x08, 1	; 8
     358:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35a:	8f e8       	ldi	r24, 0x8F	; 143
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <lcd_send_cmd+0xe>
     362:	00 c0       	rjmp	.+0      	; 0x364 <lcd_send_cmd+0x14>
     364:	00 00       	nop
     366:	40 98       	cbi	0x08, 0	; 8
     368:	08 95       	ret

0000036a <setup_lcd>:
     36a:	87 b1       	in	r24, 0x07	; 7
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	87 b9       	out	0x07, r24	; 7
     370:	83 b3       	in	r24, 0x13	; 19
     372:	83 60       	ori	r24, 0x03	; 3
     374:	83 bb       	out	0x13, r24	; 19
     376:	57 9a       	sbi	0x0a, 7	; 10
     378:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	2f ef       	ldi	r18, 0xFF	; 255
     37c:	83 ed       	ldi	r24, 0xD3	; 211
     37e:	90 e3       	ldi	r25, 0x30	; 48
     380:	21 50       	subi	r18, 0x01	; 1
     382:	80 40       	sbci	r24, 0x00	; 0
     384:	90 40       	sbci	r25, 0x00	; 0
     386:	e1 f7       	brne	.-8      	; 0x380 <setup_lcd+0x16>
     388:	00 c0       	rjmp	.+0      	; 0x38a <setup_lcd+0x20>
     38a:	00 00       	nop
     38c:	80 e3       	ldi	r24, 0x30	; 48
     38e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     392:	8f e3       	ldi	r24, 0x3F	; 63
     394:	9c e9       	ldi	r25, 0x9C	; 156
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <setup_lcd+0x2c>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <setup_lcd+0x32>
     39c:	00 00       	nop
     39e:	88 e3       	ldi	r24, 0x38	; 56
     3a0:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3aa:	8c e0       	ldi	r24, 0x0C	; 12
     3ac:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3bc:	08 95       	ret

000003be <lcd_send_data>:
     3be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>
     3c2:	42 9a       	sbi	0x08, 2	; 8
     3c4:	41 98       	cbi	0x08, 1	; 8
     3c6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c8:	8f e8       	ldi	r24, 0x8F	; 143
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_send_data+0xe>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_send_data+0x14>
     3d2:	00 00       	nop
     3d4:	40 98       	cbi	0x08, 0	; 8
     3d6:	08 95       	ret

000003d8 <lcd_set_cursor>:
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	00 d0       	rcall	.+0      	; 0x3de <lcd_set_cursor+0x6>
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	90 e8       	ldi	r25, 0x80	; 128
     3e4:	99 83       	std	Y+1, r25	; 0x01
     3e6:	90 ec       	ldi	r25, 0xC0	; 192
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	fe 01       	movw	r30, r28
     3ec:	e8 0f       	add	r30, r24
     3ee:	f1 1d       	adc	r31, r1
     3f0:	61 50       	subi	r22, 0x01	; 1
     3f2:	80 81       	ld	r24, Z
     3f4:	86 0f       	add	r24, r22
     3f6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     3fa:	8f e8       	ldi	r24, 0x8F	; 143
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_set_cursor+0x26>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	00 00       	nop
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <lcd_print>:
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	fc 01       	movw	r30, r24
     418:	80 81       	ld	r24, Z
     41a:	88 23       	and	r24, r24
     41c:	59 f0       	breq	.+22     	; 0x434 <lcd_print+0x24>
     41e:	8f 01       	movw	r16, r30
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_send_data>
     426:	cf 5f       	subi	r28, 0xFF	; 255
     428:	f8 01       	movw	r30, r16
     42a:	ec 0f       	add	r30, r28
     42c:	f1 1d       	adc	r31, r1
     42e:	80 81       	ld	r24, Z
     430:	81 11       	cpse	r24, r1
     432:	f7 cf       	rjmp	.-18     	; 0x422 <lcd_print+0x12>
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <lcd_print_int>:
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	60 97       	sbiw	r28, 0x10	; 16
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	fc 01       	movw	r30, r24
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	41 f0       	breq	.+16     	; 0x466 <lcd_print_int+0x2a>
     456:	2a e0       	ldi	r18, 0x0A	; 10
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	b9 01       	movw	r22, r18
     45c:	0e 94 96 08 	call	0x112c	; 0x112c <__divmodhi4>
     460:	cb 01       	movw	r24, r22
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	d1 f7       	brne	.-12     	; 0x45a <lcd_print_int+0x1e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     466:	4a e0       	ldi	r20, 0x0A	; 10
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	cf 01       	movw	r24, r30
     470:	0e 94 be 08 	call	0x117c	; 0x117c <__itoa_ncheck>
     474:	ce 01       	movw	r24, r28
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     47c:	60 96       	adiw	r28, 0x10	; 16
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <js_mtr_scaling>:

//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& JOYSTICK SCALING &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
int js_mtr_scaling(int value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
     48e:	bc 01       	movw	r22, r24
     490:	99 0f       	add	r25, r25
     492:	88 0b       	sbc	r24, r24
     494:	99 0b       	sbc	r25, r25
     496:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     49a:	2c ee       	ldi	r18, 0xEC	; 236
     49c:	31 e5       	ldi	r19, 0x51	; 81
     49e:	48 eb       	ldi	r20, 0xB8	; 184
     4a0:	5f e3       	ldi	r21, 0x3F	; 63
     4a2:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 ee       	ldi	r20, 0xE0	; 224
     4ac:	50 e4       	ldi	r21, 0x40	; 64
     4ae:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__subsf3>
     4b2:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fixsfsi>
     4b6:	ab 01       	movw	r20, r22

	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
     4b8:	9b 01       	movw	r18, r22
     4ba:	2d 5c       	subi	r18, 0xCD	; 205
     4bc:	31 40       	sbci	r19, 0x01	; 1
     4be:	29 35       	cpi	r18, 0x59	; 89
     4c0:	31 05       	cpc	r19, r1
     4c2:	c8 f0       	brcs	.+50     	; 0x4f6 <js_mtr_scaling+0x68>
	value = 0;
	else if (value > DEADBAND_MAX)            // if joystick is higher than deadband
     4c4:	67 32       	cpi	r22, 0x27	; 39
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	72 07       	cpc	r23, r18
     4ca:	2c f0       	brlt	.+10     	; 0x4d6 <js_mtr_scaling+0x48>
	value = 2 * (value - NEUTRAL_CMD);    // compute the change from the neutral position multiply by 2 to scale to 1000
     4cc:	4d 5e       	subi	r20, 0xED	; 237
     4ce:	51 40       	sbci	r21, 0x01	; 1
     4d0:	44 0f       	add	r20, r20
     4d2:	55 1f       	adc	r21, r21
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <js_mtr_scaling+0x6c>
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
     4d6:	6c 3c       	cpi	r22, 0xCC	; 204
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	72 07       	cpc	r23, r18
     4dc:	74 f4       	brge	.+28     	; 0x4fa <js_mtr_scaling+0x6c>
	value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
     4de:	2d ee       	ldi	r18, 0xED	; 237
     4e0:	31 e0       	ldi	r19, 0x01	; 1
     4e2:	c9 01       	movw	r24, r18
     4e4:	86 1b       	sub	r24, r22
     4e6:	97 0b       	sbc	r25, r23
     4e8:	91 95       	neg	r25
     4ea:	81 95       	neg	r24
     4ec:	91 09       	sbc	r25, r1
     4ee:	ac 01       	movw	r20, r24
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <js_mtr_scaling+0x6c>
int js_mtr_scaling(int value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000

	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
	value = 0;
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
	value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
	if (value > 1000)                         // do not send any value bigger than 1000 or smaller than -1000
	value = 1000;

	return value;
     4fa:	ca 01       	movw	r24, r20
     4fc:	49 3e       	cpi	r20, 0xE9	; 233
     4fe:	53 40       	sbci	r21, 0x03	; 3
     500:	14 f0       	brlt	.+4      	; 0x506 <js_mtr_scaling+0x78>
     502:	88 ee       	ldi	r24, 0xE8	; 232
     504:	93 e0       	ldi	r25, 0x03	; 3
} // end of joystick_scaling
     506:	08 95       	ret

00000508 <js_srv_scaling>:
int js_srv_scaling(float value) // scales the result to commands from -1000 to 1000.
{
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
     510:	2c ee       	ldi	r18, 0xEC	; 236
     512:	31 e5       	ldi	r19, 0x51	; 81
     514:	48 eb       	ldi	r20, 0xB8	; 184
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 ee       	ldi	r20, 0xE0	; 224
     522:	50 e4       	ldi	r21, 0x40	; 64
     524:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__subsf3>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e8       	ldi	r19, 0x80	; 128
     530:	49 e0       	ldi	r20, 0x09	; 9
     532:	54 e4       	ldi	r21, 0x44	; 68
     534:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__cmpsf2>
     538:	88 23       	and	r24, r24
     53a:	5c f4       	brge	.+22     	; 0x552 <js_srv_scaling+0x4a>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	46 ee       	ldi	r20, 0xE6	; 230
     542:	53 e4       	ldi	r21, 0x43	; 67
     544:	c7 01       	movw	r24, r14
     546:	b6 01       	movw	r22, r12
     548:	0e 94 24 08 	call	0x1048	; 0x1048 <__gesf2>
     54c:	18 16       	cp	r1, r24
     54e:	0c f4       	brge	.+2      	; 0x552 <js_srv_scaling+0x4a>
     550:	5c c0       	rjmp	.+184    	; 0x60a <js_srv_scaling+0x102>
	value = 0;
	else if (value > DEADBAND_MAX)            // if joystick is higher than deadband
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e8       	ldi	r19, 0x80	; 128
     556:	49 e0       	ldi	r20, 0x09	; 9
     558:	54 e4       	ldi	r21, 0x44	; 68
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	0e 94 24 08 	call	0x1048	; 0x1048 <__gesf2>
     562:	18 16       	cp	r1, r24
     564:	ac f4       	brge	.+42     	; 0x590 <js_srv_scaling+0x88>
	{
		value = 2 * (value - NEUTRAL_CMD);    // compute the change from the neutral position multiply by 2 to scale to 1000
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e8       	ldi	r19, 0x80	; 128
     56a:	46 ef       	ldi	r20, 0xF6	; 246
     56c:	53 e4       	ldi	r21, 0x43	; 67
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__subsf3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__addsf3>
		value = value  / 22.2; // scale to -45 45
     57e:	2a e9       	ldi	r18, 0x9A	; 154
     580:	39 e9       	ldi	r19, 0x99	; 153
     582:	41 eb       	ldi	r20, 0xB1	; 177
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 ca 06 	call	0xd94	; 0xd94 <__divsf3>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	20 c0       	rjmp	.+64     	; 0x5d0 <js_srv_scaling+0xc8>
	}
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	46 ee       	ldi	r20, 0xE6	; 230
     596:	53 e4       	ldi	r21, 0x43	; 67
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__cmpsf2>
     5a0:	88 23       	and	r24, r24
     5a2:	b4 f4       	brge	.+44     	; 0x5d0 <js_srv_scaling+0xc8>
	{
		value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
     5a4:	a7 01       	movw	r20, r14
     5a6:	96 01       	movw	r18, r12
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e8       	ldi	r23, 0x80	; 128
     5ac:	86 ef       	ldi	r24, 0xF6	; 246
     5ae:	93 e4       	ldi	r25, 0x43	; 67
     5b0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__subsf3>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 ec       	ldi	r21, 0xC0	; 192
     5bc:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
		value = value  / 22.2; // scale to -45 45
     5c0:	2a e9       	ldi	r18, 0x9A	; 154
     5c2:	39 e9       	ldi	r19, 0x99	; 153
     5c4:	41 eb       	ldi	r20, 0xB1	; 177
     5c6:	51 e4       	ldi	r21, 0x41	; 65
     5c8:	0e 94 ca 06 	call	0xd94	; 0xd94 <__divsf3>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
	}
	if (value > 1000)                         // do not send any value bigger than 1000 
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4a e7       	ldi	r20, 0x7A	; 122
     5d6:	54 e4       	ldi	r21, 0x44	; 68
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 24 08 	call	0x1048	; 0x1048 <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	bc f0       	brlt	.+46     	; 0x612 <js_srv_scaling+0x10a>
	value = 1000;
	if (value < -1000)                        // do not send any value smaller than -1000
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	4a e7       	ldi	r20, 0x7A	; 122
     5ea:	54 ec       	ldi	r21, 0xC4	; 196
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__cmpsf2>
     5f4:	88 23       	and	r24, r24
     5f6:	ac f4       	brge	.+42     	; 0x622 <js_srv_scaling+0x11a>
	value = -1000;
     5f8:	0f 2e       	mov	r0, r31
     5fa:	c1 2c       	mov	r12, r1
     5fc:	d1 2c       	mov	r13, r1
     5fe:	fa e7       	ldi	r31, 0x7A	; 122
     600:	ef 2e       	mov	r14, r31
     602:	f4 ec       	ldi	r31, 0xC4	; 196
     604:	ff 2e       	mov	r15, r31
     606:	f0 2d       	mov	r31, r0
     608:	0c c0       	rjmp	.+24     	; 0x622 <js_srv_scaling+0x11a>
} // end of joystick_scaling
int js_srv_scaling(float value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
	value = 0;
     60a:	c1 2c       	mov	r12, r1
     60c:	d1 2c       	mov	r13, r1
     60e:	76 01       	movw	r14, r12
     610:	08 c0       	rjmp	.+16     	; 0x622 <js_srv_scaling+0x11a>
	{
		value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
		value = value  / 22.2; // scale to -45 45
	}
	if (value > 1000)                         // do not send any value bigger than 1000 
	value = 1000;
     612:	0f 2e       	mov	r0, r31
     614:	c1 2c       	mov	r12, r1
     616:	d1 2c       	mov	r13, r1
     618:	fa e7       	ldi	r31, 0x7A	; 122
     61a:	ef 2e       	mov	r14, r31
     61c:	f4 e4       	ldi	r31, 0x44	; 68
     61e:	ff 2e       	mov	r15, r31
     620:	f0 2d       	mov	r31, r0
	value = -1000;
	

	

	return value;
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fixsfsi>
} // end of joystick_scaling
     62a:	cb 01       	movw	r24, r22
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <setup_TMR1>:

//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& TIMER 1 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_TMR1()
{
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode
     636:	e1 e8       	ldi	r30, 0x81	; 129
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	84 60       	ori	r24, 0x04	; 4
     63e:	80 83       	st	Z, r24
     640:	08 95       	ret

00000642 <main>:

uint16_t loop_delay_counter = 0;

int main(void)
{
	setup_ports();
     642:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setup_ports>
	setup_TMR1();
     646:	0e 94 1b 03 	call	0x636	; 0x636 <setup_TMR1>
	setup_lcd();
     64a:	0e 94 b5 01 	call	0x36a	; 0x36a <setup_lcd>
	setup_adc();
     64e:	0e 94 91 00 	call	0x122	; 0x122 <setup_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     652:	8f e3       	ldi	r24, 0x3F	; 63
     654:	9c e9       	ldi	r25, 0x9C	; 156
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <main+0x14>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x1a>
     65c:	00 00       	nop
	_delay_ms(10);
	lcd_set_cursor(1,1);
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("Initializing...");
     666:	8a e0       	ldi	r24, 0x0A	; 10
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
     66e:	ef ed       	ldi	r30, 0xDF	; 223
     670:	fe e2       	ldi	r31, 0x2E	; 46
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <main+0x30>
     676:	00 c0       	rjmp	.+0      	; 0x678 <main+0x36>
     678:	00 00       	nop
	_delay_ms(3);
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <setup_usart0>
	mirf_init();	
     680:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <mirf_init>
	lcd_send_cmd(CLEAR_DISPLAY);
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	
	LED_check();
     68a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LED_check>
	
	sei(); // enable global interrupts
     68e:	78 94       	sei
	
	mirf_config();
     690:	0e 94 3c 05 	call	0xa78	; 0xa78 <mirf_config>
	
	 /* Set the device addresses */
	mirf_set_TADDR(tx_address);
     694:	85 e0       	ldi	r24, 0x05	; 5
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	0e 94 ac 05 	call	0xb58	; 0xb58 <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	0e 94 a4 05 	call	0xb48	; 0xb48 <mirf_set_RADDR>
     6a4:	8f e3       	ldi	r24, 0x3F	; 63
     6a6:	9c e9       	ldi	r25, 0x9C	; 156
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <main+0x66>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0x6c>
     6ae:	00 00       	nop
	
	_delay_ms(10);
	
	println_0("System initialized...;");
     6b0:	8a e1       	ldi	r24, 0x1A	; 26
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <println_0>
	
	lcd_send_cmd(CLEAR_DISPLAY);
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
     6be:	ef ed       	ldi	r30, 0xDF	; 223
     6c0:	fe e2       	ldi	r31, 0x2E	; 46
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <main+0x80>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x86>
     6c8:	00 00       	nop
	_delay_ms(3);

	lcd_set_cursor(1,1);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("mtr:  ");
     6d2:	81 e3       	ldi	r24, 0x31	; 49
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	
	lcd_set_cursor(2,1);
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("srv: ");
     6e2:	88 e3       	ldi	r24, 0x38	; 56
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	
	lcd_set_cursor(1,11);
     6ea:	6b e0       	ldi	r22, 0x0B	; 11
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("RF: ");
     6f2:	8e e3       	ldi	r24, 0x3E	; 62
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	
	lcd_set_cursor(2,12);
     6fa:	6c e0       	ldi	r22, 0x0C	; 12
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("T: ");
     702:	83 e4       	ldi	r24, 0x43	; 67
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
			mirf_config();
		}
		
		loop_delay_counter++;
		
		TOGGLE_LED1;
     70a:	0f 2e       	mov	r0, r31
     70c:	fb e0       	ldi	r31, 0x0B	; 11
     70e:	ef 2e       	mov	r14, r31
     710:	ff 24       	eor	r15, r15
     712:	f3 94       	inc	r15
     714:	f0 2d       	mov	r31, r0
     716:	11 e0       	ldi	r17, 0x01	; 1
		{
			mtr_cmd = analog_get_average(JOYSTICK2_Y, 5);
			mtr_cmd = .75 * mtr_cmd + .25 * old_mtr_cmd;
			old_mtr_cmd = mtr_cmd;
			mtr_cmd = js_mtr_scaling(mtr_cmd); 
			buffer[0] = (mtr_cmd >> 8); // MSB
     718:	0f 2e       	mov	r0, r31
     71a:	f9 e5       	ldi	r31, 0x59	; 89
     71c:	cf 2e       	mov	r12, r31
     71e:	f2 e0       	ldi	r31, 0x02	; 2
     720:	df 2e       	mov	r13, r31
     722:	f0 2d       	mov	r31, r0
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
			buffer[2] = srv_cmd;
     724:	0f 2e       	mov	r0, r31
     726:	f1 e5       	ldi	r31, 0x51	; 81
     728:	8f 2e       	mov	r8, r31
     72a:	f2 e0       	ldi	r31, 0x02	; 2
     72c:	9f 2e       	mov	r9, r31
     72e:	f0 2d       	mov	r31, r0
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     730:	c4 e8       	ldi	r28, 0x84	; 132
     732:	d0 e0       	ldi	r29, 0x00	; 0
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
				{
					comm_lost_count++;
					TOGGLE_LED3;
     734:	68 94       	set
     736:	33 24       	eor	r3, r3
     738:	32 f8       	bld	r3, 2

	
		if (loop_delay_counter > 25)
		{
			loop_delay_counter = 0;
			buffer[0] = 'T';
     73a:	04 e5       	ldi	r16, 0x54	; 84
				{
					if (TCNT1 > 3000) // timeout of one second
					{
						//comm_lost = 1;
						comm_lost_count++;
						TOGGLE_LED6;
     73c:	68 94       	set
     73e:	22 24       	eor	r2, r2
     740:	25 f8       	bld	r2, 5
	lcd_set_cursor(2,12);
	lcd_print("T: ");

    while (1) 
    {
		if (comm_lost_count > 50)
     742:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <comm_lost_count>
     746:	83 33       	cpi	r24, 0x33	; 51
     748:	20 f0       	brcs	.+8      	; 0x752 <main+0x110>
		{
			comm_lost_count = 0;
     74a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <comm_lost_count>
			mirf_config();
     74e:	0e 94 3c 05 	call	0xa78	; 0xa78 <mirf_config>
		}
		
		loop_delay_counter++;
     752:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end>
     756:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__data_end+0x1>
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <__data_end+0x1>
     760:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end>
		
		TOGGLE_LED1;
     764:	f7 01       	movw	r30, r14
     766:	80 81       	ld	r24, Z
     768:	81 27       	eor	r24, r17
     76a:	80 83       	st	Z, r24
		lcd_set_cursor(1,5);
     76c:	65 e0       	ldi	r22, 0x05	; 5
     76e:	81 2f       	mov	r24, r17
     770:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(mtr_cmd);
     774:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mtr_cmd>
     778:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <mtr_cmd+0x1>
     77c:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_print("   ");
     780:	87 e4       	ldi	r24, 0x47	; 71
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
		lcd_set_cursor(2,5);
     788:	65 e0       	ldi	r22, 0x05	; 5
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(srv_cmd);
     790:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <srv_cmd>
     794:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <srv_cmd+0x1>
     798:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_print("   ");
     79c:	87 e4       	ldi	r24, 0x47	; 71
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
		lcd_set_cursor(1,15);
     7a4:	6f e0       	ldi	r22, 0x0F	; 15
     7a6:	81 2f       	mov	r24, r17
     7a8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(comm_lost_count);
     7ac:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <comm_lost_count>
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_print(" ");
     7b6:	89 e4       	ldi	r24, 0x49	; 73
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
		lcd_set_cursor(2,14);
     7be:	6e e0       	ldi	r22, 0x0E	; 14
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(temperature);
     7c6:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <temperature>
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>

	
		if (loop_delay_counter > 25)
     7d0:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end>
     7d4:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__data_end+0x1>
     7d8:	4a 97       	sbiw	r24, 0x1a	; 26
     7da:	08 f4       	brcc	.+2      	; 0x7de <main+0x19c>
     7dc:	50 c0       	rjmp	.+160    	; 0x87e <main+0x23c>
		{
			loop_delay_counter = 0;
     7de:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <__data_end+0x1>
     7e2:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <__data_end>
			buffer[0] = 'T';
     7e6:	f6 01       	movw	r30, r12
     7e8:	00 83       	st	Z, r16
			mirf_send(buffer, mirf_PAYLOAD);
     7ea:	63 e0       	ldi	r22, 0x03	; 3
     7ec:	c6 01       	movw	r24, r12
     7ee:	0e 94 bc 05 	call	0xb78	; 0xb78 <mirf_send>
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     7f2:	19 82       	std	Y+1, r1	; 0x01
     7f4:	18 82       	st	Y, r1
     7f6:	11 c0       	rjmp	.+34     	; 0x81a <main+0x1d8>
			buffer[0] = 'T';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     7f8:	88 81       	ld	r24, Y
     7fa:	99 81       	ldd	r25, Y+1	; 0x01
     7fc:	89 3b       	cpi	r24, 0xB9	; 185
     7fe:	9b 40       	sbci	r25, 0x0B	; 11
     800:	60 f0       	brcs	.+24     	; 0x81a <main+0x1d8>
				{
					comm_lost = 1;
     802:	10 93 50 02 	sts	0x0250, r17	; 0x800250 <comm_lost>
					comm_lost_count++;
     806:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <comm_lost_count>
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <comm_lost_count>
					TOGGLE_LED3;
     810:	f7 01       	movw	r30, r14
     812:	80 81       	ld	r24, Z
     814:	83 25       	eor	r24, r3
     816:	80 83       	st	Z, r24
					break;
     818:	04 c0       	rjmp	.+8      	; 0x822 <main+0x1e0>
		{
			loop_delay_counter = 0;
			buffer[0] = 'T';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
     81a:	0e 94 17 05 	call	0xa2e	; 0xa2e <mirf_data_sent>
     81e:	88 23       	and	r24, r24
     820:	59 f3       	breq	.-42     	; 0x7f8 <main+0x1b6>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     822:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <comm_lost>
     826:	81 11       	cpse	r24, r1
     828:	27 c0       	rjmp	.+78     	; 0x878 <main+0x236>
			{
				set_RX_MODE();
     82a:	0e 94 2b 05 	call	0xa56	; 0xa56 <set_RX_MODE>
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     82e:	19 82       	std	Y+1, r1	; 0x01
     830:	18 82       	st	Y, r1
     832:	0f c0       	rjmp	.+30     	; 0x852 <main+0x210>
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
				{
					if (TCNT1 > 3000) // timeout of one second
     834:	88 81       	ld	r24, Y
     836:	99 81       	ldd	r25, Y+1	; 0x01
     838:	89 3b       	cpi	r24, 0xB9	; 185
     83a:	9b 40       	sbci	r25, 0x0B	; 11
     83c:	50 f0       	brcs	.+20     	; 0x852 <main+0x210>
					{
						//comm_lost = 1;
						comm_lost_count++;
     83e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <comm_lost_count>
     842:	8f 5f       	subi	r24, 0xFF	; 255
     844:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <comm_lost_count>
						TOGGLE_LED6;
     848:	f7 01       	movw	r30, r14
     84a:	80 81       	ld	r24, Z
     84c:	82 25       	eor	r24, r2
     84e:	80 83       	st	Z, r24
						break;
     850:	04 c0       	rjmp	.+8      	; 0x85a <main+0x218>
			}
			if (!comm_lost)
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
     852:	0e 94 0a 05 	call	0xa14	; 0xa14 <mirf_data_ready>
     856:	88 23       	and	r24, r24
     858:	69 f3       	breq	.-38     	; 0x834 <main+0x1f2>
						comm_lost_count++;
						TOGGLE_LED6;
						break;
					}
				}
				if (!comm_lost)
     85a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <comm_lost>
     85e:	81 11       	cpse	r24, r1
     860:	08 c0       	rjmp	.+16     	; 0x872 <main+0x230>
				{
					mirf_get_data(buffer); // get the data, put it in buffer
     862:	c6 01       	movw	r24, r12
     864:	0e 94 7d 05 	call	0xafa	; 0xafa <mirf_get_data>
					temperature = buffer[0];
     868:	f6 01       	movw	r30, r12
     86a:	80 81       	ld	r24, Z
     86c:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <temperature>
     870:	bc c0       	rjmp	.+376    	; 0x9ea <main+0x3a8>
					//println_int_0(temperature);
					
				}
				else
					comm_lost = 0;
     872:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <comm_lost>
     876:	b9 c0       	rjmp	.+370    	; 0x9ea <main+0x3a8>
			}
			else
			{
				comm_lost = 0;
     878:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <comm_lost>
     87c:	b6 c0       	rjmp	.+364    	; 0x9ea <main+0x3a8>
			}
		}
		else 
		{
			mtr_cmd = analog_get_average(JOYSTICK2_Y, 5);
     87e:	65 e0       	ldi	r22, 0x05	; 5
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     886:	5c 01       	movw	r10, r24
			mtr_cmd = .75 * mtr_cmd + .25 * old_mtr_cmd;
     888:	60 91 55 02 	lds	r22, 0x0255	; 0x800255 <old_mtr_cmd>
     88c:	70 91 56 02 	lds	r23, 0x0256	; 0x800256 <old_mtr_cmd+0x1>
     890:	07 2e       	mov	r0, r23
     892:	00 0c       	add	r0, r0
     894:	88 0b       	sbc	r24, r24
     896:	99 0b       	sbc	r25, r25
     898:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	5e e3       	ldi	r21, 0x3E	; 62
     8a4:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     8a8:	2b 01       	movw	r4, r22
     8aa:	3c 01       	movw	r6, r24
     8ac:	b5 01       	movw	r22, r10
     8ae:	bb 0c       	add	r11, r11
     8b0:	88 0b       	sbc	r24, r24
     8b2:	99 0b       	sbc	r25, r25
     8b4:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e4       	ldi	r20, 0x40	; 64
     8be:	5f e3       	ldi	r21, 0x3F	; 63
     8c0:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	c3 01       	movw	r24, r6
     8ca:	b2 01       	movw	r22, r4
     8cc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__addsf3>
     8d0:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fixsfsi>
			old_mtr_cmd = mtr_cmd;
     8d4:	70 93 56 02 	sts	0x0256, r23	; 0x800256 <old_mtr_cmd+0x1>
     8d8:	60 93 55 02 	sts	0x0255, r22	; 0x800255 <old_mtr_cmd>
			mtr_cmd = js_mtr_scaling(mtr_cmd); 
     8dc:	cb 01       	movw	r24, r22
     8de:	0e 94 47 02 	call	0x48e	; 0x48e <js_mtr_scaling>
     8e2:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mtr_cmd>
     8e6:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <mtr_cmd+0x1>
			buffer[0] = (mtr_cmd >> 8); // MSB
     8ea:	f6 01       	movw	r30, r12
     8ec:	90 83       	st	Z, r25
			buffer[1] = mtr_cmd; // LSB
     8ee:	81 83       	std	Z+1, r24	; 0x01
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
     8f0:	65 e0       	ldi	r22, 0x05	; 5
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     8f8:	5c 01       	movw	r10, r24
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
     8fa:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <old_srv_cmd>
     8fe:	70 91 54 02 	lds	r23, 0x0254	; 0x800254 <old_srv_cmd+0x1>
     902:	07 2e       	mov	r0, r23
     904:	00 0c       	add	r0, r0
     906:	88 0b       	sbc	r24, r24
     908:	99 0b       	sbc	r25, r25
     90a:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e8       	ldi	r20, 0x80	; 128
     914:	5e e3       	ldi	r21, 0x3E	; 62
     916:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     91a:	2b 01       	movw	r4, r22
     91c:	3c 01       	movw	r6, r24
     91e:	b5 01       	movw	r22, r10
     920:	bb 0c       	add	r11, r11
     922:	88 0b       	sbc	r24, r24
     924:	99 0b       	sbc	r25, r25
     926:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e4       	ldi	r20, 0x40	; 64
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c3 01       	movw	r24, r6
     93c:	b2 01       	movw	r22, r4
     93e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__addsf3>
     942:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fixsfsi>
			old_srv_cmd = srv_cmd;
     946:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <old_srv_cmd+0x1>
     94a:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <old_srv_cmd>
			srv_cmd = js_srv_scaling(srv_cmd);
     94e:	07 2e       	mov	r0, r23
     950:	00 0c       	add	r0, r0
     952:	88 0b       	sbc	r24, r24
     954:	99 0b       	sbc	r25, r25
     956:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     95a:	0e 94 84 02 	call	0x508	; 0x508 <js_srv_scaling>
			if ((srv_cmd < 5) && (srv_cmd > -5))
     95e:	9c 01       	movw	r18, r24
     960:	2c 5f       	subi	r18, 0xFC	; 252
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	29 30       	cpi	r18, 0x09	; 9
     966:	31 05       	cpc	r19, r1
     968:	28 f4       	brcc	.+10     	; 0x974 <main+0x332>
				srv_cmd = 0;
     96a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <srv_cmd+0x1>
     96e:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <srv_cmd>
     972:	19 c0       	rjmp	.+50     	; 0x9a6 <main+0x364>
			else if (srv_cmd > 45)
     974:	8e 32       	cpi	r24, 0x2E	; 46
     976:	91 05       	cpc	r25, r1
     978:	3c f0       	brlt	.+14     	; 0x988 <main+0x346>
				srv_cmd = 45;
     97a:	8d e2       	ldi	r24, 0x2D	; 45
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <srv_cmd+0x1>
     982:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <srv_cmd>
     986:	0f c0       	rjmp	.+30     	; 0x9a6 <main+0x364>
			else if (srv_cmd < -45)
     988:	83 3d       	cpi	r24, 0xD3	; 211
     98a:	ef ef       	ldi	r30, 0xFF	; 255
     98c:	9e 07       	cpc	r25, r30
     98e:	2c f0       	brlt	.+10     	; 0x99a <main+0x358>
			buffer[1] = mtr_cmd; // LSB
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
			old_srv_cmd = srv_cmd;
			srv_cmd = js_srv_scaling(srv_cmd);
     990:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <srv_cmd+0x1>
     994:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <srv_cmd>
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <main+0x364>
			if ((srv_cmd < 5) && (srv_cmd > -5))
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
     99a:	83 ed       	ldi	r24, 0xD3	; 211
     99c:	9f ef       	ldi	r25, 0xFF	; 255
     99e:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <srv_cmd+0x1>
     9a2:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <srv_cmd>
			buffer[2] = srv_cmd;
     9a6:	f4 01       	movw	r30, r8
     9a8:	80 81       	ld	r24, Z
     9aa:	f6 01       	movw	r30, r12
     9ac:	82 83       	std	Z+2, r24	; 0x02

			mirf_send(buffer, mirf_PAYLOAD);
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	c6 01       	movw	r24, r12
     9b2:	0e 94 bc 05 	call	0xb78	; 0xb78 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b6:	f5 e3       	ldi	r31, 0x35	; 53
     9b8:	fa 95       	dec	r31
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <main+0x376>
     9bc:	00 00       	nop
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode

}
void reset_TMR1()
{
	TCNT1 = 0;
     9be:	19 82       	std	Y+1, r1	; 0x01
     9c0:	18 82       	st	Y, r1
     9c2:	0f c0       	rjmp	.+30     	; 0x9e2 <main+0x3a0>
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     9c4:	88 81       	ld	r24, Y
     9c6:	99 81       	ldd	r25, Y+1	; 0x01
     9c8:	89 3b       	cpi	r24, 0xB9	; 185
     9ca:	9b 40       	sbci	r25, 0x0B	; 11
     9cc:	50 f0       	brcs	.+20     	; 0x9e2 <main+0x3a0>
				{
					comm_lost_count++;
     9ce:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <comm_lost_count>
     9d2:	8f 5f       	subi	r24, 0xFF	; 255
     9d4:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <comm_lost_count>
					TOGGLE_LED3;
     9d8:	f7 01       	movw	r30, r14
     9da:	80 81       	ld	r24, Z
     9dc:	83 25       	eor	r24, r3
     9de:	80 83       	st	Z, r24
					break;
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <main+0x3a8>
			buffer[2] = srv_cmd;

			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
     9e2:	0e 94 17 05 	call	0xa2e	; 0xa2e <mirf_data_sent>
     9e6:	88 23       	and	r24, r24
     9e8:	69 f3       	breq	.-38     	; 0x9c4 <main+0x382>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ea:	8f e3       	ldi	r24, 0x3F	; 63
     9ec:	9c e9       	ldi	r25, 0x9C	; 156
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <main+0x3ac>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <main+0x3b2>
     9f4:	00 00       	nop
     9f6:	a5 ce       	rjmp	.-694    	; 0x742 <main+0x100>

000009f8 <mirf_init>:
{
	mirf_CSN_lo;
	spi_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi_exchange_bytes(value, value, len);
	mirf_CSN_hi;
}
     9f8:	54 9a       	sbi	0x0a, 4	; 10
     9fa:	20 9a       	sbi	0x04, 0	; 4
     9fc:	5c 98       	cbi	0x0b, 4	; 11
     9fe:	28 9a       	sbi	0x05, 0	; 5
     a00:	ea 98       	cbi	0x1d, 2	; 29
     a02:	e9 e6       	ldi	r30, 0x69	; 105
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	80 62       	ori	r24, 0x20	; 32
     a0a:	80 83       	st	Z, r24
     a0c:	ea 9a       	sbi	0x1d, 2	; 29
     a0e:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_master_initialize>
     a12:	08 95       	ret

00000a14 <mirf_data_ready>:
     a14:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <PTX>
     a18:	81 11       	cpse	r24, r1
     a1a:	07 c0       	rjmp	.+14     	; 0xa2a <mirf_data_ready+0x16>
     a1c:	28 98       	cbi	0x05, 0	; 5
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	0e 94 1f 06 	call	0xc3e	; 0xc3e <spi_exchange_char>
     a24:	28 9a       	sbi	0x05, 0	; 5
     a26:	80 74       	andi	r24, 0x40	; 64
     a28:	08 95       	ret
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret

00000a2e <mirf_data_sent>:
     a2e:	28 98       	cbi	0x05, 0	; 5
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	0e 94 1f 06 	call	0xc3e	; 0xc3e <spi_exchange_char>
     a36:	28 9a       	sbi	0x05, 0	; 5
     a38:	80 72       	andi	r24, 0x20	; 32
     a3a:	08 95       	ret

00000a3c <mirf_config_register>:
     a3c:	cf 93       	push	r28
     a3e:	c6 2f       	mov	r28, r22
     a40:	28 98       	cbi	0x05, 0	; 5
     a42:	8f 71       	andi	r24, 0x1F	; 31
     a44:	80 62       	ori	r24, 0x20	; 32
     a46:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
     a4a:	8c 2f       	mov	r24, r28
     a4c:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
     a50:	28 9a       	sbi	0x05, 0	; 5
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <set_RX_MODE>:
     a56:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <PTX>
     a5a:	60 e7       	ldi	r22, 0x70	; 112
     a5c:	87 e0       	ldi	r24, 0x07	; 7
     a5e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     a62:	28 98       	cbi	0x05, 0	; 5
     a64:	81 ee       	ldi	r24, 0xE1	; 225
     a66:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
     a6a:	28 9a       	sbi	0x05, 0	; 5
     a6c:	6b e5       	ldi	r22, 0x5B	; 91
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     a74:	5c 9a       	sbi	0x0b, 4	; 11
     a76:	08 95       	ret

00000a78 <mirf_config>:
     a78:	6c e6       	ldi	r22, 0x6C	; 108
     a7a:	85 e0       	ldi	r24, 0x05	; 5
     a7c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     a80:	6f ef       	ldi	r22, 0xFF	; 255
     a82:	84 e0       	ldi	r24, 0x04	; 4
     a84:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	81 e1       	ldi	r24, 0x11	; 17
     a8c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	82 e1       	ldi	r24, 0x12	; 18
     a94:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	83 e1       	ldi	r24, 0x13	; 19
     a9c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	84 e1       	ldi	r24, 0x14	; 20
     aa4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	85 e1       	ldi	r24, 0x15	; 21
     aac:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	86 e1       	ldi	r24, 0x16	; 22
     ab4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     ab8:	66 e2       	ldi	r22, 0x26	; 38
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     ac0:	63 e0       	ldi	r22, 0x03	; 3
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     ac8:	63 e0       	ldi	r22, 0x03	; 3
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     ad0:	6f e4       	ldi	r22, 0x4F	; 79
     ad2:	84 e0       	ldi	r24, 0x04	; 4
     ad4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     ad8:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <PTX>
     adc:	60 e7       	ldi	r22, 0x70	; 112
     ade:	87 e0       	ldi	r24, 0x07	; 7
     ae0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     ae4:	28 98       	cbi	0x05, 0	; 5
     ae6:	81 ee       	ldi	r24, 0xE1	; 225
     ae8:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
     aec:	28 9a       	sbi	0x05, 0	; 5
     aee:	6b e5       	ldi	r22, 0x5B	; 91
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     af6:	5c 9a       	sbi	0x0b, 4	; 11
     af8:	08 95       	ret

00000afa <mirf_get_data>:
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ec 01       	movw	r28, r24
     b00:	28 98       	cbi	0x05, 0	; 5
     b02:	81 e6       	ldi	r24, 0x61	; 97
     b04:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
     b08:	43 e0       	ldi	r20, 0x03	; 3
     b0a:	be 01       	movw	r22, r28
     b0c:	ce 01       	movw	r24, r28
     b0e:	0e 94 34 06 	call	0xc68	; 0xc68 <spi_exchange_bytes>
     b12:	28 9a       	sbi	0x05, 0	; 5
     b14:	60 e4       	ldi	r22, 0x40	; 64
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	eb 01       	movw	r28, r22
     b2a:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
     b2c:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_REGISTER | (REGISTER_MASK & reg));
     b2e:	8f 71       	andi	r24, 0x1F	; 31
     b30:	80 62       	ori	r24, 0x20	; 32
     b32:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
	spi_send_bytes(value, len);
     b36:	61 2f       	mov	r22, r17
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 25 06 	call	0xc4a	; 0xc4a <spi_send_bytes>
	mirf_CSN_hi;
     b3e:	28 9a       	sbi	0x05, 0	; 5
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	08 95       	ret

00000b48 <mirf_set_RADDR>:
}

void mirf_set_RADDR(int8_t *adr)
// Sets the receiving address
{
	mirf_CE_lo;
     b48:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
     b4a:	45 e0       	ldi	r20, 0x05	; 5
     b4c:	bc 01       	movw	r22, r24
     b4e:	8b e0       	ldi	r24, 0x0B	; 11
     b50:	0e 94 91 05 	call	0xb22	; 0xb22 <mirf_write_register>
	mirf_CE_hi;
     b54:	5c 9a       	sbi	0x0b, 4	; 11
     b56:	08 95       	ret

00000b58 <mirf_set_TADDR>:
}

void mirf_set_TADDR(int8_t *adr)
// Sets the transmitting address
{
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
	mirf_write_register(RX_ADDR_P0, adr, 5);
     b5e:	45 e0       	ldi	r20, 0x05	; 5
     b60:	bc 01       	movw	r22, r24
     b62:	8a e0       	ldi	r24, 0x0A	; 10
     b64:	0e 94 91 05 	call	0xb22	; 0xb22 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
     b68:	45 e0       	ldi	r20, 0x05	; 5
     b6a:	be 01       	movw	r22, r28
     b6c:	80 e1       	ldi	r24, 0x10	; 16
     b6e:	0e 94 91 05 	call	0xb22	; 0xb22 <mirf_write_register>
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	ec 01       	movw	r28, r24
     b80:	16 2f       	mov	r17, r22
	//while (PTX)
	//{

	//} // Wait until last packet is send

	mirf_CE_lo;
     b82:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1; // Set to transmitter mode
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
     b8a:	6a e5       	ldi	r22, 0x5A	; 90
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>

	mirf_CSN_lo;             // Pull down chip select
     b92:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(FLUSH_TX); // Write cmd to flush tx fifo
     b94:	81 ee       	ldi	r24, 0xE1	; 225
     b96:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
	mirf_CSN_hi;             // Pull up chip select
     b9a:	28 9a       	sbi	0x05, 0	; 5
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     b9c:	60 e7       	ldi	r22, 0x70	; 112
     b9e:	87 e0       	ldi	r24, 0x07	; 7
     ba0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
     ba4:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_TX_PAYLOAD); // Write cmd to write payload
     ba6:	80 ea       	ldi	r24, 0xA0	; 160
     ba8:	0e 94 1a 06 	call	0xc34	; 0xc34 <spi_send_char>
	spi_send_bytes(value, len);  // Write payload
     bac:	61 2f       	mov	r22, r17
     bae:	ce 01       	movw	r24, r28
     bb0:	0e 94 25 06 	call	0xc4a	; 0xc4a <spi_send_bytes>
	mirf_CSN_hi;                 // Pull up chip select
     bb4:	28 9a       	sbi	0x05, 0	; 5

	mirf_CE_hi; // Start transmission
     bb6:	5c 9a       	sbi	0x0b, 4	; 11
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	08 95       	ret

00000bc0 <__vector_4>:

ISR(INT3_vect) // Interrupt handler
{
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	8f 93       	push	r24
	//char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
     bcc:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <PTX>
// 		}
		
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
     bd0:	8f 91       	pop	r24
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <println_0>:
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	8c 01       	movw	r16, r24
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	8a 30       	cpi	r24, 0x0A	; 10
     bec:	69 f0       	breq	.+26     	; 0xc08 <println_0+0x2c>
     bee:	8b 33       	cpi	r24, 0x3B	; 59
     bf0:	79 f4       	brne	.+30     	; 0xc10 <println_0+0x34>
     bf2:	0a c0       	rjmp	.+20     	; 0xc08 <println_0+0x2c>
     bf4:	89 91       	ld	r24, Y+
     bf6:	8a 30       	cpi	r24, 0x0A	; 10
     bf8:	39 f0       	breq	.+14     	; 0xc08 <println_0+0x2c>
     bfa:	8b 33       	cpi	r24, 0x3B	; 59
     bfc:	29 f0       	breq	.+10     	; 0xc08 <println_0+0x2c>
     bfe:	0e 94 47 06 	call	0xc8e	; 0xc8e <usart0_send_char>
     c02:	0c 17       	cp	r16, r28
     c04:	1d 07       	cpc	r17, r29
     c06:	b1 f7       	brne	.-20     	; 0xbf4 <println_0+0x18>
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	0e 94 47 06 	call	0xc8e	; 0xc8e <usart0_send_char>
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <println_0+0x42>
     c10:	0e 94 47 06 	call	0xc8e	; 0xc8e <usart0_send_char>
     c14:	e8 01       	movw	r28, r16
     c16:	21 96       	adiw	r28, 0x01	; 1
     c18:	08 53       	subi	r16, 0x38	; 56
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	eb cf       	rjmp	.-42     	; 0xbf4 <println_0+0x18>
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <spi_master_initialize>:
     c28:	84 b1       	in	r24, 0x04	; 4
     c2a:	87 60       	ori	r24, 0x07	; 7
     c2c:	84 b9       	out	0x04, r24	; 4
     c2e:	81 e5       	ldi	r24, 0x51	; 81
     c30:	8c bd       	out	0x2c, r24	; 44
     c32:	08 95       	ret

00000c34 <spi_send_char>:
     c34:	8e bd       	out	0x2e, r24	; 46
     c36:	0d b4       	in	r0, 0x2d	; 45
     c38:	07 fe       	sbrs	r0, 7
     c3a:	fd cf       	rjmp	.-6      	; 0xc36 <spi_send_char+0x2>
     c3c:	08 95       	ret

00000c3e <spi_exchange_char>:
     c3e:	8e bd       	out	0x2e, r24	; 46
     c40:	0d b4       	in	r0, 0x2d	; 45
     c42:	07 fe       	sbrs	r0, 7
     c44:	fd cf       	rjmp	.-6      	; 0xc40 <spi_exchange_char+0x2>
     c46:	8e b5       	in	r24, 0x2e	; 46
     c48:	08 95       	ret

00000c4a <spi_send_bytes>:
     c4a:	66 23       	and	r22, r22
     c4c:	61 f0       	breq	.+24     	; 0xc66 <spi_send_bytes+0x1c>
     c4e:	fc 01       	movw	r30, r24
     c50:	9c 01       	movw	r18, r24
     c52:	26 0f       	add	r18, r22
     c54:	31 1d       	adc	r19, r1
     c56:	91 91       	ld	r25, Z+
     c58:	9e bd       	out	0x2e, r25	; 46
     c5a:	0d b4       	in	r0, 0x2d	; 45
     c5c:	07 fe       	sbrs	r0, 7
     c5e:	fd cf       	rjmp	.-6      	; 0xc5a <spi_send_bytes+0x10>
     c60:	e2 17       	cp	r30, r18
     c62:	f3 07       	cpc	r31, r19
     c64:	c1 f7       	brne	.-16     	; 0xc56 <spi_send_bytes+0xc>
     c66:	08 95       	ret

00000c68 <spi_exchange_bytes>:
     c68:	44 23       	and	r20, r20
     c6a:	81 f0       	breq	.+32     	; 0xc8c <spi_exchange_bytes+0x24>
     c6c:	fc 01       	movw	r30, r24
     c6e:	a6 2f       	mov	r26, r22
     c70:	b7 2f       	mov	r27, r23
     c72:	9c 01       	movw	r18, r24
     c74:	24 0f       	add	r18, r20
     c76:	31 1d       	adc	r19, r1
     c78:	91 91       	ld	r25, Z+
     c7a:	9e bd       	out	0x2e, r25	; 46
     c7c:	0d b4       	in	r0, 0x2d	; 45
     c7e:	07 fe       	sbrs	r0, 7
     c80:	fd cf       	rjmp	.-6      	; 0xc7c <spi_exchange_bytes+0x14>
     c82:	9e b5       	in	r25, 0x2e	; 46
     c84:	9d 93       	st	X+, r25
     c86:	e2 17       	cp	r30, r18
     c88:	f3 07       	cpc	r31, r19
     c8a:	b1 f7       	brne	.-20     	; 0xc78 <spi_exchange_bytes+0x10>
     c8c:	08 95       	ret

00000c8e <usart0_send_char>:
     c8e:	e0 ec       	ldi	r30, 0xC0	; 192
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	90 81       	ld	r25, Z
     c94:	95 ff       	sbrs	r25, 5
     c96:	fd cf       	rjmp	.-6      	; 0xc92 <usart0_send_char+0x4>
     c98:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c9c:	08 95       	ret

00000c9e <setup_usart0>:
     c9e:	98 e1       	ldi	r25, 0x18	; 24
     ca0:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     ca4:	96 e0       	ldi	r25, 0x06	; 6
     ca6:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     caa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     cae:	08 95       	ret

00000cb0 <__subsf3>:
     cb0:	50 58       	subi	r21, 0x80	; 128

00000cb2 <__addsf3>:
     cb2:	bb 27       	eor	r27, r27
     cb4:	aa 27       	eor	r26, r26
     cb6:	0e 94 70 06 	call	0xce0	; 0xce0 <__addsf3x>
     cba:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_round>
     cbe:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__fp_pscA>
     cc2:	38 f0       	brcs	.+14     	; 0xcd2 <__addsf3+0x20>
     cc4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscB>
     cc8:	20 f0       	brcs	.+8      	; 0xcd2 <__addsf3+0x20>
     cca:	39 f4       	brne	.+14     	; 0xcda <__addsf3+0x28>
     ccc:	9f 3f       	cpi	r25, 0xFF	; 255
     cce:	19 f4       	brne	.+6      	; 0xcd6 <__addsf3+0x24>
     cd0:	26 f4       	brtc	.+8      	; 0xcda <__addsf3+0x28>
     cd2:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_nan>
     cd6:	0e f4       	brtc	.+2      	; 0xcda <__addsf3+0x28>
     cd8:	e0 95       	com	r30
     cda:	e7 fb       	bst	r30, 7
     cdc:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_inf>

00000ce0 <__addsf3x>:
     ce0:	e9 2f       	mov	r30, r25
     ce2:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fp_split3>
     ce6:	58 f3       	brcs	.-42     	; 0xcbe <__addsf3+0xc>
     ce8:	ba 17       	cp	r27, r26
     cea:	62 07       	cpc	r22, r18
     cec:	73 07       	cpc	r23, r19
     cee:	84 07       	cpc	r24, r20
     cf0:	95 07       	cpc	r25, r21
     cf2:	20 f0       	brcs	.+8      	; 0xcfc <__addsf3x+0x1c>
     cf4:	79 f4       	brne	.+30     	; 0xd14 <__addsf3x+0x34>
     cf6:	a6 f5       	brtc	.+104    	; 0xd60 <__addsf3x+0x80>
     cf8:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_zero>
     cfc:	0e f4       	brtc	.+2      	; 0xd00 <__addsf3x+0x20>
     cfe:	e0 95       	com	r30
     d00:	0b 2e       	mov	r0, r27
     d02:	ba 2f       	mov	r27, r26
     d04:	a0 2d       	mov	r26, r0
     d06:	0b 01       	movw	r0, r22
     d08:	b9 01       	movw	r22, r18
     d0a:	90 01       	movw	r18, r0
     d0c:	0c 01       	movw	r0, r24
     d0e:	ca 01       	movw	r24, r20
     d10:	a0 01       	movw	r20, r0
     d12:	11 24       	eor	r1, r1
     d14:	ff 27       	eor	r31, r31
     d16:	59 1b       	sub	r21, r25
     d18:	99 f0       	breq	.+38     	; 0xd40 <__addsf3x+0x60>
     d1a:	59 3f       	cpi	r21, 0xF9	; 249
     d1c:	50 f4       	brcc	.+20     	; 0xd32 <__addsf3x+0x52>
     d1e:	50 3e       	cpi	r21, 0xE0	; 224
     d20:	68 f1       	brcs	.+90     	; 0xd7c <__addsf3x+0x9c>
     d22:	1a 16       	cp	r1, r26
     d24:	f0 40       	sbci	r31, 0x00	; 0
     d26:	a2 2f       	mov	r26, r18
     d28:	23 2f       	mov	r18, r19
     d2a:	34 2f       	mov	r19, r20
     d2c:	44 27       	eor	r20, r20
     d2e:	58 5f       	subi	r21, 0xF8	; 248
     d30:	f3 cf       	rjmp	.-26     	; 0xd18 <__addsf3x+0x38>
     d32:	46 95       	lsr	r20
     d34:	37 95       	ror	r19
     d36:	27 95       	ror	r18
     d38:	a7 95       	ror	r26
     d3a:	f0 40       	sbci	r31, 0x00	; 0
     d3c:	53 95       	inc	r21
     d3e:	c9 f7       	brne	.-14     	; 0xd32 <__addsf3x+0x52>
     d40:	7e f4       	brtc	.+30     	; 0xd60 <__addsf3x+0x80>
     d42:	1f 16       	cp	r1, r31
     d44:	ba 0b       	sbc	r27, r26
     d46:	62 0b       	sbc	r22, r18
     d48:	73 0b       	sbc	r23, r19
     d4a:	84 0b       	sbc	r24, r20
     d4c:	ba f0       	brmi	.+46     	; 0xd7c <__addsf3x+0x9c>
     d4e:	91 50       	subi	r25, 0x01	; 1
     d50:	a1 f0       	breq	.+40     	; 0xd7a <__addsf3x+0x9a>
     d52:	ff 0f       	add	r31, r31
     d54:	bb 1f       	adc	r27, r27
     d56:	66 1f       	adc	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	c2 f7       	brpl	.-16     	; 0xd4e <__addsf3x+0x6e>
     d5e:	0e c0       	rjmp	.+28     	; 0xd7c <__addsf3x+0x9c>
     d60:	ba 0f       	add	r27, r26
     d62:	62 1f       	adc	r22, r18
     d64:	73 1f       	adc	r23, r19
     d66:	84 1f       	adc	r24, r20
     d68:	48 f4       	brcc	.+18     	; 0xd7c <__addsf3x+0x9c>
     d6a:	87 95       	ror	r24
     d6c:	77 95       	ror	r23
     d6e:	67 95       	ror	r22
     d70:	b7 95       	ror	r27
     d72:	f7 95       	ror	r31
     d74:	9e 3f       	cpi	r25, 0xFE	; 254
     d76:	08 f0       	brcs	.+2      	; 0xd7a <__addsf3x+0x9a>
     d78:	b0 cf       	rjmp	.-160    	; 0xcda <__addsf3+0x28>
     d7a:	93 95       	inc	r25
     d7c:	88 0f       	add	r24, r24
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <__addsf3x+0xa2>
     d80:	99 27       	eor	r25, r25
     d82:	ee 0f       	add	r30, r30
     d84:	97 95       	ror	r25
     d86:	87 95       	ror	r24
     d88:	08 95       	ret

00000d8a <__cmpsf2>:
     d8a:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_cmp>
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__cmpsf2+0x8>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	08 95       	ret

00000d94 <__divsf3>:
     d94:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divsf3x>
     d98:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_round>
     d9c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscB>
     da0:	58 f0       	brcs	.+22     	; 0xdb8 <__divsf3+0x24>
     da2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__fp_pscA>
     da6:	40 f0       	brcs	.+16     	; 0xdb8 <__divsf3+0x24>
     da8:	29 f4       	brne	.+10     	; 0xdb4 <__divsf3+0x20>
     daa:	5f 3f       	cpi	r21, 0xFF	; 255
     dac:	29 f0       	breq	.+10     	; 0xdb8 <__divsf3+0x24>
     dae:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_inf>
     db2:	51 11       	cpse	r21, r1
     db4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_szero>
     db8:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_nan>

00000dbc <__divsf3x>:
     dbc:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fp_split3>
     dc0:	68 f3       	brcs	.-38     	; 0xd9c <__divsf3+0x8>

00000dc2 <__divsf3_pse>:
     dc2:	99 23       	and	r25, r25
     dc4:	b1 f3       	breq	.-20     	; 0xdb2 <__divsf3+0x1e>
     dc6:	55 23       	and	r21, r21
     dc8:	91 f3       	breq	.-28     	; 0xdae <__divsf3+0x1a>
     dca:	95 1b       	sub	r25, r21
     dcc:	55 0b       	sbc	r21, r21
     dce:	bb 27       	eor	r27, r27
     dd0:	aa 27       	eor	r26, r26
     dd2:	62 17       	cp	r22, r18
     dd4:	73 07       	cpc	r23, r19
     dd6:	84 07       	cpc	r24, r20
     dd8:	38 f0       	brcs	.+14     	; 0xde8 <__divsf3_pse+0x26>
     dda:	9f 5f       	subi	r25, 0xFF	; 255
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	44 1f       	adc	r20, r20
     de4:	aa 1f       	adc	r26, r26
     de6:	a9 f3       	breq	.-22     	; 0xdd2 <__divsf3_pse+0x10>
     de8:	35 d0       	rcall	.+106    	; 0xe54 <__divsf3_pse+0x92>
     dea:	0e 2e       	mov	r0, r30
     dec:	3a f0       	brmi	.+14     	; 0xdfc <__divsf3_pse+0x3a>
     dee:	e0 e8       	ldi	r30, 0x80	; 128
     df0:	32 d0       	rcall	.+100    	; 0xe56 <__divsf3_pse+0x94>
     df2:	91 50       	subi	r25, 0x01	; 1
     df4:	50 40       	sbci	r21, 0x00	; 0
     df6:	e6 95       	lsr	r30
     df8:	00 1c       	adc	r0, r0
     dfa:	ca f7       	brpl	.-14     	; 0xdee <__divsf3_pse+0x2c>
     dfc:	2b d0       	rcall	.+86     	; 0xe54 <__divsf3_pse+0x92>
     dfe:	fe 2f       	mov	r31, r30
     e00:	29 d0       	rcall	.+82     	; 0xe54 <__divsf3_pse+0x92>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	bb 1f       	adc	r27, r27
     e0a:	26 17       	cp	r18, r22
     e0c:	37 07       	cpc	r19, r23
     e0e:	48 07       	cpc	r20, r24
     e10:	ab 07       	cpc	r26, r27
     e12:	b0 e8       	ldi	r27, 0x80	; 128
     e14:	09 f0       	breq	.+2      	; 0xe18 <__divsf3_pse+0x56>
     e16:	bb 0b       	sbc	r27, r27
     e18:	80 2d       	mov	r24, r0
     e1a:	bf 01       	movw	r22, r30
     e1c:	ff 27       	eor	r31, r31
     e1e:	93 58       	subi	r25, 0x83	; 131
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
     e22:	3a f0       	brmi	.+14     	; 0xe32 <__divsf3_pse+0x70>
     e24:	9e 3f       	cpi	r25, 0xFE	; 254
     e26:	51 05       	cpc	r21, r1
     e28:	78 f0       	brcs	.+30     	; 0xe48 <__divsf3_pse+0x86>
     e2a:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_inf>
     e2e:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_szero>
     e32:	5f 3f       	cpi	r21, 0xFF	; 255
     e34:	e4 f3       	brlt	.-8      	; 0xe2e <__divsf3_pse+0x6c>
     e36:	98 3e       	cpi	r25, 0xE8	; 232
     e38:	d4 f3       	brlt	.-12     	; 0xe2e <__divsf3_pse+0x6c>
     e3a:	86 95       	lsr	r24
     e3c:	77 95       	ror	r23
     e3e:	67 95       	ror	r22
     e40:	b7 95       	ror	r27
     e42:	f7 95       	ror	r31
     e44:	9f 5f       	subi	r25, 0xFF	; 255
     e46:	c9 f7       	brne	.-14     	; 0xe3a <__divsf3_pse+0x78>
     e48:	88 0f       	add	r24, r24
     e4a:	91 1d       	adc	r25, r1
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	97 f9       	bld	r25, 7
     e52:	08 95       	ret
     e54:	e1 e0       	ldi	r30, 0x01	; 1
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	88 1f       	adc	r24, r24
     e5c:	bb 1f       	adc	r27, r27
     e5e:	62 17       	cp	r22, r18
     e60:	73 07       	cpc	r23, r19
     e62:	84 07       	cpc	r24, r20
     e64:	ba 07       	cpc	r27, r26
     e66:	20 f0       	brcs	.+8      	; 0xe70 <__divsf3_pse+0xae>
     e68:	62 1b       	sub	r22, r18
     e6a:	73 0b       	sbc	r23, r19
     e6c:	84 0b       	sbc	r24, r20
     e6e:	ba 0b       	sbc	r27, r26
     e70:	ee 1f       	adc	r30, r30
     e72:	88 f7       	brcc	.-30     	; 0xe56 <__divsf3_pse+0x94>
     e74:	e0 95       	com	r30
     e76:	08 95       	ret

00000e78 <__fixsfsi>:
     e78:	0e 94 43 07 	call	0xe86	; 0xe86 <__fixunssfsi>
     e7c:	68 94       	set
     e7e:	b1 11       	cpse	r27, r1
     e80:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_szero>
     e84:	08 95       	ret

00000e86 <__fixunssfsi>:
     e86:	0e 94 03 08 	call	0x1006	; 0x1006 <__fp_splitA>
     e8a:	88 f0       	brcs	.+34     	; 0xeae <__fixunssfsi+0x28>
     e8c:	9f 57       	subi	r25, 0x7F	; 127
     e8e:	98 f0       	brcs	.+38     	; 0xeb6 <__fixunssfsi+0x30>
     e90:	b9 2f       	mov	r27, r25
     e92:	99 27       	eor	r25, r25
     e94:	b7 51       	subi	r27, 0x17	; 23
     e96:	b0 f0       	brcs	.+44     	; 0xec4 <__fixunssfsi+0x3e>
     e98:	e1 f0       	breq	.+56     	; 0xed2 <__fixunssfsi+0x4c>
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	1a f0       	brmi	.+6      	; 0xeaa <__fixunssfsi+0x24>
     ea4:	ba 95       	dec	r27
     ea6:	c9 f7       	brne	.-14     	; 0xe9a <__fixunssfsi+0x14>
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <__fixunssfsi+0x4c>
     eaa:	b1 30       	cpi	r27, 0x01	; 1
     eac:	91 f0       	breq	.+36     	; 0xed2 <__fixunssfsi+0x4c>
     eae:	0e 94 1d 08 	call	0x103a	; 0x103a <__fp_zero>
     eb2:	b1 e0       	ldi	r27, 0x01	; 1
     eb4:	08 95       	ret
     eb6:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_zero>
     eba:	67 2f       	mov	r22, r23
     ebc:	78 2f       	mov	r23, r24
     ebe:	88 27       	eor	r24, r24
     ec0:	b8 5f       	subi	r27, 0xF8	; 248
     ec2:	39 f0       	breq	.+14     	; 0xed2 <__fixunssfsi+0x4c>
     ec4:	b9 3f       	cpi	r27, 0xF9	; 249
     ec6:	cc f3       	brlt	.-14     	; 0xeba <__fixunssfsi+0x34>
     ec8:	86 95       	lsr	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b3 95       	inc	r27
     ed0:	d9 f7       	brne	.-10     	; 0xec8 <__fixunssfsi+0x42>
     ed2:	3e f4       	brtc	.+14     	; 0xee2 <__fixunssfsi+0x5c>
     ed4:	90 95       	com	r25
     ed6:	80 95       	com	r24
     ed8:	70 95       	com	r23
     eda:	61 95       	neg	r22
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	08 95       	ret

00000ee4 <__floatunsisf>:
     ee4:	e8 94       	clt
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <__floatsisf+0x12>

00000ee8 <__floatsisf>:
     ee8:	97 fb       	bst	r25, 7
     eea:	3e f4       	brtc	.+14     	; 0xefa <__floatsisf+0x12>
     eec:	90 95       	com	r25
     eee:	80 95       	com	r24
     ef0:	70 95       	com	r23
     ef2:	61 95       	neg	r22
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	99 23       	and	r25, r25
     efc:	a9 f0       	breq	.+42     	; 0xf28 <__floatsisf+0x40>
     efe:	f9 2f       	mov	r31, r25
     f00:	96 e9       	ldi	r25, 0x96	; 150
     f02:	bb 27       	eor	r27, r27
     f04:	93 95       	inc	r25
     f06:	f6 95       	lsr	r31
     f08:	87 95       	ror	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f1 11       	cpse	r31, r1
     f12:	f8 cf       	rjmp	.-16     	; 0xf04 <__floatsisf+0x1c>
     f14:	fa f4       	brpl	.+62     	; 0xf54 <__floatsisf+0x6c>
     f16:	bb 0f       	add	r27, r27
     f18:	11 f4       	brne	.+4      	; 0xf1e <__floatsisf+0x36>
     f1a:	60 ff       	sbrs	r22, 0
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <__floatsisf+0x6c>
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <__floatsisf+0x6c>
     f28:	88 23       	and	r24, r24
     f2a:	11 f0       	breq	.+4      	; 0xf30 <__floatsisf+0x48>
     f2c:	96 e9       	ldi	r25, 0x96	; 150
     f2e:	11 c0       	rjmp	.+34     	; 0xf52 <__floatsisf+0x6a>
     f30:	77 23       	and	r23, r23
     f32:	21 f0       	breq	.+8      	; 0xf3c <__floatsisf+0x54>
     f34:	9e e8       	ldi	r25, 0x8E	; 142
     f36:	87 2f       	mov	r24, r23
     f38:	76 2f       	mov	r23, r22
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <__floatsisf+0x5e>
     f3c:	66 23       	and	r22, r22
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__floatsisf+0x74>
     f40:	96 e8       	ldi	r25, 0x86	; 134
     f42:	86 2f       	mov	r24, r22
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	2a f0       	brmi	.+10     	; 0xf54 <__floatsisf+0x6c>
     f4a:	9a 95       	dec	r25
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	da f7       	brpl	.-10     	; 0xf4a <__floatsisf+0x62>
     f54:	88 0f       	add	r24, r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret

00000f5e <__fp_cmp>:
     f5e:	99 0f       	add	r25, r25
     f60:	00 08       	sbc	r0, r0
     f62:	55 0f       	add	r21, r21
     f64:	aa 0b       	sbc	r26, r26
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	fe ef       	ldi	r31, 0xFE	; 254
     f6a:	16 16       	cp	r1, r22
     f6c:	17 06       	cpc	r1, r23
     f6e:	e8 07       	cpc	r30, r24
     f70:	f9 07       	cpc	r31, r25
     f72:	c0 f0       	brcs	.+48     	; 0xfa4 <__fp_cmp+0x46>
     f74:	12 16       	cp	r1, r18
     f76:	13 06       	cpc	r1, r19
     f78:	e4 07       	cpc	r30, r20
     f7a:	f5 07       	cpc	r31, r21
     f7c:	98 f0       	brcs	.+38     	; 0xfa4 <__fp_cmp+0x46>
     f7e:	62 1b       	sub	r22, r18
     f80:	73 0b       	sbc	r23, r19
     f82:	84 0b       	sbc	r24, r20
     f84:	95 0b       	sbc	r25, r21
     f86:	39 f4       	brne	.+14     	; 0xf96 <__fp_cmp+0x38>
     f88:	0a 26       	eor	r0, r26
     f8a:	61 f0       	breq	.+24     	; 0xfa4 <__fp_cmp+0x46>
     f8c:	23 2b       	or	r18, r19
     f8e:	24 2b       	or	r18, r20
     f90:	25 2b       	or	r18, r21
     f92:	21 f4       	brne	.+8      	; 0xf9c <__fp_cmp+0x3e>
     f94:	08 95       	ret
     f96:	0a 26       	eor	r0, r26
     f98:	09 f4       	brne	.+2      	; 0xf9c <__fp_cmp+0x3e>
     f9a:	a1 40       	sbci	r26, 0x01	; 1
     f9c:	a6 95       	lsr	r26
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	81 1d       	adc	r24, r1
     fa2:	81 1d       	adc	r24, r1
     fa4:	08 95       	ret

00000fa6 <__fp_inf>:
     fa6:	97 f9       	bld	r25, 7
     fa8:	9f 67       	ori	r25, 0x7F	; 127
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	08 95       	ret

00000fb2 <__fp_nan>:
     fb2:	9f ef       	ldi	r25, 0xFF	; 255
     fb4:	80 ec       	ldi	r24, 0xC0	; 192
     fb6:	08 95       	ret

00000fb8 <__fp_pscA>:
     fb8:	00 24       	eor	r0, r0
     fba:	0a 94       	dec	r0
     fbc:	16 16       	cp	r1, r22
     fbe:	17 06       	cpc	r1, r23
     fc0:	18 06       	cpc	r1, r24
     fc2:	09 06       	cpc	r0, r25
     fc4:	08 95       	ret

00000fc6 <__fp_pscB>:
     fc6:	00 24       	eor	r0, r0
     fc8:	0a 94       	dec	r0
     fca:	12 16       	cp	r1, r18
     fcc:	13 06       	cpc	r1, r19
     fce:	14 06       	cpc	r1, r20
     fd0:	05 06       	cpc	r0, r21
     fd2:	08 95       	ret

00000fd4 <__fp_round>:
     fd4:	09 2e       	mov	r0, r25
     fd6:	03 94       	inc	r0
     fd8:	00 0c       	add	r0, r0
     fda:	11 f4       	brne	.+4      	; 0xfe0 <__fp_round+0xc>
     fdc:	88 23       	and	r24, r24
     fde:	52 f0       	brmi	.+20     	; 0xff4 <__fp_round+0x20>
     fe0:	bb 0f       	add	r27, r27
     fe2:	40 f4       	brcc	.+16     	; 0xff4 <__fp_round+0x20>
     fe4:	bf 2b       	or	r27, r31
     fe6:	11 f4       	brne	.+4      	; 0xfec <__fp_round+0x18>
     fe8:	60 ff       	sbrs	r22, 0
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <__fp_round+0x20>
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	8f 4f       	sbci	r24, 0xFF	; 255
     ff2:	9f 4f       	sbci	r25, 0xFF	; 255
     ff4:	08 95       	ret

00000ff6 <__fp_split3>:
     ff6:	57 fd       	sbrc	r21, 7
     ff8:	90 58       	subi	r25, 0x80	; 128
     ffa:	44 0f       	add	r20, r20
     ffc:	55 1f       	adc	r21, r21
     ffe:	59 f0       	breq	.+22     	; 0x1016 <__fp_splitA+0x10>
    1000:	5f 3f       	cpi	r21, 0xFF	; 255
    1002:	71 f0       	breq	.+28     	; 0x1020 <__fp_splitA+0x1a>
    1004:	47 95       	ror	r20

00001006 <__fp_splitA>:
    1006:	88 0f       	add	r24, r24
    1008:	97 fb       	bst	r25, 7
    100a:	99 1f       	adc	r25, r25
    100c:	61 f0       	breq	.+24     	; 0x1026 <__fp_splitA+0x20>
    100e:	9f 3f       	cpi	r25, 0xFF	; 255
    1010:	79 f0       	breq	.+30     	; 0x1030 <__fp_splitA+0x2a>
    1012:	87 95       	ror	r24
    1014:	08 95       	ret
    1016:	12 16       	cp	r1, r18
    1018:	13 06       	cpc	r1, r19
    101a:	14 06       	cpc	r1, r20
    101c:	55 1f       	adc	r21, r21
    101e:	f2 cf       	rjmp	.-28     	; 0x1004 <__fp_split3+0xe>
    1020:	46 95       	lsr	r20
    1022:	f1 df       	rcall	.-30     	; 0x1006 <__fp_splitA>
    1024:	08 c0       	rjmp	.+16     	; 0x1036 <__fp_splitA+0x30>
    1026:	16 16       	cp	r1, r22
    1028:	17 06       	cpc	r1, r23
    102a:	18 06       	cpc	r1, r24
    102c:	99 1f       	adc	r25, r25
    102e:	f1 cf       	rjmp	.-30     	; 0x1012 <__fp_splitA+0xc>
    1030:	86 95       	lsr	r24
    1032:	71 05       	cpc	r23, r1
    1034:	61 05       	cpc	r22, r1
    1036:	08 94       	sec
    1038:	08 95       	ret

0000103a <__fp_zero>:
    103a:	e8 94       	clt

0000103c <__fp_szero>:
    103c:	bb 27       	eor	r27, r27
    103e:	66 27       	eor	r22, r22
    1040:	77 27       	eor	r23, r23
    1042:	cb 01       	movw	r24, r22
    1044:	97 f9       	bld	r25, 7
    1046:	08 95       	ret

00001048 <__gesf2>:
    1048:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_cmp>
    104c:	08 f4       	brcc	.+2      	; 0x1050 <__gesf2+0x8>
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	08 95       	ret

00001052 <__mulsf3>:
    1052:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3x>
    1056:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_round>
    105a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__fp_pscA>
    105e:	38 f0       	brcs	.+14     	; 0x106e <__mulsf3+0x1c>
    1060:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscB>
    1064:	20 f0       	brcs	.+8      	; 0x106e <__mulsf3+0x1c>
    1066:	95 23       	and	r25, r21
    1068:	11 f0       	breq	.+4      	; 0x106e <__mulsf3+0x1c>
    106a:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_inf>
    106e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_nan>
    1072:	11 24       	eor	r1, r1
    1074:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_szero>

00001078 <__mulsf3x>:
    1078:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fp_split3>
    107c:	70 f3       	brcs	.-36     	; 0x105a <__mulsf3+0x8>

0000107e <__mulsf3_pse>:
    107e:	95 9f       	mul	r25, r21
    1080:	c1 f3       	breq	.-16     	; 0x1072 <__mulsf3+0x20>
    1082:	95 0f       	add	r25, r21
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	55 1f       	adc	r21, r21
    1088:	62 9f       	mul	r22, r18
    108a:	f0 01       	movw	r30, r0
    108c:	72 9f       	mul	r23, r18
    108e:	bb 27       	eor	r27, r27
    1090:	f0 0d       	add	r31, r0
    1092:	b1 1d       	adc	r27, r1
    1094:	63 9f       	mul	r22, r19
    1096:	aa 27       	eor	r26, r26
    1098:	f0 0d       	add	r31, r0
    109a:	b1 1d       	adc	r27, r1
    109c:	aa 1f       	adc	r26, r26
    109e:	64 9f       	mul	r22, r20
    10a0:	66 27       	eor	r22, r22
    10a2:	b0 0d       	add	r27, r0
    10a4:	a1 1d       	adc	r26, r1
    10a6:	66 1f       	adc	r22, r22
    10a8:	82 9f       	mul	r24, r18
    10aa:	22 27       	eor	r18, r18
    10ac:	b0 0d       	add	r27, r0
    10ae:	a1 1d       	adc	r26, r1
    10b0:	62 1f       	adc	r22, r18
    10b2:	73 9f       	mul	r23, r19
    10b4:	b0 0d       	add	r27, r0
    10b6:	a1 1d       	adc	r26, r1
    10b8:	62 1f       	adc	r22, r18
    10ba:	83 9f       	mul	r24, r19
    10bc:	a0 0d       	add	r26, r0
    10be:	61 1d       	adc	r22, r1
    10c0:	22 1f       	adc	r18, r18
    10c2:	74 9f       	mul	r23, r20
    10c4:	33 27       	eor	r19, r19
    10c6:	a0 0d       	add	r26, r0
    10c8:	61 1d       	adc	r22, r1
    10ca:	23 1f       	adc	r18, r19
    10cc:	84 9f       	mul	r24, r20
    10ce:	60 0d       	add	r22, r0
    10d0:	21 1d       	adc	r18, r1
    10d2:	82 2f       	mov	r24, r18
    10d4:	76 2f       	mov	r23, r22
    10d6:	6a 2f       	mov	r22, r26
    10d8:	11 24       	eor	r1, r1
    10da:	9f 57       	subi	r25, 0x7F	; 127
    10dc:	50 40       	sbci	r21, 0x00	; 0
    10de:	9a f0       	brmi	.+38     	; 0x1106 <__mulsf3_pse+0x88>
    10e0:	f1 f0       	breq	.+60     	; 0x111e <__mulsf3_pse+0xa0>
    10e2:	88 23       	and	r24, r24
    10e4:	4a f0       	brmi	.+18     	; 0x10f8 <__mulsf3_pse+0x7a>
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	bb 1f       	adc	r27, r27
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	50 40       	sbci	r21, 0x00	; 0
    10f6:	a9 f7       	brne	.-22     	; 0x10e2 <__mulsf3_pse+0x64>
    10f8:	9e 3f       	cpi	r25, 0xFE	; 254
    10fa:	51 05       	cpc	r21, r1
    10fc:	80 f0       	brcs	.+32     	; 0x111e <__mulsf3_pse+0xa0>
    10fe:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_inf>
    1102:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_szero>
    1106:	5f 3f       	cpi	r21, 0xFF	; 255
    1108:	e4 f3       	brlt	.-8      	; 0x1102 <__mulsf3_pse+0x84>
    110a:	98 3e       	cpi	r25, 0xE8	; 232
    110c:	d4 f3       	brlt	.-12     	; 0x1102 <__mulsf3_pse+0x84>
    110e:	86 95       	lsr	r24
    1110:	77 95       	ror	r23
    1112:	67 95       	ror	r22
    1114:	b7 95       	ror	r27
    1116:	f7 95       	ror	r31
    1118:	e7 95       	ror	r30
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	c1 f7       	brne	.-16     	; 0x110e <__mulsf3_pse+0x90>
    111e:	fe 2b       	or	r31, r30
    1120:	88 0f       	add	r24, r24
    1122:	91 1d       	adc	r25, r1
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret

0000112c <__divmodhi4>:
    112c:	97 fb       	bst	r25, 7
    112e:	07 2e       	mov	r0, r23
    1130:	16 f4       	brtc	.+4      	; 0x1136 <__divmodhi4+0xa>
    1132:	00 94       	com	r0
    1134:	07 d0       	rcall	.+14     	; 0x1144 <__divmodhi4_neg1>
    1136:	77 fd       	sbrc	r23, 7
    1138:	09 d0       	rcall	.+18     	; 0x114c <__divmodhi4_neg2>
    113a:	0e 94 aa 08 	call	0x1154	; 0x1154 <__udivmodhi4>
    113e:	07 fc       	sbrc	r0, 7
    1140:	05 d0       	rcall	.+10     	; 0x114c <__divmodhi4_neg2>
    1142:	3e f4       	brtc	.+14     	; 0x1152 <__divmodhi4_exit>

00001144 <__divmodhi4_neg1>:
    1144:	90 95       	com	r25
    1146:	81 95       	neg	r24
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	08 95       	ret

0000114c <__divmodhi4_neg2>:
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255

00001152 <__divmodhi4_exit>:
    1152:	08 95       	ret

00001154 <__udivmodhi4>:
    1154:	aa 1b       	sub	r26, r26
    1156:	bb 1b       	sub	r27, r27
    1158:	51 e1       	ldi	r21, 0x11	; 17
    115a:	07 c0       	rjmp	.+14     	; 0x116a <__udivmodhi4_ep>

0000115c <__udivmodhi4_loop>:
    115c:	aa 1f       	adc	r26, r26
    115e:	bb 1f       	adc	r27, r27
    1160:	a6 17       	cp	r26, r22
    1162:	b7 07       	cpc	r27, r23
    1164:	10 f0       	brcs	.+4      	; 0x116a <__udivmodhi4_ep>
    1166:	a6 1b       	sub	r26, r22
    1168:	b7 0b       	sbc	r27, r23

0000116a <__udivmodhi4_ep>:
    116a:	88 1f       	adc	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	5a 95       	dec	r21
    1170:	a9 f7       	brne	.-22     	; 0x115c <__udivmodhi4_loop>
    1172:	80 95       	com	r24
    1174:	90 95       	com	r25
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	08 95       	ret

0000117c <__itoa_ncheck>:
    117c:	bb 27       	eor	r27, r27
    117e:	4a 30       	cpi	r20, 0x0A	; 10
    1180:	31 f4       	brne	.+12     	; 0x118e <__itoa_ncheck+0x12>
    1182:	99 23       	and	r25, r25
    1184:	22 f4       	brpl	.+8      	; 0x118e <__itoa_ncheck+0x12>
    1186:	bd e2       	ldi	r27, 0x2D	; 45
    1188:	90 95       	com	r25
    118a:	81 95       	neg	r24
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
    118e:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__utoa_common>

00001192 <__utoa_ncheck>:
    1192:	bb 27       	eor	r27, r27

00001194 <__utoa_common>:
    1194:	fb 01       	movw	r30, r22
    1196:	55 27       	eor	r21, r21
    1198:	aa 27       	eor	r26, r26
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	aa 1f       	adc	r26, r26
    11a0:	a4 17       	cp	r26, r20
    11a2:	10 f0       	brcs	.+4      	; 0x11a8 <__utoa_common+0x14>
    11a4:	a4 1b       	sub	r26, r20
    11a6:	83 95       	inc	r24
    11a8:	50 51       	subi	r21, 0x10	; 16
    11aa:	b9 f7       	brne	.-18     	; 0x119a <__utoa_common+0x6>
    11ac:	a0 5d       	subi	r26, 0xD0	; 208
    11ae:	aa 33       	cpi	r26, 0x3A	; 58
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <__utoa_common+0x20>
    11b2:	a9 5d       	subi	r26, 0xD9	; 217
    11b4:	a1 93       	st	Z+, r26
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	79 f7       	brne	.-34     	; 0x1198 <__utoa_common+0x4>
    11ba:	b1 11       	cpse	r27, r1
    11bc:	b1 93       	st	Z+, r27
    11be:	11 92       	st	Z+, r1
    11c0:	cb 01       	movw	r24, r22
    11c2:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <strrev>

000011c6 <strrev>:
    11c6:	dc 01       	movw	r26, r24
    11c8:	fc 01       	movw	r30, r24
    11ca:	67 2f       	mov	r22, r23
    11cc:	71 91       	ld	r23, Z+
    11ce:	77 23       	and	r23, r23
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <strrev+0x4>
    11d2:	32 97       	sbiw	r30, 0x02	; 2
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <strrev+0x18>
    11d6:	7c 91       	ld	r23, X
    11d8:	6d 93       	st	X+, r22
    11da:	70 83       	st	Z, r23
    11dc:	62 91       	ld	r22, -Z
    11de:	ae 17       	cp	r26, r30
    11e0:	bf 07       	cpc	r27, r31
    11e2:	c8 f3       	brcs	.-14     	; 0x11d6 <strrev+0x10>
    11e4:	08 95       	ret

000011e6 <_exit>:
    11e6:	f8 94       	cli

000011e8 <__stop_program>:
    11e8:	ff cf       	rjmp	.-2      	; 0x11e8 <__stop_program>
