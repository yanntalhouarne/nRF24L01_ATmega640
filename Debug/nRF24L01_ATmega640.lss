
nRF24L01_ATmega640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800200  00000c6a  00000cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800244  00800244  00000d42  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030e0  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015bf  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000181e  00000000  00000000  000056e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  00006f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a08  00000000  00000000  00007558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000209d  00000000  00000000  00007f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00009ffd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_4>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea e6       	ldi	r30, 0x6A	; 106
  f8:	fc e0       	ldi	r31, 0x0C	; 12
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a4 34       	cpi	r26, 0x44	; 68
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a4 e4       	ldi	r26, 0x44	; 68
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ac 34       	cpi	r26, 0x4C	; 76
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
 11a:	0c 94 33 06 	jmp	0xc66	; 0xc66 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setup_adc>:
 122:	ec e7       	ldi	r30, 0x7C	; 124
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	87 68       	ori	r24, 0x87	; 135
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <analog_read>:
 138:	ec e7       	ldi	r30, 0x7C	; 124
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	98 7f       	andi	r25, 0xF8	; 248
 140:	87 70       	andi	r24, 0x07	; 7
 142:	89 2b       	or	r24, r25
 144:	80 83       	st	Z, r24
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
 150:	80 81       	ld	r24, Z
 152:	84 ff       	sbrs	r24, 4
 154:	fd cf       	rjmp	.-6      	; 0x150 <analog_read+0x18>
 156:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	98 2f       	mov	r25, r24
 162:	88 27       	eor	r24, r24
 164:	88 27       	eor	r24, r24
 166:	9f 72       	andi	r25, 0x2F	; 47
 168:	82 2b       	or	r24, r18
 16a:	08 95       	ret

0000016c <analog_get_average>:
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	e6 2e       	mov	r14, r22
 17c:	f1 2c       	mov	r15, r1
 17e:	1e 14       	cp	r1, r14
 180:	1f 04       	cpc	r1, r15
 182:	ac f4       	brge	.+42     	; 0x1ae <analog_get_average+0x42>
 184:	d8 2e       	mov	r13, r24
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	10 e0       	ldi	r17, 0x00	; 0
 18e:	8d 2d       	mov	r24, r13
 190:	0e 94 9c 00 	call	0x138	; 0x138 <analog_read>
 194:	08 0f       	add	r16, r24
 196:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <analog_get_average+0x30>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <analog_get_average+0x36>
 1a2:	00 00       	nop
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	ce 15       	cp	r28, r14
 1a8:	df 05       	cpc	r29, r15
 1aa:	89 f7       	brne	.-30     	; 0x18e <analog_get_average+0x22>
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <analog_get_average+0x46>
 1ae:	00 e0       	ldi	r16, 0x00	; 0
 1b0:	10 e0       	ldi	r17, 0x00	; 0
 1b2:	c8 01       	movw	r24, r16
 1b4:	b7 01       	movw	r22, r14
 1b6:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
 1ba:	cb 01       	movw	r24, r22
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	08 95       	ret

000001cc <setup_ports>:


void setup_ports()
{
	// LEDs
	DDRL |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED5) | (1<<LED6); // set LEDs as outputs
 1cc:	ea e0       	ldi	r30, 0x0A	; 10
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	80 81       	ld	r24, Z
 1d2:	8f 63       	ori	r24, 0x3F	; 63
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <LED_check>:

}

void LED_check()
{
 1d8:	23 e0       	ldi	r18, 0x03	; 3
 1da:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	
	for (i=0; i<3; i++)
	{
		LED1_ON;
 1dc:	eb e0       	ldi	r30, 0x0B	; 11
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	80 81       	ld	r24, Z
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	80 83       	st	Z, r24
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	9c e9       	ldi	r25, 0x9C	; 156
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LED_check+0x12>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LED_check+0x18>
 1f0:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
 1f2:	80 81       	ld	r24, Z
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	80 83       	st	Z, r24
		LED2_ON;
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
 1fe:	8f e3       	ldi	r24, 0x3F	; 63
 200:	9c e9       	ldi	r25, 0x9C	; 156
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LED_check+0x2a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LED_check+0x30>
 208:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
 20a:	80 81       	ld	r24, Z
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	80 83       	st	Z, r24
		LED3_ON;
 210:	80 81       	ld	r24, Z
 212:	84 60       	ori	r24, 0x04	; 4
 214:	80 83       	st	Z, r24
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	9c e9       	ldi	r25, 0x9C	; 156
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LED_check+0x42>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LED_check+0x48>
 220:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
 222:	80 81       	ld	r24, Z
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	80 83       	st	Z, r24
		LED4_ON;
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LED_check+0x5a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LED_check+0x60>
 238:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
 23a:	80 81       	ld	r24, Z
 23c:	87 7f       	andi	r24, 0xF7	; 247
 23e:	80 83       	st	Z, r24
		LED5_ON;
 240:	80 81       	ld	r24, Z
 242:	80 61       	ori	r24, 0x10	; 16
 244:	80 83       	st	Z, r24
 246:	8f e3       	ldi	r24, 0x3F	; 63
 248:	9c e9       	ldi	r25, 0x9C	; 156
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LED_check+0x72>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LED_check+0x78>
 250:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
 252:	80 81       	ld	r24, Z
 254:	8f 7e       	andi	r24, 0xEF	; 239
 256:	80 83       	st	Z, r24
		LED6_ON;
 258:	80 81       	ld	r24, Z
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	80 83       	st	Z, r24
 25e:	8f e3       	ldi	r24, 0x3F	; 63
 260:	9c e9       	ldi	r25, 0x9C	; 156
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LED_check+0x8a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LED_check+0x90>
 268:	00 00       	nop
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9c e9       	ldi	r25, 0x9C	; 156
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LED_check+0x96>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LED_check+0x9c>
 274:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		
		_delay_ms(LED_check_DELAY);
		LED6_OFF;
 276:	80 81       	ld	r24, Z
 278:	8f 7d       	andi	r24, 0xDF	; 223
 27a:	80 83       	st	Z, r24
		LED5_ON;
 27c:	80 81       	ld	r24, Z
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	80 83       	st	Z, r24
 282:	8f e3       	ldi	r24, 0x3F	; 63
 284:	9c e9       	ldi	r25, 0x9C	; 156
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LED_check+0xae>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LED_check+0xb4>
 28c:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
 28e:	80 81       	ld	r24, Z
 290:	8f 7e       	andi	r24, 0xEF	; 239
 292:	80 83       	st	Z, r24
		LED4_ON;
 294:	80 81       	ld	r24, Z
 296:	88 60       	ori	r24, 0x08	; 8
 298:	80 83       	st	Z, r24
 29a:	8f e3       	ldi	r24, 0x3F	; 63
 29c:	9c e9       	ldi	r25, 0x9C	; 156
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LED_check+0xc6>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LED_check+0xcc>
 2a4:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
 2a6:	80 81       	ld	r24, Z
 2a8:	87 7f       	andi	r24, 0xF7	; 247
 2aa:	80 83       	st	Z, r24
		LED3_ON;
 2ac:	80 81       	ld	r24, Z
 2ae:	84 60       	ori	r24, 0x04	; 4
 2b0:	80 83       	st	Z, r24
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	9c e9       	ldi	r25, 0x9C	; 156
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LED_check+0xde>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LED_check+0xe4>
 2bc:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
 2be:	80 81       	ld	r24, Z
 2c0:	8b 7f       	andi	r24, 0xFB	; 251
 2c2:	80 83       	st	Z, r24
		LED2_ON;
 2c4:	80 81       	ld	r24, Z
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	80 83       	st	Z, r24
 2ca:	8f e3       	ldi	r24, 0x3F	; 63
 2cc:	9c e9       	ldi	r25, 0x9C	; 156
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LED_check+0xf6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LED_check+0xfc>
 2d4:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
 2d6:	80 81       	ld	r24, Z
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	80 83       	st	Z, r24
		LED1_ON;
 2dc:	80 81       	ld	r24, Z
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	80 83       	st	Z, r24
 2e2:	8f e3       	ldi	r24, 0x3F	; 63
 2e4:	9c e9       	ldi	r25, 0x9C	; 156
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LED_check+0x10e>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LED_check+0x114>
 2ec:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
 2ee:	80 81       	ld	r24, Z
 2f0:	8e 7f       	andi	r24, 0xFE	; 254
 2f2:	80 83       	st	Z, r24
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	31 09       	sbc	r19, r1

void LED_check()
{
	int i;
	
	for (i=0; i<3; i++)
 2f8:	09 f0       	breq	.+2      	; 0x2fc <LED_check+0x124>
 2fa:	72 cf       	rjmp	.-284    	; 0x1e0 <LED_check+0x8>
		LED1_ON;
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
	}

 2fc:	08 95       	ret

000002fe <data_to_port>:


void data_to_port(char data)
{
	// DB0
	if ( (data >> 0)&(0x01) )
 2fe:	80 ff       	sbrs	r24, 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <data_to_port+0x8>
		PORTC |= (1<<DB0);
 302:	43 9a       	sbi	0x08, 3	; 8
 304:	01 c0       	rjmp	.+2      	; 0x308 <data_to_port+0xa>
	else
		PORTC &= ~(1<<DB0);
 306:	43 98       	cbi	0x08, 3	; 8
	// DB1
	if ( (data >> 1)&(0x01) )
 308:	81 ff       	sbrs	r24, 1
 30a:	02 c0       	rjmp	.+4      	; 0x310 <data_to_port+0x12>
		PORTC |= (1<<DB1);
 30c:	44 9a       	sbi	0x08, 4	; 8
 30e:	01 c0       	rjmp	.+2      	; 0x312 <data_to_port+0x14>
	else
		PORTC &= ~(1<<DB1);
 310:	44 98       	cbi	0x08, 4	; 8
	// DB2
	if ( (data >> 2)&(0x01) )
 312:	82 ff       	sbrs	r24, 2
 314:	02 c0       	rjmp	.+4      	; 0x31a <data_to_port+0x1c>
		PORTC |= (1<<DB2);
 316:	45 9a       	sbi	0x08, 5	; 8
 318:	01 c0       	rjmp	.+2      	; 0x31c <data_to_port+0x1e>
	else
		PORTC &= ~(1<<DB2);
 31a:	45 98       	cbi	0x08, 5	; 8
	// DB3
	if ( (data >> 3)&(0x01) )
 31c:	83 ff       	sbrs	r24, 3
 31e:	02 c0       	rjmp	.+4      	; 0x324 <data_to_port+0x26>
		PORTC |= (1<<DB3);
 320:	46 9a       	sbi	0x08, 6	; 8
 322:	01 c0       	rjmp	.+2      	; 0x326 <data_to_port+0x28>
	else
		PORTC &= ~(1<<DB3);
 324:	46 98       	cbi	0x08, 6	; 8
	// DB4
	if ( (data >> 4)&(0x01) )
 326:	84 ff       	sbrs	r24, 4
 328:	02 c0       	rjmp	.+4      	; 0x32e <data_to_port+0x30>
		PORTC |= (1<<DB4);
 32a:	47 9a       	sbi	0x08, 7	; 8
 32c:	01 c0       	rjmp	.+2      	; 0x330 <data_to_port+0x32>
	else
		PORTC &= ~(1<<DB4);
 32e:	47 98       	cbi	0x08, 7	; 8
	// DB5
	if ( (data >> 5)&(0x01) )
 330:	85 ff       	sbrs	r24, 5
 332:	02 c0       	rjmp	.+4      	; 0x338 <data_to_port+0x3a>
		PORTG |= (1<<DB5);
 334:	a0 9a       	sbi	0x14, 0	; 20
 336:	01 c0       	rjmp	.+2      	; 0x33a <data_to_port+0x3c>
	else
		PORTG &= ~(1<<DB5);
 338:	a0 98       	cbi	0x14, 0	; 20
	// DB6
	if ( (data >> 6)&(0x01) )
 33a:	86 ff       	sbrs	r24, 6
 33c:	02 c0       	rjmp	.+4      	; 0x342 <data_to_port+0x44>
		PORTG |= (1<<DB6);
 33e:	a1 9a       	sbi	0x14, 1	; 20
 340:	01 c0       	rjmp	.+2      	; 0x344 <data_to_port+0x46>
	else
		PORTG &= ~(1<<DB6);
 342:	a1 98       	cbi	0x14, 1	; 20
	// DB7
	if ( (data >> 7)&(0x01) )
 344:	88 23       	and	r24, r24
 346:	14 f4       	brge	.+4      	; 0x34c <data_to_port+0x4e>
		PORTD |= (1<<DB7);
 348:	5f 9a       	sbi	0x0b, 7	; 11
 34a:	08 95       	ret
	else
		PORTD &= ~(1<<DB7);
 34c:	5f 98       	cbi	0x0b, 7	; 11
 34e:	08 95       	ret

00000350 <lcd_send_cmd>:
	
}

void lcd_send_cmd(char cmd)
{
	data_to_port(cmd); //put data on PORT
 350:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>
	
	RS_LOW; // send command
 354:	42 98       	cbi	0x08, 2	; 8
	RW_LOW; // write operation
 356:	41 98       	cbi	0x08, 1	; 8
		
	// enable pulse
	E_HIGH;
 358:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	8f e8       	ldi	r24, 0x8F	; 143
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <lcd_send_cmd+0xe>
 362:	00 c0       	rjmp	.+0      	; 0x364 <lcd_send_cmd+0x14>
 364:	00 00       	nop
		_delay_us(100); 
	E_LOW;
 366:	40 98       	cbi	0x08, 0	; 8
 368:	08 95       	ret

0000036a <setup_lcd>:
#include <avr/io.h>

void setup_lcd()
{	
	// PORT setup
	DDRC |= (1<<RS)  | (1<<RW)  | (1<<E) | (1<<DB0) | (1<<DB1) | (1<<DB2) | (1<<DB3) | (1<<DB4) ;
 36a:	87 b1       	in	r24, 0x07	; 7
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	87 b9       	out	0x07, r24	; 7
	DDRG |= (1<<DB5) | (1<<DB6);
 370:	83 b3       	in	r24, 0x13	; 19
 372:	83 60       	ori	r24, 0x03	; 3
 374:	83 bb       	out	0x13, r24	; 19
	DDRD |= (1<<DB7);
 376:	57 9a       	sbi	0x0a, 7	; 10
	
	
	E_LOW;
 378:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	2f ef       	ldi	r18, 0xFF	; 255
 37c:	83 ed       	ldi	r24, 0xD3	; 211
 37e:	90 e3       	ldi	r25, 0x30	; 48
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <setup_lcd+0x16>
 388:	00 c0       	rjmp	.+0      	; 0x38a <setup_lcd+0x20>
 38a:	00 00       	nop
		_delay_ms(1000); // at least 40 ms
	
	lcd_send_cmd(WAKE_UP);
 38c:	80 e3       	ldi	r24, 0x30	; 48
 38e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
 392:	8f e3       	ldi	r24, 0x3F	; 63
 394:	9c e9       	ldi	r25, 0x9C	; 156
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <setup_lcd+0x2c>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <setup_lcd+0x32>
 39c:	00 00       	nop
	_delay_ms(10); // at least 5 ms
		
	lcd_send_cmd(MODE_8_BIT | MODE_2_LINE); // 8-bit mode, 2-line mode
 39e:	88 e3       	ldi	r24, 0x38	; 56
 3a0:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	lcd_send_cmd(0x10); // set cursor
 3a4:	80 e1       	ldi	r24, 0x10	; 16
 3a6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	lcd_send_cmd(DISPLAY_ON); // turn on entire display, cursor is on
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	lcd_send_cmd(CLEAR_DISPLAY);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	lcd_send_cmd(INCREMENT_CURSOR); // cursor automatically increments after a character is written
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
 3bc:	08 95       	ret

000003be <lcd_send_data>:
	E_LOW;
}

void lcd_send_data(char data)
{
	data_to_port(data); //put data on PORT
 3be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <data_to_port>

	RS_HIGH; // send data
 3c2:	42 9a       	sbi	0x08, 2	; 8
	RW_LOW; // write operation
 3c4:	41 98       	cbi	0x08, 1	; 8

	// enable pulse
	E_HIGH;
 3c6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	8f e8       	ldi	r24, 0x8F	; 143
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_send_data+0xe>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_send_data+0x14>
 3d2:	00 00       	nop
		_delay_us(100);
	E_LOW;	
 3d4:	40 98       	cbi	0x08, 0	; 8
 3d6:	08 95       	ret

000003d8 <lcd_set_cursor>:
	else
		PORTD &= ~(1<<DB7);
}

void lcd_set_cursor(char row, char column)
{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	00 d0       	rcall	.+0      	; 0x3de <lcd_set_cursor+0x6>
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	unsigned char address[2] = {LINE_1, LINE_2};
 3e2:	90 e8       	ldi	r25, 0x80	; 128
 3e4:	99 83       	std	Y+1, r25	; 0x01
 3e6:	90 ec       	ldi	r25, 0xC0	; 192
 3e8:	9a 83       	std	Y+2, r25	; 0x02
	lcd_send_cmd(address[row-1] + (column-1));
 3ea:	fe 01       	movw	r30, r28
 3ec:	e8 0f       	add	r30, r24
 3ee:	f1 1d       	adc	r31, r1
 3f0:	61 50       	subi	r22, 0x01	; 1
 3f2:	80 81       	ld	r24, Z
 3f4:	86 0f       	add	r24, r22
 3f6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
 3fa:	8f e8       	ldi	r24, 0x8F	; 143
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_set_cursor+0x26>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_us(100);
}
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <lcd_print>:

void lcd_print(char *str)
{
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	fc 01       	movw	r30, r24
	unsigned char i =0;
	while(str[i] != 0)
 418:	80 81       	ld	r24, Z
 41a:	88 23       	and	r24, r24
 41c:	59 f0       	breq	.+22     	; 0x434 <lcd_print+0x24>
 41e:	8f 01       	movw	r16, r30
 420:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_send_data(str[i]);
 422:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_send_data>
		i++;
 426:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i =0;
	while(str[i] != 0)
 428:	f8 01       	movw	r30, r16
 42a:	ec 0f       	add	r30, r28
 42c:	f1 1d       	adc	r31, r1
 42e:	80 81       	ld	r24, Z
 430:	81 11       	cpse	r24, r1
 432:	f7 cf       	rjmp	.-18     	; 0x422 <lcd_print+0x12>
	{
		lcd_send_data(str[i]);
		i++;
	}
}
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	08 95       	ret

0000043c <lcd_print_int>:

void lcd_print_int(int number)
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	60 97       	sbiw	r28, 0x10	; 16
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	fc 01       	movw	r30, r24
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	41 f0       	breq	.+16     	; 0x466 <lcd_print_int+0x2a>
	{
		temp = temp /10;
 456:	2a e0       	ldi	r18, 0x0A	; 10
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
 460:	cb 01       	movw	r24, r22
void lcd_print_int(int number)
{
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	d1 f7       	brne	.-12     	; 0x45a <lcd_print_int+0x1e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 466:	4a e0       	ldi	r20, 0x0A	; 10
 468:	be 01       	movw	r22, r28
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	cf 01       	movw	r24, r30
 470:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__itoa_ncheck>
	}
	if (number<0) num_digit++;
	char char_array[MAX_LCD_STRING_SIZE];
	itoa(number, char_array,10);

	lcd_print(char_array);
 474:	ce 01       	movw	r24, r28
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
}
 47c:	60 96       	adiw	r28, 0x10	; 16
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <setup_TMR1>:
    }
}

void setup_TMR1()
{
	TCCR1B |= (1<<CS12); // 256 prescaler, CTC mode
 48e:	e1 e8       	ldi	r30, 0x81	; 129
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	84 60       	ori	r24, 0x04	; 4
 496:	80 83       	st	Z, r24
 498:	08 95       	ret

0000049a <main>:
	
uint8_t status = 0;

int main(void)
{
	setup_ports();
 49a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setup_ports>
	setup_TMR1();
 49e:	0e 94 47 02 	call	0x48e	; 0x48e <setup_TMR1>
	setup_lcd();
 4a2:	0e 94 b5 01 	call	0x36a	; 0x36a <setup_lcd>
	setup_adc();
 4a6:	0e 94 91 00 	call	0x122	; 0x122 <setup_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4aa:	8f e3       	ldi	r24, 0x3F	; 63
 4ac:	9c e9       	ldi	r25, 0x9C	; 156
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <main+0x14>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0x1a>
 4b4:	00 00       	nop
	_delay_ms(10);
	lcd_set_cursor(1,1);
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("Initializing...");
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
 4c6:	ef ed       	ldi	r30, 0xDF	; 223
 4c8:	fe e2       	ldi	r31, 0x2E	; 46
 4ca:	31 97       	sbiw	r30, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <main+0x30>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0x36>
 4d0:	00 00       	nop
	_delay_ms(3);
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 97 04 	call	0x92e	; 0x92e <setup_usart0>
	mirf_init();
 4d8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <mirf_init>
 4dc:	ff ef       	ldi	r31, 0xFF	; 255
 4de:	27 ea       	ldi	r18, 0xA7	; 167
 4e0:	81 e6       	ldi	r24, 0x61	; 97
 4e2:	f1 50       	subi	r31, 0x01	; 1
 4e4:	20 40       	sbci	r18, 0x00	; 0
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <main+0x48>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <main+0x52>
 4ec:	00 00       	nop
	_delay_ms(2000);	
	lcd_send_cmd(CLEAR_DISPLAY);
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
	
	LED_check();
 4f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LED_check>
	
	sei(); // enable global interrupts
 4f8:	78 94       	sei
	
	mirf_config();
 4fa:	0e 94 8a 03 	call	0x714	; 0x714 <mirf_config>
	
	 /* Set the device addresses */
	mirf_set_TADDR(tx_address);
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	92 e0       	ldi	r25, 0x02	; 2
 502:	0e 94 e6 03 	call	0x7cc	; 0x7cc <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	0e 94 de 03 	call	0x7bc	; 0x7bc <mirf_set_RADDR>
 50e:	ef e3       	ldi	r30, 0x3F	; 63
 510:	fc e9       	ldi	r31, 0x9C	; 156
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <main+0x78>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0x7e>
 518:	00 00       	nop
	
	_delay_ms(10);
	
	print_0("System initialized...;");
 51a:	8a e1       	ldi	r24, 0x1A	; 26
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	0e 94 4c 04 	call	0x898	; 0x898 <print_0>
	
	lcd_send_cmd(CLEAR_DISPLAY);
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_send_cmd>
 528:	8f ed       	ldi	r24, 0xDF	; 223
 52a:	9e e2       	ldi	r25, 0x2E	; 46
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <main+0x92>
 530:	00 c0       	rjmp	.+0      	; 0x532 <main+0x98>
 532:	00 00       	nop
	_delay_ms(3);

	lcd_set_cursor(1,1);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("mtr:  ");
 53c:	81 e3       	ldi	r24, 0x31	; 49
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	
	lcd_set_cursor(2,1);
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("srv: ");
 54c:	88 e3       	ldi	r24, 0x38	; 56
 54e:	92 e0       	ldi	r25, 0x02	; 2
 550:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
	
	lcd_set_cursor(1,11);
 554:	6b e0       	ldi	r22, 0x0B	; 11
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
	lcd_print("RF: ");
 55c:	8e e3       	ldi	r24, 0x3E	; 62
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>

    while (1) 
    {
		
		TOGGLE_LED1;
 564:	0f 2e       	mov	r0, r31
 566:	fb e0       	ldi	r31, 0x0B	; 11
 568:	ef 2e       	mov	r14, r31
 56a:	ff 24       	eor	r15, r15
 56c:	f3 94       	inc	r15
 56e:	f0 2d       	mov	r31, r0
 570:	99 24       	eor	r9, r9
 572:	93 94       	inc	r9
		lcd_print_int(comm_lost_count);
		lcd_print(" ");
		
		mtr_cmd = analog_get_average(POT1, 5);
		mtr_cmd /= ADC_SCALING;
		buffer[0] = mtr_cmd;
 574:	09 e4       	ldi	r16, 0x49	; 73
 576:	12 e0       	ldi	r17, 0x02	; 2
		srv_cmd = analog_get_average(POT2, 5);
		srv_cmd /= ADC_SCALING;
		if (srv_cmd < 5)
			srv_cmd = 0;
		else if (srv_cmd > 45)
			srv_cmd = 45;
 578:	0f 2e       	mov	r0, r31
 57a:	fd e2       	ldi	r31, 0x2D	; 45
 57c:	af 2e       	mov	r10, r31
 57e:	b1 2c       	mov	r11, r1
 580:	f0 2d       	mov	r31, r0
		buffer[1] = srv_cmd;
 582:	0f 2e       	mov	r0, r31
 584:	f5 e4       	ldi	r31, 0x45	; 69
 586:	cf 2e       	mov	r12, r31
 588:	f2 e0       	ldi	r31, 0x02	; 2
 58a:	df 2e       	mov	r13, r31
 58c:	f0 2d       	mov	r31, r0

}

void reset_TMR1()
{
	TCNT1 = 0;
 58e:	c4 e8       	ldi	r28, 0x84	; 132
 590:	d0 e0       	ldi	r29, 0x00	; 0
		while (!mirf_data_sent())
		{
			if (TCNT1 > 62499) // timeout of one second
			{
				comm_lost_count++;
				TOGGLE_LED6;
 592:	68 94       	set
 594:	88 24       	eor	r8, r8
 596:	85 f8       	bld	r8, 5
	lcd_print("RF: ");

    while (1) 
    {
		
		TOGGLE_LED1;
 598:	f7 01       	movw	r30, r14
 59a:	80 81       	ld	r24, Z
 59c:	89 25       	eor	r24, r9
 59e:	80 83       	st	Z, r24
		lcd_set_cursor(1,5);
 5a0:	65 e0       	ldi	r22, 0x05	; 5
 5a2:	89 2d       	mov	r24, r9
 5a4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		if (mtr_cmd > 99)
 5a8:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <mtr_cmd>
 5ac:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <mtr_cmd+0x1>
 5b0:	84 36       	cpi	r24, 0x64	; 100
 5b2:	91 05       	cpc	r25, r1
 5b4:	2c f0       	brlt	.+10     	; 0x5c0 <main+0x126>
		lcd_print_int(99);
 5b6:	83 e6       	ldi	r24, 0x63	; 99
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <main+0x12a>
		else
		lcd_print_int(mtr_cmd);
 5c0:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_print(" ");
 5c4:	86 e3       	ldi	r24, 0x36	; 54
 5c6:	92 e0       	ldi	r25, 0x02	; 2
 5c8:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
		lcd_set_cursor(2,5);
 5cc:	65 e0       	ldi	r22, 0x05	; 5
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(srv_cmd);
 5d4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <srv_cmd>
 5d8:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <srv_cmd+0x1>
 5dc:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_print(" ");
 5e0:	86 e3       	ldi	r24, 0x36	; 54
 5e2:	92 e0       	ldi	r25, 0x02	; 2
 5e4:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
		lcd_set_cursor(1,15);
 5e8:	6f e0       	ldi	r22, 0x0F	; 15
 5ea:	89 2d       	mov	r24, r9
 5ec:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_set_cursor>
		lcd_print_int(comm_lost_count);
 5f0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_print_int>
		lcd_print(" ");
 5fa:	86 e3       	ldi	r24, 0x36	; 54
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	0e 94 08 02 	call	0x410	; 0x410 <lcd_print>
		
		mtr_cmd = analog_get_average(POT1, 5);
 602:	65 e0       	ldi	r22, 0x05	; 5
 604:	86 e0       	ldi	r24, 0x06	; 6
 606:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
		mtr_cmd /= ADC_SCALING;
 60a:	bc 01       	movw	r22, r24
 60c:	99 0f       	add	r25, r25
 60e:	88 0b       	sbc	r24, r24
 610:	99 0b       	sbc	r25, r25
 612:	0e 94 4a 05 	call	0xa94	; 0xa94 <__floatsisf>
 616:	24 e1       	ldi	r18, 0x14	; 20
 618:	3e ea       	ldi	r19, 0xAE	; 174
 61a:	43 e2       	ldi	r20, 0x23	; 35
 61c:	51 e4       	ldi	r21, 0x41	; 65
 61e:	0e 94 a0 04 	call	0x940	; 0x940 <__divsf3>
 622:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixsfsi>
 626:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <mtr_cmd>
 62a:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <mtr_cmd+0x1>
		buffer[0] = mtr_cmd;
 62e:	f8 01       	movw	r30, r16
 630:	60 83       	st	Z, r22
		srv_cmd = analog_get_average(POT2, 5);
 632:	65 e0       	ldi	r22, 0x05	; 5
 634:	84 e0       	ldi	r24, 0x04	; 4
 636:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
		srv_cmd /= ADC_SCALING;
 63a:	bc 01       	movw	r22, r24
 63c:	99 0f       	add	r25, r25
 63e:	88 0b       	sbc	r24, r24
 640:	99 0b       	sbc	r25, r25
 642:	0e 94 4a 05 	call	0xa94	; 0xa94 <__floatsisf>
 646:	24 e1       	ldi	r18, 0x14	; 20
 648:	3e ea       	ldi	r19, 0xAE	; 174
 64a:	43 e2       	ldi	r20, 0x23	; 35
 64c:	51 e4       	ldi	r21, 0x41	; 65
 64e:	0e 94 a0 04 	call	0x940	; 0x940 <__divsf3>
 652:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixsfsi>
		if (srv_cmd < 5)
 656:	65 30       	cpi	r22, 0x05	; 5
 658:	71 05       	cpc	r23, r1
 65a:	2c f4       	brge	.+10     	; 0x666 <main+0x1cc>
			srv_cmd = 0;
 65c:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <srv_cmd+0x1>
 660:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <srv_cmd>
 664:	0c c0       	rjmp	.+24     	; 0x67e <main+0x1e4>
		else if (srv_cmd > 45)
 666:	6e 32       	cpi	r22, 0x2E	; 46
 668:	71 05       	cpc	r23, r1
 66a:	2c f4       	brge	.+10     	; 0x676 <main+0x1dc>
		
		mtr_cmd = analog_get_average(POT1, 5);
		mtr_cmd /= ADC_SCALING;
		buffer[0] = mtr_cmd;
		srv_cmd = analog_get_average(POT2, 5);
		srv_cmd /= ADC_SCALING;
 66c:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <srv_cmd+0x1>
 670:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <srv_cmd>
 674:	04 c0       	rjmp	.+8      	; 0x67e <main+0x1e4>
		if (srv_cmd < 5)
			srv_cmd = 0;
		else if (srv_cmd > 45)
			srv_cmd = 45;
 676:	b0 92 46 02 	sts	0x0246, r11	; 0x800246 <srv_cmd+0x1>
 67a:	a0 92 45 02 	sts	0x0245, r10	; 0x800245 <srv_cmd>
		buffer[1] = srv_cmd;
 67e:	f6 01       	movw	r30, r12
 680:	80 81       	ld	r24, Z
 682:	f8 01       	movw	r30, r16
 684:	81 83       	std	Z+1, r24	; 0x01
		
		mirf_send(buffer, mirf_PAYLOAD);
 686:	62 e0       	ldi	r22, 0x02	; 2
 688:	c8 01       	movw	r24, r16
 68a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68e:	f5 e3       	ldi	r31, 0x35	; 53
 690:	fa 95       	dec	r31
 692:	f1 f7       	brne	.-4      	; 0x690 <main+0x1f6>
 694:	00 00       	nop

}

void reset_TMR1()
{
	TCNT1 = 0;
 696:	19 82       	std	Y+1, r1	; 0x01
 698:	18 82       	st	Y, r1
 69a:	0f c0       	rjmp	.+30     	; 0x6ba <main+0x220>
		reset_TMR1();
		//TOGGLE_LED6;
		
		while (!mirf_data_sent())
		{
			if (TCNT1 > 62499) // timeout of one second
 69c:	88 81       	ld	r24, Y
 69e:	99 81       	ldd	r25, Y+1	; 0x01
 6a0:	84 32       	cpi	r24, 0x24	; 36
 6a2:	94 4f       	sbci	r25, 0xF4	; 244
 6a4:	50 f0       	brcs	.+20     	; 0x6ba <main+0x220>
			{
				comm_lost_count++;
 6a6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end>
				TOGGLE_LED6;
 6b0:	f7 01       	movw	r30, r14
 6b2:	80 81       	ld	r24, Z
 6b4:	88 25       	eor	r24, r8
 6b6:	80 83       	st	Z, r24
				break;
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <main+0x228>
		mirf_send(buffer, mirf_PAYLOAD);
		_delay_us(10);
		reset_TMR1();
		//TOGGLE_LED6;
		
		while (!mirf_data_sent())
 6ba:	0e 94 76 03 	call	0x6ec	; 0x6ec <mirf_data_sent>
 6be:	88 23       	and	r24, r24
 6c0:	69 f3       	breq	.-38     	; 0x69c <main+0x202>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c2:	8f e3       	ldi	r24, 0x3F	; 63
 6c4:	9c e9       	ldi	r25, 0x9C	; 156
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <main+0x22c>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x232>
 6cc:	00 00       	nop
 6ce:	64 cf       	rjmp	.-312    	; 0x598 <main+0xfe>

000006d0 <mirf_init>:
 6d0:	54 9a       	sbi	0x0a, 4	; 10
 6d2:	20 9a       	sbi	0x04, 0	; 4
 6d4:	5c 98       	cbi	0x0b, 4	; 11
 6d6:	28 9a       	sbi	0x05, 0	; 5
 6d8:	ea 98       	cbi	0x1d, 2	; 29
 6da:	e9 e6       	ldi	r30, 0x69	; 105
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	80 62       	ori	r24, 0x20	; 32
 6e2:	80 83       	st	Z, r24
 6e4:	ea 9a       	sbi	0x1d, 2	; 29
 6e6:	0e 94 6f 04 	call	0x8de	; 0x8de <spi_master_initialize>
 6ea:	08 95       	ret

000006ec <mirf_data_sent>:
 6ec:	28 98       	cbi	0x05, 0	; 5
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <spi_exchange_char>
 6f4:	28 9a       	sbi	0x05, 0	; 5
 6f6:	80 72       	andi	r24, 0x20	; 32
 6f8:	08 95       	ret

000006fa <mirf_config_register>:
 6fa:	cf 93       	push	r28
 6fc:	c6 2f       	mov	r28, r22
 6fe:	28 98       	cbi	0x05, 0	; 5
 700:	8f 71       	andi	r24, 0x1F	; 31
 702:	80 62       	ori	r24, 0x20	; 32
 704:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_send_char>
 708:	8c 2f       	mov	r24, r28
 70a:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_send_char>
 70e:	28 9a       	sbi	0x05, 0	; 5
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <mirf_config>:
 714:	6c e6       	ldi	r22, 0x6C	; 108
 716:	85 e0       	ldi	r24, 0x05	; 5
 718:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 71c:	6f ef       	ldi	r22, 0xFF	; 255
 71e:	84 e0       	ldi	r24, 0x04	; 4
 720:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	81 e1       	ldi	r24, 0x11	; 17
 728:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 72c:	62 e0       	ldi	r22, 0x02	; 2
 72e:	82 e1       	ldi	r24, 0x12	; 18
 730:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	83 e1       	ldi	r24, 0x13	; 19
 738:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	84 e1       	ldi	r24, 0x14	; 20
 740:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	85 e1       	ldi	r24, 0x15	; 21
 748:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	86 e1       	ldi	r24, 0x16	; 22
 750:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 754:	66 e2       	ldi	r22, 0x26	; 38
 756:	86 e0       	ldi	r24, 0x06	; 6
 758:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 75c:	63 e0       	ldi	r22, 0x03	; 3
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 764:	63 e0       	ldi	r22, 0x03	; 3
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 76c:	6f e4       	ldi	r22, 0x4F	; 79
 76e:	84 e0       	ldi	r24, 0x04	; 4
 770:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 774:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <PTX>
 778:	60 e7       	ldi	r22, 0x70	; 112
 77a:	87 e0       	ldi	r24, 0x07	; 7
 77c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 780:	28 98       	cbi	0x05, 0	; 5
 782:	81 ee       	ldi	r24, 0xE1	; 225
 784:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_send_char>
 788:	28 9a       	sbi	0x05, 0	; 5
 78a:	6b e5       	ldi	r22, 0x5B	; 91
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 792:	5c 9a       	sbi	0x0b, 4	; 11
 794:	08 95       	ret

00000796 <mirf_write_register>:
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	eb 01       	movw	r28, r22
 79e:	14 2f       	mov	r17, r20
 7a0:	28 98       	cbi	0x05, 0	; 5
 7a2:	8f 71       	andi	r24, 0x1F	; 31
 7a4:	80 62       	ori	r24, 0x20	; 32
 7a6:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_send_char>
 7aa:	61 2f       	mov	r22, r17
 7ac:	ce 01       	movw	r24, r28
 7ae:	0e 94 80 04 	call	0x900	; 0x900 <spi_send_bytes>
 7b2:	28 9a       	sbi	0x05, 0	; 5
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	08 95       	ret

000007bc <mirf_set_RADDR>:
 7bc:	5c 98       	cbi	0x0b, 4	; 11
 7be:	45 e0       	ldi	r20, 0x05	; 5
 7c0:	bc 01       	movw	r22, r24
 7c2:	8b e0       	ldi	r24, 0x0B	; 11
 7c4:	0e 94 cb 03 	call	0x796	; 0x796 <mirf_write_register>
 7c8:	5c 9a       	sbi	0x0b, 4	; 11
 7ca:	08 95       	ret

000007cc <mirf_set_TADDR>:
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	ec 01       	movw	r28, r24
 7d2:	45 e0       	ldi	r20, 0x05	; 5
 7d4:	bc 01       	movw	r22, r24
 7d6:	8a e0       	ldi	r24, 0x0A	; 10
 7d8:	0e 94 cb 03 	call	0x796	; 0x796 <mirf_write_register>
 7dc:	45 e0       	ldi	r20, 0x05	; 5
 7de:	be 01       	movw	r22, r28
 7e0:	80 e1       	ldi	r24, 0x10	; 16
 7e2:	0e 94 cb 03 	call	0x796	; 0x796 <mirf_write_register>
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <mirf_send>:
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	ec 01       	movw	r28, r24
 7f4:	16 2f       	mov	r17, r22
 7f6:	5c 98       	cbi	0x0b, 4	; 11
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <PTX>
 7fe:	6a e5       	ldi	r22, 0x5A	; 90
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 806:	28 98       	cbi	0x05, 0	; 5
 808:	81 ee       	ldi	r24, 0xE1	; 225
 80a:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_send_char>
 80e:	28 9a       	sbi	0x05, 0	; 5
 810:	60 e7       	ldi	r22, 0x70	; 112
 812:	87 e0       	ldi	r24, 0x07	; 7
 814:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 818:	28 98       	cbi	0x05, 0	; 5
 81a:	80 ea       	ldi	r24, 0xA0	; 160
 81c:	0e 94 75 04 	call	0x8ea	; 0x8ea <spi_send_char>
 820:	61 2f       	mov	r22, r17
 822:	ce 01       	movw	r24, r28
 824:	0e 94 80 04 	call	0x900	; 0x900 <spi_send_bytes>
 828:	28 9a       	sbi	0x05, 0	; 5
 82a:	5c 9a       	sbi	0x0b, 4	; 11
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	08 95       	ret

00000834 <__vector_4>:
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	2f 93       	push	r18
 840:	3f 93       	push	r19
 842:	4f 93       	push	r20
 844:	5f 93       	push	r21
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	af 93       	push	r26
 850:	bf 93       	push	r27
 852:	ef 93       	push	r30
 854:	ff 93       	push	r31
 856:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <PTX>
 85a:	88 23       	and	r24, r24
 85c:	61 f0       	breq	.+24     	; 0x876 <__vector_4+0x42>
 85e:	88 e4       	ldi	r24, 0x48	; 72
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 4c 04 	call	0x898	; 0x898 <print_0>
 866:	5c 98       	cbi	0x0b, 4	; 11
 868:	6b e5       	ldi	r22, 0x5B	; 91
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mirf_config_register>
 870:	5c 9a       	sbi	0x0b, 4	; 11
 872:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <PTX>
 876:	ff 91       	pop	r31
 878:	ef 91       	pop	r30
 87a:	bf 91       	pop	r27
 87c:	af 91       	pop	r26
 87e:	9f 91       	pop	r25
 880:	8f 91       	pop	r24
 882:	7f 91       	pop	r23
 884:	6f 91       	pop	r22
 886:	5f 91       	pop	r21
 888:	4f 91       	pop	r20
 88a:	3f 91       	pop	r19
 88c:	2f 91       	pop	r18
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <print_0>:
 898:	0f 93       	push	r16
 89a:	1f 93       	push	r17
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	fc 01       	movw	r30, r24
 8a2:	80 81       	ld	r24, Z
 8a4:	8a 30       	cpi	r24, 0x0A	; 10
 8a6:	b1 f0       	breq	.+44     	; 0x8d4 <print_0+0x3c>
 8a8:	8b 33       	cpi	r24, 0x3B	; 59
 8aa:	61 f4       	brne	.+24     	; 0x8c4 <print_0+0x2c>
 8ac:	13 c0       	rjmp	.+38     	; 0x8d4 <print_0+0x3c>
 8ae:	89 91       	ld	r24, Y+
 8b0:	8a 30       	cpi	r24, 0x0A	; 10
 8b2:	81 f0       	breq	.+32     	; 0x8d4 <print_0+0x3c>
 8b4:	8b 33       	cpi	r24, 0x3B	; 59
 8b6:	71 f0       	breq	.+28     	; 0x8d4 <print_0+0x3c>
 8b8:	0e 94 8f 04 	call	0x91e	; 0x91e <usart0_send_char>
 8bc:	0c 17       	cp	r16, r28
 8be:	1d 07       	cpc	r17, r29
 8c0:	b1 f7       	brne	.-20     	; 0x8ae <print_0+0x16>
 8c2:	08 c0       	rjmp	.+16     	; 0x8d4 <print_0+0x3c>
 8c4:	8f 01       	movw	r16, r30
 8c6:	0e 94 8f 04 	call	0x91e	; 0x91e <usart0_send_char>
 8ca:	e8 01       	movw	r28, r16
 8cc:	21 96       	adiw	r28, 0x01	; 1
 8ce:	08 53       	subi	r16, 0x38	; 56
 8d0:	1f 4f       	sbci	r17, 0xFF	; 255
 8d2:	ed cf       	rjmp	.-38     	; 0x8ae <print_0+0x16>
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	08 95       	ret

000008de <spi_master_initialize>:
 8de:	84 b1       	in	r24, 0x04	; 4
 8e0:	87 60       	ori	r24, 0x07	; 7
 8e2:	84 b9       	out	0x04, r24	; 4
 8e4:	81 e5       	ldi	r24, 0x51	; 81
 8e6:	8c bd       	out	0x2c, r24	; 44
 8e8:	08 95       	ret

000008ea <spi_send_char>:
 8ea:	8e bd       	out	0x2e, r24	; 46
 8ec:	0d b4       	in	r0, 0x2d	; 45
 8ee:	07 fe       	sbrs	r0, 7
 8f0:	fd cf       	rjmp	.-6      	; 0x8ec <spi_send_char+0x2>
 8f2:	08 95       	ret

000008f4 <spi_exchange_char>:
 8f4:	8e bd       	out	0x2e, r24	; 46
 8f6:	0d b4       	in	r0, 0x2d	; 45
 8f8:	07 fe       	sbrs	r0, 7
 8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <spi_exchange_char+0x2>
 8fc:	8e b5       	in	r24, 0x2e	; 46
 8fe:	08 95       	ret

00000900 <spi_send_bytes>:
 900:	66 23       	and	r22, r22
 902:	61 f0       	breq	.+24     	; 0x91c <spi_send_bytes+0x1c>
 904:	fc 01       	movw	r30, r24
 906:	9c 01       	movw	r18, r24
 908:	26 0f       	add	r18, r22
 90a:	31 1d       	adc	r19, r1
 90c:	91 91       	ld	r25, Z+
 90e:	9e bd       	out	0x2e, r25	; 46
 910:	0d b4       	in	r0, 0x2d	; 45
 912:	07 fe       	sbrs	r0, 7
 914:	fd cf       	rjmp	.-6      	; 0x910 <spi_send_bytes+0x10>
 916:	e2 17       	cp	r30, r18
 918:	f3 07       	cpc	r31, r19
 91a:	c1 f7       	brne	.-16     	; 0x90c <spi_send_bytes+0xc>
 91c:	08 95       	ret

0000091e <usart0_send_char>:
 91e:	e0 ec       	ldi	r30, 0xC0	; 192
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	90 81       	ld	r25, Z
 924:	95 ff       	sbrs	r25, 5
 926:	fd cf       	rjmp	.-6      	; 0x922 <usart0_send_char+0x4>
 928:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 92c:	08 95       	ret

0000092e <setup_usart0>:
 92e:	98 e1       	ldi	r25, 0x18	; 24
 930:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 934:	96 e0       	ldi	r25, 0x06	; 6
 936:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 93a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 93e:	08 95       	ret

00000940 <__divsf3>:
 940:	0e 94 b4 04 	call	0x968	; 0x968 <__divsf3x>
 944:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_round>
 948:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_pscB>
 94c:	58 f0       	brcs	.+22     	; 0x964 <__divsf3+0x24>
 94e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscA>
 952:	40 f0       	brcs	.+16     	; 0x964 <__divsf3+0x24>
 954:	29 f4       	brne	.+10     	; 0x960 <__divsf3+0x20>
 956:	5f 3f       	cpi	r21, 0xFF	; 255
 958:	29 f0       	breq	.+10     	; 0x964 <__divsf3+0x24>
 95a:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 95e:	51 11       	cpse	r21, r1
 960:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
 964:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_nan>

00000968 <__divsf3x>:
 968:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_split3>
 96c:	68 f3       	brcs	.-38     	; 0x948 <__divsf3+0x8>

0000096e <__divsf3_pse>:
 96e:	99 23       	and	r25, r25
 970:	b1 f3       	breq	.-20     	; 0x95e <__divsf3+0x1e>
 972:	55 23       	and	r21, r21
 974:	91 f3       	breq	.-28     	; 0x95a <__divsf3+0x1a>
 976:	95 1b       	sub	r25, r21
 978:	55 0b       	sbc	r21, r21
 97a:	bb 27       	eor	r27, r27
 97c:	aa 27       	eor	r26, r26
 97e:	62 17       	cp	r22, r18
 980:	73 07       	cpc	r23, r19
 982:	84 07       	cpc	r24, r20
 984:	38 f0       	brcs	.+14     	; 0x994 <__divsf3_pse+0x26>
 986:	9f 5f       	subi	r25, 0xFF	; 255
 988:	5f 4f       	sbci	r21, 0xFF	; 255
 98a:	22 0f       	add	r18, r18
 98c:	33 1f       	adc	r19, r19
 98e:	44 1f       	adc	r20, r20
 990:	aa 1f       	adc	r26, r26
 992:	a9 f3       	breq	.-22     	; 0x97e <__divsf3_pse+0x10>
 994:	35 d0       	rcall	.+106    	; 0xa00 <__divsf3_pse+0x92>
 996:	0e 2e       	mov	r0, r30
 998:	3a f0       	brmi	.+14     	; 0x9a8 <__divsf3_pse+0x3a>
 99a:	e0 e8       	ldi	r30, 0x80	; 128
 99c:	32 d0       	rcall	.+100    	; 0xa02 <__divsf3_pse+0x94>
 99e:	91 50       	subi	r25, 0x01	; 1
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	e6 95       	lsr	r30
 9a4:	00 1c       	adc	r0, r0
 9a6:	ca f7       	brpl	.-14     	; 0x99a <__divsf3_pse+0x2c>
 9a8:	2b d0       	rcall	.+86     	; 0xa00 <__divsf3_pse+0x92>
 9aa:	fe 2f       	mov	r31, r30
 9ac:	29 d0       	rcall	.+82     	; 0xa00 <__divsf3_pse+0x92>
 9ae:	66 0f       	add	r22, r22
 9b0:	77 1f       	adc	r23, r23
 9b2:	88 1f       	adc	r24, r24
 9b4:	bb 1f       	adc	r27, r27
 9b6:	26 17       	cp	r18, r22
 9b8:	37 07       	cpc	r19, r23
 9ba:	48 07       	cpc	r20, r24
 9bc:	ab 07       	cpc	r26, r27
 9be:	b0 e8       	ldi	r27, 0x80	; 128
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <__divsf3_pse+0x56>
 9c2:	bb 0b       	sbc	r27, r27
 9c4:	80 2d       	mov	r24, r0
 9c6:	bf 01       	movw	r22, r30
 9c8:	ff 27       	eor	r31, r31
 9ca:	93 58       	subi	r25, 0x83	; 131
 9cc:	5f 4f       	sbci	r21, 0xFF	; 255
 9ce:	3a f0       	brmi	.+14     	; 0x9de <__divsf3_pse+0x70>
 9d0:	9e 3f       	cpi	r25, 0xFE	; 254
 9d2:	51 05       	cpc	r21, r1
 9d4:	78 f0       	brcs	.+30     	; 0x9f4 <__divsf3_pse+0x86>
 9d6:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 9da:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	e4 f3       	brlt	.-8      	; 0x9da <__divsf3_pse+0x6c>
 9e2:	98 3e       	cpi	r25, 0xE8	; 232
 9e4:	d4 f3       	brlt	.-12     	; 0x9da <__divsf3_pse+0x6c>
 9e6:	86 95       	lsr	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f7 95       	ror	r31
 9f0:	9f 5f       	subi	r25, 0xFF	; 255
 9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__divsf3_pse+0x78>
 9f4:	88 0f       	add	r24, r24
 9f6:	91 1d       	adc	r25, r1
 9f8:	96 95       	lsr	r25
 9fa:	87 95       	ror	r24
 9fc:	97 f9       	bld	r25, 7
 9fe:	08 95       	ret
 a00:	e1 e0       	ldi	r30, 0x01	; 1
 a02:	66 0f       	add	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	bb 1f       	adc	r27, r27
 a0a:	62 17       	cp	r22, r18
 a0c:	73 07       	cpc	r23, r19
 a0e:	84 07       	cpc	r24, r20
 a10:	ba 07       	cpc	r27, r26
 a12:	20 f0       	brcs	.+8      	; 0xa1c <__divsf3_pse+0xae>
 a14:	62 1b       	sub	r22, r18
 a16:	73 0b       	sbc	r23, r19
 a18:	84 0b       	sbc	r24, r20
 a1a:	ba 0b       	sbc	r27, r26
 a1c:	ee 1f       	adc	r30, r30
 a1e:	88 f7       	brcc	.-30     	; 0xa02 <__divsf3_pse+0x94>
 a20:	e0 95       	com	r30
 a22:	08 95       	ret

00000a24 <__fixsfsi>:
 a24:	0e 94 19 05 	call	0xa32	; 0xa32 <__fixunssfsi>
 a28:	68 94       	set
 a2a:	b1 11       	cpse	r27, r1
 a2c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
 a30:	08 95       	ret

00000a32 <__fixunssfsi>:
 a32:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_splitA>
 a36:	88 f0       	brcs	.+34     	; 0xa5a <__fixunssfsi+0x28>
 a38:	9f 57       	subi	r25, 0x7F	; 127
 a3a:	98 f0       	brcs	.+38     	; 0xa62 <__fixunssfsi+0x30>
 a3c:	b9 2f       	mov	r27, r25
 a3e:	99 27       	eor	r25, r25
 a40:	b7 51       	subi	r27, 0x17	; 23
 a42:	b0 f0       	brcs	.+44     	; 0xa70 <__fixunssfsi+0x3e>
 a44:	e1 f0       	breq	.+56     	; 0xa7e <__fixunssfsi+0x4c>
 a46:	66 0f       	add	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	1a f0       	brmi	.+6      	; 0xa56 <__fixunssfsi+0x24>
 a50:	ba 95       	dec	r27
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__fixunssfsi+0x14>
 a54:	14 c0       	rjmp	.+40     	; 0xa7e <__fixunssfsi+0x4c>
 a56:	b1 30       	cpi	r27, 0x01	; 1
 a58:	91 f0       	breq	.+36     	; 0xa7e <__fixunssfsi+0x4c>
 a5a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_zero>
 a5e:	b1 e0       	ldi	r27, 0x01	; 1
 a60:	08 95       	ret
 a62:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_zero>
 a66:	67 2f       	mov	r22, r23
 a68:	78 2f       	mov	r23, r24
 a6a:	88 27       	eor	r24, r24
 a6c:	b8 5f       	subi	r27, 0xF8	; 248
 a6e:	39 f0       	breq	.+14     	; 0xa7e <__fixunssfsi+0x4c>
 a70:	b9 3f       	cpi	r27, 0xF9	; 249
 a72:	cc f3       	brlt	.-14     	; 0xa66 <__fixunssfsi+0x34>
 a74:	86 95       	lsr	r24
 a76:	77 95       	ror	r23
 a78:	67 95       	ror	r22
 a7a:	b3 95       	inc	r27
 a7c:	d9 f7       	brne	.-10     	; 0xa74 <__fixunssfsi+0x42>
 a7e:	3e f4       	brtc	.+14     	; 0xa8e <__fixunssfsi+0x5c>
 a80:	90 95       	com	r25
 a82:	80 95       	com	r24
 a84:	70 95       	com	r23
 a86:	61 95       	neg	r22
 a88:	7f 4f       	sbci	r23, 0xFF	; 255
 a8a:	8f 4f       	sbci	r24, 0xFF	; 255
 a8c:	9f 4f       	sbci	r25, 0xFF	; 255
 a8e:	08 95       	ret

00000a90 <__floatunsisf>:
 a90:	e8 94       	clt
 a92:	09 c0       	rjmp	.+18     	; 0xaa6 <__floatsisf+0x12>

00000a94 <__floatsisf>:
 a94:	97 fb       	bst	r25, 7
 a96:	3e f4       	brtc	.+14     	; 0xaa6 <__floatsisf+0x12>
 a98:	90 95       	com	r25
 a9a:	80 95       	com	r24
 a9c:	70 95       	com	r23
 a9e:	61 95       	neg	r22
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	99 23       	and	r25, r25
 aa8:	a9 f0       	breq	.+42     	; 0xad4 <__floatsisf+0x40>
 aaa:	f9 2f       	mov	r31, r25
 aac:	96 e9       	ldi	r25, 0x96	; 150
 aae:	bb 27       	eor	r27, r27
 ab0:	93 95       	inc	r25
 ab2:	f6 95       	lsr	r31
 ab4:	87 95       	ror	r24
 ab6:	77 95       	ror	r23
 ab8:	67 95       	ror	r22
 aba:	b7 95       	ror	r27
 abc:	f1 11       	cpse	r31, r1
 abe:	f8 cf       	rjmp	.-16     	; 0xab0 <__floatsisf+0x1c>
 ac0:	fa f4       	brpl	.+62     	; 0xb00 <__floatsisf+0x6c>
 ac2:	bb 0f       	add	r27, r27
 ac4:	11 f4       	brne	.+4      	; 0xaca <__floatsisf+0x36>
 ac6:	60 ff       	sbrs	r22, 0
 ac8:	1b c0       	rjmp	.+54     	; 0xb00 <__floatsisf+0x6c>
 aca:	6f 5f       	subi	r22, 0xFF	; 255
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	16 c0       	rjmp	.+44     	; 0xb00 <__floatsisf+0x6c>
 ad4:	88 23       	and	r24, r24
 ad6:	11 f0       	breq	.+4      	; 0xadc <__floatsisf+0x48>
 ad8:	96 e9       	ldi	r25, 0x96	; 150
 ada:	11 c0       	rjmp	.+34     	; 0xafe <__floatsisf+0x6a>
 adc:	77 23       	and	r23, r23
 ade:	21 f0       	breq	.+8      	; 0xae8 <__floatsisf+0x54>
 ae0:	9e e8       	ldi	r25, 0x8E	; 142
 ae2:	87 2f       	mov	r24, r23
 ae4:	76 2f       	mov	r23, r22
 ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <__floatsisf+0x5e>
 ae8:	66 23       	and	r22, r22
 aea:	71 f0       	breq	.+28     	; 0xb08 <__floatsisf+0x74>
 aec:	96 e8       	ldi	r25, 0x86	; 134
 aee:	86 2f       	mov	r24, r22
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	2a f0       	brmi	.+10     	; 0xb00 <__floatsisf+0x6c>
 af6:	9a 95       	dec	r25
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	da f7       	brpl	.-10     	; 0xaf6 <__floatsisf+0x62>
 b00:	88 0f       	add	r24, r24
 b02:	96 95       	lsr	r25
 b04:	87 95       	ror	r24
 b06:	97 f9       	bld	r25, 7
 b08:	08 95       	ret

00000b0a <__fp_inf>:
 b0a:	97 f9       	bld	r25, 7
 b0c:	9f 67       	ori	r25, 0x7F	; 127
 b0e:	80 e8       	ldi	r24, 0x80	; 128
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	60 e0       	ldi	r22, 0x00	; 0
 b14:	08 95       	ret

00000b16 <__fp_nan>:
 b16:	9f ef       	ldi	r25, 0xFF	; 255
 b18:	80 ec       	ldi	r24, 0xC0	; 192
 b1a:	08 95       	ret

00000b1c <__fp_pscA>:
 b1c:	00 24       	eor	r0, r0
 b1e:	0a 94       	dec	r0
 b20:	16 16       	cp	r1, r22
 b22:	17 06       	cpc	r1, r23
 b24:	18 06       	cpc	r1, r24
 b26:	09 06       	cpc	r0, r25
 b28:	08 95       	ret

00000b2a <__fp_pscB>:
 b2a:	00 24       	eor	r0, r0
 b2c:	0a 94       	dec	r0
 b2e:	12 16       	cp	r1, r18
 b30:	13 06       	cpc	r1, r19
 b32:	14 06       	cpc	r1, r20
 b34:	05 06       	cpc	r0, r21
 b36:	08 95       	ret

00000b38 <__fp_round>:
 b38:	09 2e       	mov	r0, r25
 b3a:	03 94       	inc	r0
 b3c:	00 0c       	add	r0, r0
 b3e:	11 f4       	brne	.+4      	; 0xb44 <__fp_round+0xc>
 b40:	88 23       	and	r24, r24
 b42:	52 f0       	brmi	.+20     	; 0xb58 <__fp_round+0x20>
 b44:	bb 0f       	add	r27, r27
 b46:	40 f4       	brcc	.+16     	; 0xb58 <__fp_round+0x20>
 b48:	bf 2b       	or	r27, r31
 b4a:	11 f4       	brne	.+4      	; 0xb50 <__fp_round+0x18>
 b4c:	60 ff       	sbrs	r22, 0
 b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__fp_round+0x20>
 b50:	6f 5f       	subi	r22, 0xFF	; 255
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	08 95       	ret

00000b5a <__fp_split3>:
 b5a:	57 fd       	sbrc	r21, 7
 b5c:	90 58       	subi	r25, 0x80	; 128
 b5e:	44 0f       	add	r20, r20
 b60:	55 1f       	adc	r21, r21
 b62:	59 f0       	breq	.+22     	; 0xb7a <__fp_splitA+0x10>
 b64:	5f 3f       	cpi	r21, 0xFF	; 255
 b66:	71 f0       	breq	.+28     	; 0xb84 <__fp_splitA+0x1a>
 b68:	47 95       	ror	r20

00000b6a <__fp_splitA>:
 b6a:	88 0f       	add	r24, r24
 b6c:	97 fb       	bst	r25, 7
 b6e:	99 1f       	adc	r25, r25
 b70:	61 f0       	breq	.+24     	; 0xb8a <__fp_splitA+0x20>
 b72:	9f 3f       	cpi	r25, 0xFF	; 255
 b74:	79 f0       	breq	.+30     	; 0xb94 <__fp_splitA+0x2a>
 b76:	87 95       	ror	r24
 b78:	08 95       	ret
 b7a:	12 16       	cp	r1, r18
 b7c:	13 06       	cpc	r1, r19
 b7e:	14 06       	cpc	r1, r20
 b80:	55 1f       	adc	r21, r21
 b82:	f2 cf       	rjmp	.-28     	; 0xb68 <__fp_split3+0xe>
 b84:	46 95       	lsr	r20
 b86:	f1 df       	rcall	.-30     	; 0xb6a <__fp_splitA>
 b88:	08 c0       	rjmp	.+16     	; 0xb9a <__fp_splitA+0x30>
 b8a:	16 16       	cp	r1, r22
 b8c:	17 06       	cpc	r1, r23
 b8e:	18 06       	cpc	r1, r24
 b90:	99 1f       	adc	r25, r25
 b92:	f1 cf       	rjmp	.-30     	; 0xb76 <__fp_splitA+0xc>
 b94:	86 95       	lsr	r24
 b96:	71 05       	cpc	r23, r1
 b98:	61 05       	cpc	r22, r1
 b9a:	08 94       	sec
 b9c:	08 95       	ret

00000b9e <__fp_zero>:
 b9e:	e8 94       	clt

00000ba0 <__fp_szero>:
 ba0:	bb 27       	eor	r27, r27
 ba2:	66 27       	eor	r22, r22
 ba4:	77 27       	eor	r23, r23
 ba6:	cb 01       	movw	r24, r22
 ba8:	97 f9       	bld	r25, 7
 baa:	08 95       	ret

00000bac <__divmodhi4>:
 bac:	97 fb       	bst	r25, 7
 bae:	07 2e       	mov	r0, r23
 bb0:	16 f4       	brtc	.+4      	; 0xbb6 <__divmodhi4+0xa>
 bb2:	00 94       	com	r0
 bb4:	07 d0       	rcall	.+14     	; 0xbc4 <__divmodhi4_neg1>
 bb6:	77 fd       	sbrc	r23, 7
 bb8:	09 d0       	rcall	.+18     	; 0xbcc <__divmodhi4_neg2>
 bba:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__udivmodhi4>
 bbe:	07 fc       	sbrc	r0, 7
 bc0:	05 d0       	rcall	.+10     	; 0xbcc <__divmodhi4_neg2>
 bc2:	3e f4       	brtc	.+14     	; 0xbd2 <__divmodhi4_exit>

00000bc4 <__divmodhi4_neg1>:
 bc4:	90 95       	com	r25
 bc6:	81 95       	neg	r24
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	08 95       	ret

00000bcc <__divmodhi4_neg2>:
 bcc:	70 95       	com	r23
 bce:	61 95       	neg	r22
 bd0:	7f 4f       	sbci	r23, 0xFF	; 255

00000bd2 <__divmodhi4_exit>:
 bd2:	08 95       	ret

00000bd4 <__udivmodhi4>:
 bd4:	aa 1b       	sub	r26, r26
 bd6:	bb 1b       	sub	r27, r27
 bd8:	51 e1       	ldi	r21, 0x11	; 17
 bda:	07 c0       	rjmp	.+14     	; 0xbea <__udivmodhi4_ep>

00000bdc <__udivmodhi4_loop>:
 bdc:	aa 1f       	adc	r26, r26
 bde:	bb 1f       	adc	r27, r27
 be0:	a6 17       	cp	r26, r22
 be2:	b7 07       	cpc	r27, r23
 be4:	10 f0       	brcs	.+4      	; 0xbea <__udivmodhi4_ep>
 be6:	a6 1b       	sub	r26, r22
 be8:	b7 0b       	sbc	r27, r23

00000bea <__udivmodhi4_ep>:
 bea:	88 1f       	adc	r24, r24
 bec:	99 1f       	adc	r25, r25
 bee:	5a 95       	dec	r21
 bf0:	a9 f7       	brne	.-22     	; 0xbdc <__udivmodhi4_loop>
 bf2:	80 95       	com	r24
 bf4:	90 95       	com	r25
 bf6:	bc 01       	movw	r22, r24
 bf8:	cd 01       	movw	r24, r26
 bfa:	08 95       	ret

00000bfc <__itoa_ncheck>:
 bfc:	bb 27       	eor	r27, r27
 bfe:	4a 30       	cpi	r20, 0x0A	; 10
 c00:	31 f4       	brne	.+12     	; 0xc0e <__itoa_ncheck+0x12>
 c02:	99 23       	and	r25, r25
 c04:	22 f4       	brpl	.+8      	; 0xc0e <__itoa_ncheck+0x12>
 c06:	bd e2       	ldi	r27, 0x2D	; 45
 c08:	90 95       	com	r25
 c0a:	81 95       	neg	r24
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__utoa_common>

00000c12 <__utoa_ncheck>:
 c12:	bb 27       	eor	r27, r27

00000c14 <__utoa_common>:
 c14:	fb 01       	movw	r30, r22
 c16:	55 27       	eor	r21, r21
 c18:	aa 27       	eor	r26, r26
 c1a:	88 0f       	add	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	aa 1f       	adc	r26, r26
 c20:	a4 17       	cp	r26, r20
 c22:	10 f0       	brcs	.+4      	; 0xc28 <__utoa_common+0x14>
 c24:	a4 1b       	sub	r26, r20
 c26:	83 95       	inc	r24
 c28:	50 51       	subi	r21, 0x10	; 16
 c2a:	b9 f7       	brne	.-18     	; 0xc1a <__utoa_common+0x6>
 c2c:	a0 5d       	subi	r26, 0xD0	; 208
 c2e:	aa 33       	cpi	r26, 0x3A	; 58
 c30:	08 f0       	brcs	.+2      	; 0xc34 <__utoa_common+0x20>
 c32:	a9 5d       	subi	r26, 0xD9	; 217
 c34:	a1 93       	st	Z+, r26
 c36:	00 97       	sbiw	r24, 0x00	; 0
 c38:	79 f7       	brne	.-34     	; 0xc18 <__utoa_common+0x4>
 c3a:	b1 11       	cpse	r27, r1
 c3c:	b1 93       	st	Z+, r27
 c3e:	11 92       	st	Z+, r1
 c40:	cb 01       	movw	r24, r22
 c42:	0c 94 23 06 	jmp	0xc46	; 0xc46 <strrev>

00000c46 <strrev>:
 c46:	dc 01       	movw	r26, r24
 c48:	fc 01       	movw	r30, r24
 c4a:	67 2f       	mov	r22, r23
 c4c:	71 91       	ld	r23, Z+
 c4e:	77 23       	and	r23, r23
 c50:	e1 f7       	brne	.-8      	; 0xc4a <strrev+0x4>
 c52:	32 97       	sbiw	r30, 0x02	; 2
 c54:	04 c0       	rjmp	.+8      	; 0xc5e <strrev+0x18>
 c56:	7c 91       	ld	r23, X
 c58:	6d 93       	st	X+, r22
 c5a:	70 83       	st	Z, r23
 c5c:	62 91       	ld	r22, -Z
 c5e:	ae 17       	cp	r26, r30
 c60:	bf 07       	cpc	r27, r31
 c62:	c8 f3       	brcs	.-14     	; 0xc56 <strrev+0x10>
 c64:	08 95       	ret

00000c66 <_exit>:
 c66:	f8 94       	cli

00000c68 <__stop_program>:
 c68:	ff cf       	rjmp	.-2      	; 0xc68 <__stop_program>
