
nRF24L01_ATmega640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800200  00001b20  00001bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  008002ce  008002ce  00001c82  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a8b  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001758  00000000  00000000  00005a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000213f  00000000  00000000  000071e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  00009324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b56  00000000  00000000  00009ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002980  00000000  00000000  0000a626  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000cfa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_2>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__vector_4>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_6>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_32>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e0 e2       	ldi	r30, 0x20	; 32
      f8:	fb e1       	ldi	r31, 0x1B	; 27
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ae 3c       	cpi	r26, 0xCE	; 206
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	ae ec       	ldi	r26, 0xCE	; 206
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	ae 3e       	cpi	r26, 0xEE	; 238
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 59 05 	call	0xab2	; 0xab2 <main>
     11a:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setup_adc>:
     122:	ec e7       	ldi	r30, 0x7C	; 124
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	80 64       	ori	r24, 0x40	; 64
     12a:	80 83       	st	Z, r24
     12c:	ea e7       	ldi	r30, 0x7A	; 122
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	87 68       	ori	r24, 0x87	; 135
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <analog_read>:
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	90 81       	ld	r25, Z
     13e:	98 7f       	andi	r25, 0xF8	; 248
     140:	87 70       	andi	r24, 0x07	; 7
     142:	89 2b       	or	r24, r25
     144:	80 83       	st	Z, r24
     146:	ea e7       	ldi	r30, 0x7A	; 122
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	80 64       	ori	r24, 0x40	; 64
     14e:	80 83       	st	Z, r24
     150:	80 81       	ld	r24, Z
     152:	84 ff       	sbrs	r24, 4
     154:	fd cf       	rjmp	.-6      	; 0x150 <analog_read+0x18>
     156:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	98 2f       	mov	r25, r24
     162:	88 27       	eor	r24, r24
     164:	88 27       	eor	r24, r24
     166:	9f 72       	andi	r25, 0x2F	; 47
     168:	82 2b       	or	r24, r18
     16a:	08 95       	ret

0000016c <analog_get_average>:
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	e6 2e       	mov	r14, r22
     17c:	f1 2c       	mov	r15, r1
     17e:	1e 14       	cp	r1, r14
     180:	1f 04       	cpc	r1, r15
     182:	ac f4       	brge	.+42     	; 0x1ae <analog_get_average+0x42>
     184:	d8 2e       	mov	r13, r24
     186:	c0 e0       	ldi	r28, 0x00	; 0
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	8d 2d       	mov	r24, r13
     190:	0e 94 9c 00 	call	0x138	; 0x138 <analog_read>
     194:	08 0f       	add	r16, r24
     196:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     198:	8f e9       	ldi	r24, 0x9F	; 159
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <analog_get_average+0x30>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <analog_get_average+0x36>
     1a2:	00 00       	nop
     1a4:	21 96       	adiw	r28, 0x01	; 1
     1a6:	ce 15       	cp	r28, r14
     1a8:	df 05       	cpc	r29, r15
     1aa:	89 f7       	brne	.-30     	; 0x18e <analog_get_average+0x22>
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <analog_get_average+0x46>
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	c8 01       	movw	r24, r16
     1b4:	b7 01       	movw	r22, r14
     1b6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__divmodhi4>
     1ba:	cb 01       	movw	r24, r22
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	08 95       	ret

000001cc <setup_ports>:


void setup_ports()
{
	// LEDs
	DDRL |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED5) | (1<<LED6); // set LEDs as outputs
     1cc:	ea e0       	ldi	r30, 0x0A	; 10
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z
     1d2:	8f 63       	ori	r24, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
	
	DDRD &= ~(1<<ENC_2_A);
     1d6:	51 98       	cbi	0x0a, 1	; 10
	DDRL &= ~(1<<ENC_2_B);
     1d8:	80 81       	ld	r24, Z
     1da:	8f 77       	andi	r24, 0x7F	; 127
     1dc:	80 83       	st	Z, r24
	DDRE &= ~(1<<ENC_1_SWITCH);
     1de:	6c 98       	cbi	0x0d, 4	; 13
     1e0:	08 95       	ret

000001e2 <LED_check>:

}

void LED_check()
{
     1e2:	23 e0       	ldi	r18, 0x03	; 3
     1e4:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	
	for (i=0; i<3; i++)
	{
		LED1_ON;
     1e6:	eb e0       	ldi	r30, 0x0B	; 11
     1e8:	f1 e0       	ldi	r31, 0x01	; 1
     1ea:	80 81       	ld	r24, Z
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	80 83       	st	Z, r24
     1f0:	8f e3       	ldi	r24, 0x3F	; 63
     1f2:	9c e9       	ldi	r25, 0x9C	; 156
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LED_check+0x12>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LED_check+0x18>
     1fa:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
     1fc:	80 81       	ld	r24, Z
     1fe:	8e 7f       	andi	r24, 0xFE	; 254
     200:	80 83       	st	Z, r24
		LED2_ON;
     202:	80 81       	ld	r24, Z
     204:	82 60       	ori	r24, 0x02	; 2
     206:	80 83       	st	Z, r24
     208:	8f e3       	ldi	r24, 0x3F	; 63
     20a:	9c e9       	ldi	r25, 0x9C	; 156
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <LED_check+0x2a>
     210:	00 c0       	rjmp	.+0      	; 0x212 <LED_check+0x30>
     212:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
     214:	80 81       	ld	r24, Z
     216:	8d 7f       	andi	r24, 0xFD	; 253
     218:	80 83       	st	Z, r24
		LED3_ON;
     21a:	80 81       	ld	r24, Z
     21c:	84 60       	ori	r24, 0x04	; 4
     21e:	80 83       	st	Z, r24
     220:	8f e3       	ldi	r24, 0x3F	; 63
     222:	9c e9       	ldi	r25, 0x9C	; 156
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <LED_check+0x42>
     228:	00 c0       	rjmp	.+0      	; 0x22a <LED_check+0x48>
     22a:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
     22c:	80 81       	ld	r24, Z
     22e:	8b 7f       	andi	r24, 0xFB	; 251
     230:	80 83       	st	Z, r24
		LED4_ON;
     232:	80 81       	ld	r24, Z
     234:	88 60       	ori	r24, 0x08	; 8
     236:	80 83       	st	Z, r24
     238:	8f e3       	ldi	r24, 0x3F	; 63
     23a:	9c e9       	ldi	r25, 0x9C	; 156
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <LED_check+0x5a>
     240:	00 c0       	rjmp	.+0      	; 0x242 <LED_check+0x60>
     242:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
     244:	80 81       	ld	r24, Z
     246:	87 7f       	andi	r24, 0xF7	; 247
     248:	80 83       	st	Z, r24
		LED5_ON;
     24a:	80 81       	ld	r24, Z
     24c:	80 61       	ori	r24, 0x10	; 16
     24e:	80 83       	st	Z, r24
     250:	8f e3       	ldi	r24, 0x3F	; 63
     252:	9c e9       	ldi	r25, 0x9C	; 156
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <LED_check+0x72>
     258:	00 c0       	rjmp	.+0      	; 0x25a <LED_check+0x78>
     25a:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
     25c:	80 81       	ld	r24, Z
     25e:	8f 7e       	andi	r24, 0xEF	; 239
     260:	80 83       	st	Z, r24
		LED6_ON;
     262:	80 81       	ld	r24, Z
     264:	80 62       	ori	r24, 0x20	; 32
     266:	80 83       	st	Z, r24
     268:	8f e3       	ldi	r24, 0x3F	; 63
     26a:	9c e9       	ldi	r25, 0x9C	; 156
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <LED_check+0x8a>
     270:	00 c0       	rjmp	.+0      	; 0x272 <LED_check+0x90>
     272:	00 00       	nop
     274:	8f e3       	ldi	r24, 0x3F	; 63
     276:	9c e9       	ldi	r25, 0x9C	; 156
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LED_check+0x96>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LED_check+0x9c>
     27e:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		
		_delay_ms(LED_check_DELAY);
		LED6_OFF;
     280:	80 81       	ld	r24, Z
     282:	8f 7d       	andi	r24, 0xDF	; 223
     284:	80 83       	st	Z, r24
		LED5_ON;
     286:	80 81       	ld	r24, Z
     288:	80 61       	ori	r24, 0x10	; 16
     28a:	80 83       	st	Z, r24
     28c:	8f e3       	ldi	r24, 0x3F	; 63
     28e:	9c e9       	ldi	r25, 0x9C	; 156
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LED_check+0xae>
     294:	00 c0       	rjmp	.+0      	; 0x296 <LED_check+0xb4>
     296:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED5_OFF;
     298:	80 81       	ld	r24, Z
     29a:	8f 7e       	andi	r24, 0xEF	; 239
     29c:	80 83       	st	Z, r24
		LED4_ON;
     29e:	80 81       	ld	r24, Z
     2a0:	88 60       	ori	r24, 0x08	; 8
     2a2:	80 83       	st	Z, r24
     2a4:	8f e3       	ldi	r24, 0x3F	; 63
     2a6:	9c e9       	ldi	r25, 0x9C	; 156
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LED_check+0xc6>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LED_check+0xcc>
     2ae:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED4_OFF;
     2b0:	80 81       	ld	r24, Z
     2b2:	87 7f       	andi	r24, 0xF7	; 247
     2b4:	80 83       	st	Z, r24
		LED3_ON;
     2b6:	80 81       	ld	r24, Z
     2b8:	84 60       	ori	r24, 0x04	; 4
     2ba:	80 83       	st	Z, r24
     2bc:	8f e3       	ldi	r24, 0x3F	; 63
     2be:	9c e9       	ldi	r25, 0x9C	; 156
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LED_check+0xde>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LED_check+0xe4>
     2c6:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED3_OFF;
     2c8:	80 81       	ld	r24, Z
     2ca:	8b 7f       	andi	r24, 0xFB	; 251
     2cc:	80 83       	st	Z, r24
		LED2_ON;
     2ce:	80 81       	ld	r24, Z
     2d0:	82 60       	ori	r24, 0x02	; 2
     2d2:	80 83       	st	Z, r24
     2d4:	8f e3       	ldi	r24, 0x3F	; 63
     2d6:	9c e9       	ldi	r25, 0x9C	; 156
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <LED_check+0xf6>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <LED_check+0xfc>
     2de:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED2_OFF;
     2e0:	80 81       	ld	r24, Z
     2e2:	8d 7f       	andi	r24, 0xFD	; 253
     2e4:	80 83       	st	Z, r24
		LED1_ON;
     2e6:	80 81       	ld	r24, Z
     2e8:	81 60       	ori	r24, 0x01	; 1
     2ea:	80 83       	st	Z, r24
     2ec:	8f e3       	ldi	r24, 0x3F	; 63
     2ee:	9c e9       	ldi	r25, 0x9C	; 156
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LED_check+0x10e>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LED_check+0x114>
     2f6:	00 00       	nop
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
     2f8:	80 81       	ld	r24, Z
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	80 83       	st	Z, r24
     2fe:	21 50       	subi	r18, 0x01	; 1
     300:	31 09       	sbc	r19, r1

void LED_check()
{
	int i;
	
	for (i=0; i<3; i++)
     302:	09 f0       	breq	.+2      	; 0x306 <LED_check+0x124>
     304:	72 cf       	rjmp	.-284    	; 0x1ea <LED_check+0x8>
		LED1_ON;
		_delay_ms(LED_check_DELAY);
		LED1_OFF;
	}

     306:	08 95       	ret

00000308 <setup_ext_int>:
#include <avr/io.h>
#include "gpio.h"
#include "print.h"

void setup_ext_int(uint8_t INT, uint8_t trigger)
{
     308:	98 2f       	mov	r25, r24
	if (trigger == ANY)
     30a:	61 30       	cpi	r22, 0x01	; 1
     30c:	09 f0       	breq	.+2      	; 0x310 <setup_ext_int+0x8>
     30e:	59 c0       	rjmp	.+178    	; 0x3c2 <setup_ext_int+0xba>
	{
		if (INT == 0)
     310:	81 11       	cpse	r24, r1
     312:	09 c0       	rjmp	.+18     	; 0x326 <setup_ext_int+0x1e>
		{
			EICRA |= (1<<ISC00);
     314:	e9 e6       	ldi	r30, 0x69	; 105
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC01);
     31e:	80 81       	ld	r24, Z
     320:	8d 7f       	andi	r24, 0xFD	; 253
     322:	80 83       	st	Z, r24
     324:	ab c0       	rjmp	.+342    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		}
		else if (INT == 1)
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	49 f4       	brne	.+18     	; 0x33c <setup_ext_int+0x34>
		{
			EICRA |= (1<<ISC10);
     32a:	e9 e6       	ldi	r30, 0x69	; 105
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	84 60       	ori	r24, 0x04	; 4
     332:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC11);
     334:	80 81       	ld	r24, Z
     336:	87 7f       	andi	r24, 0xF7	; 247
     338:	80 83       	st	Z, r24
     33a:	a8 c0       	rjmp	.+336    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		}
		else if (INT == 2)
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	49 f4       	brne	.+18     	; 0x352 <setup_ext_int+0x4a>
		{
			EICRA |= (1<<ISC20);
     340:	e9 e6       	ldi	r30, 0x69	; 105
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	80 61       	ori	r24, 0x10	; 16
     348:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC21);
     34a:	80 81       	ld	r24, Z
     34c:	8f 7d       	andi	r24, 0xDF	; 223
     34e:	80 83       	st	Z, r24
     350:	a5 c0       	rjmp	.+330    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		}
		else if (INT == 3)
     352:	83 30       	cpi	r24, 0x03	; 3
     354:	49 f4       	brne	.+18     	; 0x368 <setup_ext_int+0x60>
		{
			EICRA |= (1<<ISC30);
     356:	e9 e6       	ldi	r30, 0x69	; 105
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	80 64       	ori	r24, 0x40	; 64
     35e:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC31);
     360:	80 81       	ld	r24, Z
     362:	8f 77       	andi	r24, 0x7F	; 127
     364:	80 83       	st	Z, r24
     366:	a2 c0       	rjmp	.+324    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		}
		else if (INT == 4)
     368:	84 30       	cpi	r24, 0x04	; 4
     36a:	49 f4       	brne	.+18     	; 0x37e <setup_ext_int+0x76>
		{
			EICRB |= (1<<ISC40);
     36c:	ea e6       	ldi	r30, 0x6A	; 106
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	81 60       	ori	r24, 0x01	; 1
     374:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC41);
     376:	80 81       	ld	r24, Z
     378:	8d 7f       	andi	r24, 0xFD	; 253
     37a:	80 83       	st	Z, r24
     37c:	9f c0       	rjmp	.+318    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		}

		else if (INT == 5)
     37e:	85 30       	cpi	r24, 0x05	; 5
     380:	49 f4       	brne	.+18     	; 0x394 <setup_ext_int+0x8c>
		{
			EICRB |= (1<<ISC50);
     382:	ea e6       	ldi	r30, 0x6A	; 106
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	84 60       	ori	r24, 0x04	; 4
     38a:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC51);
     38c:	80 81       	ld	r24, Z
     38e:	87 7f       	andi	r24, 0xF7	; 247
     390:	80 83       	st	Z, r24
     392:	9c c0       	rjmp	.+312    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		}
		else if (INT == 6)
     394:	86 30       	cpi	r24, 0x06	; 6
     396:	49 f4       	brne	.+18     	; 0x3aa <setup_ext_int+0xa2>
		{
			EICRB |= (1<<ISC60);
     398:	ea e6       	ldi	r30, 0x6A	; 106
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	80 61       	ori	r24, 0x10	; 16
     3a0:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC61);
     3a2:	80 81       	ld	r24, Z
     3a4:	8f 7d       	andi	r24, 0xDF	; 223
     3a6:	80 83       	st	Z, r24
     3a8:	99 c0       	rjmp	.+306    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		}
		else if (INT == 7)
     3aa:	87 30       	cpi	r24, 0x07	; 7
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <setup_ext_int+0xa8>
     3ae:	a3 c0       	rjmp	.+326    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		{
			EICRB |= (1<<ISC70);
     3b0:	ea e6       	ldi	r30, 0x6A	; 106
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	80 64       	ori	r24, 0x40	; 64
     3b8:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC71);
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 77       	andi	r24, 0x7F	; 127
     3be:	80 83       	st	Z, r24
     3c0:	95 c0       	rjmp	.+298    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		}
	}
	if (trigger == FALLING)
     3c2:	61 11       	cpse	r22, r1
     3c4:	59 c0       	rjmp	.+178    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	{
		if (INT == 0)
     3c6:	81 11       	cpse	r24, r1
     3c8:	09 c0       	rjmp	.+18     	; 0x3dc <setup_ext_int+0xd4>
		{
			EICRA |= (1<<ISC01);
     3ca:	e9 e6       	ldi	r30, 0x69	; 105
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC00);
     3d4:	80 81       	ld	r24, Z
     3d6:	8e 7f       	andi	r24, 0xFE	; 254
     3d8:	80 83       	st	Z, r24
     3da:	8d c0       	rjmp	.+282    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}
		else if (INT == 1)
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	49 f4       	brne	.+18     	; 0x3f2 <setup_ext_int+0xea>
		{
			EICRA |= (1<<ISC11);
     3e0:	e9 e6       	ldi	r30, 0x69	; 105
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	88 60       	ori	r24, 0x08	; 8
     3e8:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC10);
     3ea:	80 81       	ld	r24, Z
     3ec:	8b 7f       	andi	r24, 0xFB	; 251
     3ee:	80 83       	st	Z, r24
     3f0:	82 c0       	rjmp	.+260    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}
		else if (INT == 2)
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	49 f4       	brne	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			EICRA |= (1<<ISC21);
     3f6:	e9 e6       	ldi	r30, 0x69	; 105
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC20);
     400:	80 81       	ld	r24, Z
     402:	8f 7e       	andi	r24, 0xEF	; 239
     404:	80 83       	st	Z, r24
     406:	77 c0       	rjmp	.+238    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}
		else if (INT == 3)
     408:	83 30       	cpi	r24, 0x03	; 3
     40a:	49 f4       	brne	.+18     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			EICRA |= (1<<ISC31);
     40c:	e9 e6       	ldi	r30, 0x69	; 105
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 68       	ori	r24, 0x80	; 128
     414:	80 83       	st	Z, r24
			EICRA &= ~(1<<ISC30);
     416:	80 81       	ld	r24, Z
     418:	8f 7b       	andi	r24, 0xBF	; 191
     41a:	80 83       	st	Z, r24
     41c:	6c c0       	rjmp	.+216    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}
		else if (INT == 4)
     41e:	84 30       	cpi	r24, 0x04	; 4
     420:	49 f4       	brne	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			EICRB |= (1<<ISC41);
     422:	ea e6       	ldi	r30, 0x6A	; 106
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	82 60       	ori	r24, 0x02	; 2
     42a:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC40);
     42c:	80 81       	ld	r24, Z
     42e:	8e 7f       	andi	r24, 0xFE	; 254
     430:	80 83       	st	Z, r24
     432:	61 c0       	rjmp	.+194    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}

		else if (INT == 5)
     434:	85 30       	cpi	r24, 0x05	; 5
     436:	49 f4       	brne	.+18     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			EICRB |= (1<<ISC51);
     438:	ea e6       	ldi	r30, 0x6A	; 106
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	88 60       	ori	r24, 0x08	; 8
     440:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC50);
     442:	80 81       	ld	r24, Z
     444:	8b 7f       	andi	r24, 0xFB	; 251
     446:	80 83       	st	Z, r24
     448:	56 c0       	rjmp	.+172    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}
		else if (INT == 6)
     44a:	86 30       	cpi	r24, 0x06	; 6
     44c:	49 f4       	brne	.+18     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			EICRB |= (1<<ISC61);
     44e:	ea e6       	ldi	r30, 0x6A	; 106
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	80 62       	ori	r24, 0x20	; 32
     456:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC60);
     458:	80 81       	ld	r24, Z
     45a:	8f 7e       	andi	r24, 0xEF	; 239
     45c:	80 83       	st	Z, r24
     45e:	4b c0       	rjmp	.+150    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}
		else if (INT == 7)
     460:	87 30       	cpi	r24, 0x07	; 7
     462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	48 c0       	rjmp	.+144    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		{
			EICRB |= (1<<ISC71);
     466:	ea e6       	ldi	r30, 0x6A	; 106
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	80 68       	ori	r24, 0x80	; 128
     46e:	80 83       	st	Z, r24
			EICRB &= ~(1<<ISC70);
     470:	80 81       	ld	r24, Z
     472:	8f 7b       	andi	r24, 0xBF	; 191
     474:	80 83       	st	Z, r24
     476:	3f c0       	rjmp	.+126    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		}
	}
	else
	{
		if (INT == 0)
     478:	81 11       	cpse	r24, r1
     47a:	06 c0       	rjmp	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			EICRA |= (1<<ISC01) | (1<<ISC00);
     47c:	e9 e6       	ldi	r30, 0x69	; 105
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	83 60       	ori	r24, 0x03	; 3
     484:	80 83       	st	Z, r24
     486:	37 c0       	rjmp	.+110    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		else if (INT == 1)
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	31 f4       	brne	.+12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			EICRA |= (1<<ISC11) | (1<<ISC10);
     48c:	e9 e6       	ldi	r30, 0x69	; 105
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8c 60       	ori	r24, 0x0C	; 12
     494:	80 83       	st	Z, r24
     496:	2f c0       	rjmp	.+94     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		else if (INT == 2)
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	31 f4       	brne	.+12     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			EICRA |= (1<<ISC21) | (1<<ISC20);
     49c:	e9 e6       	ldi	r30, 0x69	; 105
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	80 63       	ori	r24, 0x30	; 48
     4a4:	80 83       	st	Z, r24
     4a6:	27 c0       	rjmp	.+78     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		else if (INT == 3)
     4a8:	83 30       	cpi	r24, 0x03	; 3
     4aa:	31 f4       	brne	.+12     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			EICRA |= (1<<ISC31) | (1<<ISC30);
     4ac:	e9 e6       	ldi	r30, 0x69	; 105
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	80 6c       	ori	r24, 0xC0	; 192
     4b4:	80 83       	st	Z, r24
     4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		else if (INT == 4)
     4b8:	84 30       	cpi	r24, 0x04	; 4
     4ba:	31 f4       	brne	.+12     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			EICRB |= (1<<ISC41) | (1<<ISC40);
     4bc:	ea e6       	ldi	r30, 0x6A	; 106
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	83 60       	ori	r24, 0x03	; 3
     4c4:	80 83       	st	Z, r24
     4c6:	17 c0       	rjmp	.+46     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		else if (INT == 5)
     4c8:	85 30       	cpi	r24, 0x05	; 5
     4ca:	31 f4       	brne	.+12     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			EICRB |= (1<<ISC51) | (1<<ISC50);
     4cc:	ea e6       	ldi	r30, 0x6A	; 106
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	8c 60       	ori	r24, 0x0C	; 12
     4d4:	80 83       	st	Z, r24
     4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		else if (INT == 6)
     4d8:	86 30       	cpi	r24, 0x06	; 6
     4da:	31 f4       	brne	.+12     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			EICRB |= (1<<ISC61) | (1<<ISC60);
     4dc:	ea e6       	ldi	r30, 0x6A	; 106
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	80 63       	ori	r24, 0x30	; 48
     4e4:	80 83       	st	Z, r24
     4e6:	07 c0       	rjmp	.+14     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		else if (INT == 7)
     4e8:	87 30       	cpi	r24, 0x07	; 7
     4ea:	29 f4       	brne	.+10     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			EICRB |= (1<<ISC71) | (1<<ISC70);
     4ec:	ea e6       	ldi	r30, 0x6A	; 106
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	80 6c       	ori	r24, 0xC0	; 192
     4f4:	80 83       	st	Z, r24
	}
	
	EIMSK |= (1<<INT);
     4f6:	4d b3       	in	r20, 0x1d	; 29
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	b9 01       	movw	r22, r18
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     500:	66 0f       	add	r22, r22
     502:	77 1f       	adc	r23, r23
     504:	9a 95       	dec	r25
     506:	e2 f7       	brpl	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     508:	cb 01       	movw	r24, r22
     50a:	84 2b       	or	r24, r20
     50c:	8d bb       	out	0x1d, r24	; 29
     50e:	08 95       	ret

00000510 <digital_read>:
}

uint8_t digital_read(uint8_t PORT, uint8_t PIN)
{
     510:	cf 93       	push	r28
	uint8_t LEVEL = 0;
	
	if (PORT == PORT_A)
     512:	81 11       	cpse	r24, r1
     514:	0a c0       	rjmp	.+20     	; 0x52a <digital_read+0x1a>
	{
		LEVEL = ((PINA >> PIN) & 0x01);
     516:	80 b1       	in	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	02 c0       	rjmp	.+4      	; 0x520 <digital_read+0x10>
     51c:	95 95       	asr	r25
     51e:	87 95       	ror	r24
     520:	6a 95       	dec	r22
     522:	e2 f7       	brpl	.-8      	; 0x51c <digital_read+0xc>
     524:	c8 2f       	mov	r28, r24
     526:	c1 70       	andi	r28, 0x01	; 1
     528:	7d c0       	rjmp	.+250    	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_B)
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	51 f4       	brne	.+20     	; 0x542 <digital_read+0x32>
	{
		LEVEL = ((PINB >> PIN) & 0x01);
     52e:	83 b1       	in	r24, 0x03	; 3
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	02 c0       	rjmp	.+4      	; 0x538 <digital_read+0x28>
     534:	95 95       	asr	r25
     536:	87 95       	ror	r24
     538:	6a 95       	dec	r22
     53a:	e2 f7       	brpl	.-8      	; 0x534 <digital_read+0x24>
     53c:	c8 2f       	mov	r28, r24
     53e:	c1 70       	andi	r28, 0x01	; 1
     540:	71 c0       	rjmp	.+226    	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_C)
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	51 f4       	brne	.+20     	; 0x55a <digital_read+0x4a>
	{
		LEVEL = ((PINC >> PIN) & 0x01);
     546:	86 b1       	in	r24, 0x06	; 6
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	02 c0       	rjmp	.+4      	; 0x550 <digital_read+0x40>
     54c:	95 95       	asr	r25
     54e:	87 95       	ror	r24
     550:	6a 95       	dec	r22
     552:	e2 f7       	brpl	.-8      	; 0x54c <digital_read+0x3c>
     554:	c8 2f       	mov	r28, r24
     556:	c1 70       	andi	r28, 0x01	; 1
     558:	65 c0       	rjmp	.+202    	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_D)
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	51 f4       	brne	.+20     	; 0x572 <digital_read+0x62>
	{
		LEVEL = ((PIND >> PIN) & 0x01);
     55e:	89 b1       	in	r24, 0x09	; 9
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <digital_read+0x58>
     564:	95 95       	asr	r25
     566:	87 95       	ror	r24
     568:	6a 95       	dec	r22
     56a:	e2 f7       	brpl	.-8      	; 0x564 <digital_read+0x54>
     56c:	c8 2f       	mov	r28, r24
     56e:	c1 70       	andi	r28, 0x01	; 1
     570:	59 c0       	rjmp	.+178    	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_E)
     572:	84 30       	cpi	r24, 0x04	; 4
     574:	51 f4       	brne	.+20     	; 0x58a <digital_read+0x7a>
	{
		LEVEL = ((PINE >> PIN) & 0x01);
     576:	8c b1       	in	r24, 0x0c	; 12
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <digital_read+0x70>
     57c:	95 95       	asr	r25
     57e:	87 95       	ror	r24
     580:	6a 95       	dec	r22
     582:	e2 f7       	brpl	.-8      	; 0x57c <digital_read+0x6c>
     584:	c8 2f       	mov	r28, r24
     586:	c1 70       	andi	r28, 0x01	; 1
     588:	4d c0       	rjmp	.+154    	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_F)
     58a:	85 30       	cpi	r24, 0x05	; 5
     58c:	51 f4       	brne	.+20     	; 0x5a2 <digital_read+0x92>
	{
		LEVEL = ((PINF >> PIN) & 0x01);
     58e:	8f b1       	in	r24, 0x0f	; 15
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	02 c0       	rjmp	.+4      	; 0x598 <digital_read+0x88>
     594:	95 95       	asr	r25
     596:	87 95       	ror	r24
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <digital_read+0x84>
     59c:	c8 2f       	mov	r28, r24
     59e:	c1 70       	andi	r28, 0x01	; 1
     5a0:	41 c0       	rjmp	.+130    	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_G)
     5a2:	86 30       	cpi	r24, 0x06	; 6
     5a4:	51 f4       	brne	.+20     	; 0x5ba <digital_read+0xaa>
	{
		LEVEL = ((PING >> PIN) & 0x01);
     5a6:	82 b3       	in	r24, 0x12	; 18
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <digital_read+0xa0>
     5ac:	95 95       	asr	r25
     5ae:	87 95       	ror	r24
     5b0:	6a 95       	dec	r22
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <digital_read+0x9c>
     5b4:	c8 2f       	mov	r28, r24
     5b6:	c1 70       	andi	r28, 0x01	; 1
     5b8:	35 c0       	rjmp	.+106    	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_H)
     5ba:	87 30       	cpi	r24, 0x07	; 7
     5bc:	59 f4       	brne	.+22     	; 0x5d4 <digital_read+0xc4>
	{
		LEVEL = ((PINH >> PIN) & 0x01);
     5be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <digital_read+0xba>
     5c6:	95 95       	asr	r25
     5c8:	87 95       	ror	r24
     5ca:	6a 95       	dec	r22
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <digital_read+0xb6>
     5ce:	c8 2f       	mov	r28, r24
     5d0:	c1 70       	andi	r28, 0x01	; 1
     5d2:	28 c0       	rjmp	.+80     	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_J)
     5d4:	88 30       	cpi	r24, 0x08	; 8
     5d6:	59 f4       	brne	.+22     	; 0x5ee <digital_read+0xde>
	{
		LEVEL = ((PINJ >> PIN) & 0x01);
     5d8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <digital_read+0xd4>
     5e0:	95 95       	asr	r25
     5e2:	87 95       	ror	r24
     5e4:	6a 95       	dec	r22
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <digital_read+0xd0>
     5e8:	c8 2f       	mov	r28, r24
     5ea:	c1 70       	andi	r28, 0x01	; 1
     5ec:	1b c0       	rjmp	.+54     	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_K)
     5ee:	89 30       	cpi	r24, 0x09	; 9
     5f0:	59 f4       	brne	.+22     	; 0x608 <digital_read+0xf8>
	{
		LEVEL = ((PINK >> PIN) & 0x01);
     5f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7e0106>
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <digital_read+0xee>
     5fa:	95 95       	asr	r25
     5fc:	87 95       	ror	r24
     5fe:	6a 95       	dec	r22
     600:	e2 f7       	brpl	.-8      	; 0x5fa <digital_read+0xea>
     602:	c8 2f       	mov	r28, r24
     604:	c1 70       	andi	r28, 0x01	; 1
     606:	0e c0       	rjmp	.+28     	; 0x624 <digital_read+0x114>
	}
	else if (PORT == PORT_L)
     608:	8a 30       	cpi	r24, 0x0A	; 10
     60a:	59 f4       	brne	.+22     	; 0x622 <digital_read+0x112>
	{
		LEVEL = ((PINL >> PIN) & 0x01);
     60c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <digital_read+0x108>
     614:	95 95       	asr	r25
     616:	87 95       	ror	r24
     618:	6a 95       	dec	r22
     61a:	e2 f7       	brpl	.-8      	; 0x614 <digital_read+0x104>
     61c:	c8 2f       	mov	r28, r24
     61e:	c1 70       	andi	r28, 0x01	; 1
     620:	01 c0       	rjmp	.+2      	; 0x624 <digital_read+0x114>
	EIMSK |= (1<<INT);
}

uint8_t digital_read(uint8_t PORT, uint8_t PIN)
{
	uint8_t LEVEL = 0;
     622:	c0 e0       	ldi	r28, 0x00	; 0
	else if (PORT == PORT_L)
	{
		LEVEL = ((PINL >> PIN) & 0x01);
	}
	
	println_int_0(LEVEL);
     624:	8c 2f       	mov	r24, r28
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <println_int_0>
	
	return LEVEL;
     62c:	8c 2f       	mov	r24, r28
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <data_to_port>:
     632:	80 ff       	sbrs	r24, 0
     634:	02 c0       	rjmp	.+4      	; 0x63a <data_to_port+0x8>
     636:	43 9a       	sbi	0x08, 3	; 8
     638:	01 c0       	rjmp	.+2      	; 0x63c <data_to_port+0xa>
     63a:	43 98       	cbi	0x08, 3	; 8
     63c:	81 ff       	sbrs	r24, 1
     63e:	02 c0       	rjmp	.+4      	; 0x644 <data_to_port+0x12>
     640:	44 9a       	sbi	0x08, 4	; 8
     642:	01 c0       	rjmp	.+2      	; 0x646 <data_to_port+0x14>
     644:	44 98       	cbi	0x08, 4	; 8
     646:	82 ff       	sbrs	r24, 2
     648:	02 c0       	rjmp	.+4      	; 0x64e <data_to_port+0x1c>
     64a:	45 9a       	sbi	0x08, 5	; 8
     64c:	01 c0       	rjmp	.+2      	; 0x650 <data_to_port+0x1e>
     64e:	45 98       	cbi	0x08, 5	; 8
     650:	83 ff       	sbrs	r24, 3
     652:	02 c0       	rjmp	.+4      	; 0x658 <data_to_port+0x26>
     654:	46 9a       	sbi	0x08, 6	; 8
     656:	01 c0       	rjmp	.+2      	; 0x65a <data_to_port+0x28>
     658:	46 98       	cbi	0x08, 6	; 8
     65a:	84 ff       	sbrs	r24, 4
     65c:	02 c0       	rjmp	.+4      	; 0x662 <data_to_port+0x30>
     65e:	47 9a       	sbi	0x08, 7	; 8
     660:	01 c0       	rjmp	.+2      	; 0x664 <data_to_port+0x32>
     662:	47 98       	cbi	0x08, 7	; 8
     664:	85 ff       	sbrs	r24, 5
     666:	02 c0       	rjmp	.+4      	; 0x66c <data_to_port+0x3a>
     668:	a0 9a       	sbi	0x14, 0	; 20
     66a:	01 c0       	rjmp	.+2      	; 0x66e <data_to_port+0x3c>
     66c:	a0 98       	cbi	0x14, 0	; 20
     66e:	86 ff       	sbrs	r24, 6
     670:	02 c0       	rjmp	.+4      	; 0x676 <data_to_port+0x44>
     672:	a1 9a       	sbi	0x14, 1	; 20
     674:	01 c0       	rjmp	.+2      	; 0x678 <data_to_port+0x46>
     676:	a1 98       	cbi	0x14, 1	; 20
     678:	88 23       	and	r24, r24
     67a:	14 f4       	brge	.+4      	; 0x680 <data_to_port+0x4e>
     67c:	5f 9a       	sbi	0x0b, 7	; 11
     67e:	08 95       	ret
     680:	5f 98       	cbi	0x0b, 7	; 11
     682:	08 95       	ret

00000684 <lcd_send_cmd>:
     684:	0e 94 19 03 	call	0x632	; 0x632 <data_to_port>
     688:	42 98       	cbi	0x08, 2	; 8
     68a:	41 98       	cbi	0x08, 1	; 8
     68c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68e:	8f e8       	ldi	r24, 0x8F	; 143
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <lcd_send_cmd+0xe>
     696:	00 c0       	rjmp	.+0      	; 0x698 <lcd_send_cmd+0x14>
     698:	00 00       	nop
     69a:	40 98       	cbi	0x08, 0	; 8
     69c:	08 95       	ret

0000069e <setup_lcd>:
     69e:	87 b1       	in	r24, 0x07	; 7
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	87 b9       	out	0x07, r24	; 7
     6a4:	83 b3       	in	r24, 0x13	; 19
     6a6:	83 60       	ori	r24, 0x03	; 3
     6a8:	83 bb       	out	0x13, r24	; 19
     6aa:	57 9a       	sbi	0x0a, 7	; 10
     6ac:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ae:	2f ef       	ldi	r18, 0xFF	; 255
     6b0:	83 ed       	ldi	r24, 0xD3	; 211
     6b2:	90 e3       	ldi	r25, 0x30	; 48
     6b4:	21 50       	subi	r18, 0x01	; 1
     6b6:	80 40       	sbci	r24, 0x00	; 0
     6b8:	90 40       	sbci	r25, 0x00	; 0
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <setup_lcd+0x16>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <setup_lcd+0x20>
     6be:	00 00       	nop
     6c0:	80 e3       	ldi	r24, 0x30	; 48
     6c2:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     6c6:	8f e3       	ldi	r24, 0x3F	; 63
     6c8:	9c e9       	ldi	r25, 0x9C	; 156
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <setup_lcd+0x2c>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <setup_lcd+0x32>
     6d0:	00 00       	nop
     6d2:	88 e3       	ldi	r24, 0x38	; 56
     6d4:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     6de:	8c e0       	ldi	r24, 0x0C	; 12
     6e0:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     6f0:	08 95       	ret

000006f2 <lcd_send_data>:
     6f2:	0e 94 19 03 	call	0x632	; 0x632 <data_to_port>
     6f6:	42 9a       	sbi	0x08, 2	; 8
     6f8:	41 98       	cbi	0x08, 1	; 8
     6fa:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fc:	8f e8       	ldi	r24, 0x8F	; 143
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <lcd_send_data+0xe>
     704:	00 c0       	rjmp	.+0      	; 0x706 <lcd_send_data+0x14>
     706:	00 00       	nop
     708:	40 98       	cbi	0x08, 0	; 8
     70a:	08 95       	ret

0000070c <lcd_set_cursor>:
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <lcd_set_cursor+0x6>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	90 e8       	ldi	r25, 0x80	; 128
     718:	99 83       	std	Y+1, r25	; 0x01
     71a:	90 ec       	ldi	r25, 0xC0	; 192
     71c:	9a 83       	std	Y+2, r25	; 0x02
     71e:	fe 01       	movw	r30, r28
     720:	e8 0f       	add	r30, r24
     722:	f1 1d       	adc	r31, r1
     724:	61 50       	subi	r22, 0x01	; 1
     726:	80 81       	ld	r24, Z
     728:	86 0f       	add	r24, r22
     72a:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     72e:	8f e8       	ldi	r24, 0x8F	; 143
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <lcd_set_cursor+0x26>
     736:	00 c0       	rjmp	.+0      	; 0x738 <lcd_set_cursor+0x2c>
     738:	00 00       	nop
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <lcd_print>:
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	88 23       	and	r24, r24
     750:	59 f0       	breq	.+22     	; 0x768 <lcd_print+0x24>
     752:	8f 01       	movw	r16, r30
     754:	c0 e0       	ldi	r28, 0x00	; 0
     756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <lcd_send_data>
     75a:	cf 5f       	subi	r28, 0xFF	; 255
     75c:	f8 01       	movw	r30, r16
     75e:	ec 0f       	add	r30, r28
     760:	f1 1d       	adc	r31, r1
     762:	80 81       	ld	r24, Z
     764:	81 11       	cpse	r24, r1
     766:	f7 cf       	rjmp	.-18     	; 0x756 <lcd_print+0x12>
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	08 95       	ret

00000770 <lcd_print_int>:
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	60 97       	sbiw	r28, 0x10	; 16
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	fc 01       	movw	r30, r24
     786:	00 97       	sbiw	r24, 0x00	; 0
     788:	41 f0       	breq	.+16     	; 0x79a <lcd_print_int+0x2a>
     78a:	2a e0       	ldi	r18, 0x0A	; 10
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	b9 01       	movw	r22, r18
     790:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__divmodhi4>
     794:	cb 01       	movw	r24, r22
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	d1 f7       	brne	.-12     	; 0x78e <lcd_print_int+0x1e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     79a:	4a e0       	ldi	r20, 0x0A	; 10
     79c:	be 01       	movw	r22, r28
     79e:	6f 5f       	subi	r22, 0xFF	; 255
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	cf 01       	movw	r24, r30
     7a4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__itoa_ncheck>
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     7b0:	60 96       	adiw	r28, 0x10	; 16
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <js_mtr_scaling>:

}

void reset_TMR1()
{
	TCNT1 = 0;
     7c2:	bc 01       	movw	r22, r24
     7c4:	99 0f       	add	r25, r25
     7c6:	88 0b       	sbc	r24, r24
     7c8:	99 0b       	sbc	r25, r25
     7ca:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
     7ce:	2c ee       	ldi	r18, 0xEC	; 236
     7d0:	31 e5       	ldi	r19, 0x51	; 81
     7d2:	48 eb       	ldi	r20, 0xB8	; 184
     7d4:	5f e3       	ldi	r21, 0x3F	; 63
     7d6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 ee       	ldi	r20, 0xE0	; 224
     7e0:	50 e4       	ldi	r21, 0x40	; 64
     7e2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__subsf3>
     7e6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fixsfsi>
     7ea:	ab 01       	movw	r20, r22
     7ec:	9b 01       	movw	r18, r22
     7ee:	2d 5c       	subi	r18, 0xCD	; 205
     7f0:	31 40       	sbci	r19, 0x01	; 1
     7f2:	29 35       	cpi	r18, 0x59	; 89
     7f4:	31 05       	cpc	r19, r1
     7f6:	c8 f0       	brcs	.+50     	; 0x82a <js_mtr_scaling+0x68>
     7f8:	67 32       	cpi	r22, 0x27	; 39
     7fa:	22 e0       	ldi	r18, 0x02	; 2
     7fc:	72 07       	cpc	r23, r18
     7fe:	2c f0       	brlt	.+10     	; 0x80a <js_mtr_scaling+0x48>
     800:	4d 5e       	subi	r20, 0xED	; 237
     802:	51 40       	sbci	r21, 0x01	; 1
     804:	44 0f       	add	r20, r20
     806:	55 1f       	adc	r21, r21
     808:	12 c0       	rjmp	.+36     	; 0x82e <js_mtr_scaling+0x6c>
     80a:	6c 3c       	cpi	r22, 0xCC	; 204
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	72 07       	cpc	r23, r18
     810:	74 f4       	brge	.+28     	; 0x82e <js_mtr_scaling+0x6c>
     812:	2d ee       	ldi	r18, 0xED	; 237
     814:	31 e0       	ldi	r19, 0x01	; 1
     816:	c9 01       	movw	r24, r18
     818:	86 1b       	sub	r24, r22
     81a:	97 0b       	sbc	r25, r23
     81c:	91 95       	neg	r25
     81e:	81 95       	neg	r24
     820:	91 09       	sbc	r25, r1
     822:	ac 01       	movw	r20, r24
     824:	44 0f       	add	r20, r20
     826:	55 1f       	adc	r21, r21
     828:	02 c0       	rjmp	.+4      	; 0x82e <js_mtr_scaling+0x6c>
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	ca 01       	movw	r24, r20
     830:	49 3e       	cpi	r20, 0xE9	; 233
     832:	53 40       	sbci	r21, 0x03	; 3
     834:	14 f0       	brlt	.+4      	; 0x83a <js_mtr_scaling+0x78>
     836:	88 ee       	ldi	r24, 0xE8	; 232
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	08 95       	ret

0000083c <js_srv_scaling>:
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	2c ee       	ldi	r18, 0xEC	; 236
     846:	31 e5       	ldi	r19, 0x51	; 81
     848:	48 eb       	ldi	r20, 0xB8	; 184
     84a:	5f e3       	ldi	r21, 0x3F	; 63
     84c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 ee       	ldi	r20, 0xE0	; 224
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__subsf3>
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e8       	ldi	r19, 0x80	; 128
     864:	49 e0       	ldi	r20, 0x09	; 9
     866:	54 e4       	ldi	r21, 0x44	; 68
     868:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__cmpsf2>
     86c:	88 23       	and	r24, r24
     86e:	5c f4       	brge	.+22     	; 0x886 <js_srv_scaling+0x4a>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	46 ee       	ldi	r20, 0xE6	; 230
     876:	53 e4       	ldi	r21, 0x43	; 67
     878:	c7 01       	movw	r24, r14
     87a:	b6 01       	movw	r22, r12
     87c:	0e 94 bf 0c 	call	0x197e	; 0x197e <__gesf2>
     880:	18 16       	cp	r1, r24
     882:	0c f4       	brge	.+2      	; 0x886 <js_srv_scaling+0x4a>
     884:	5c c0       	rjmp	.+184    	; 0x93e <js_srv_scaling+0x102>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e8       	ldi	r19, 0x80	; 128
     88a:	49 e0       	ldi	r20, 0x09	; 9
     88c:	54 e4       	ldi	r21, 0x44	; 68
     88e:	c7 01       	movw	r24, r14
     890:	b6 01       	movw	r22, r12
     892:	0e 94 bf 0c 	call	0x197e	; 0x197e <__gesf2>
     896:	18 16       	cp	r1, r24
     898:	ac f4       	brge	.+42     	; 0x8c4 <js_srv_scaling+0x88>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e8       	ldi	r19, 0x80	; 128
     89e:	46 ef       	ldi	r20, 0xF6	; 246
     8a0:	53 e4       	ldi	r21, 0x43	; 67
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__subsf3>
     8aa:	9b 01       	movw	r18, r22
     8ac:	ac 01       	movw	r20, r24
     8ae:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__addsf3>
     8b2:	2a e9       	ldi	r18, 0x9A	; 154
     8b4:	39 e9       	ldi	r19, 0x99	; 153
     8b6:	41 eb       	ldi	r20, 0xB1	; 177
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__divsf3>
     8be:	6b 01       	movw	r12, r22
     8c0:	7c 01       	movw	r14, r24
     8c2:	20 c0       	rjmp	.+64     	; 0x904 <js_srv_scaling+0xc8>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	46 ee       	ldi	r20, 0xE6	; 230
     8ca:	53 e4       	ldi	r21, 0x43	; 67
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__cmpsf2>
     8d4:	88 23       	and	r24, r24
     8d6:	b4 f4       	brge	.+44     	; 0x904 <js_srv_scaling+0xc8>
     8d8:	a7 01       	movw	r20, r14
     8da:	96 01       	movw	r18, r12
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e8       	ldi	r23, 0x80	; 128
     8e0:	86 ef       	ldi	r24, 0xF6	; 246
     8e2:	93 e4       	ldi	r25, 0x43	; 67
     8e4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__subsf3>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 ec       	ldi	r21, 0xC0	; 192
     8f0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
     8f4:	2a e9       	ldi	r18, 0x9A	; 154
     8f6:	39 e9       	ldi	r19, 0x99	; 153
     8f8:	41 eb       	ldi	r20, 0xB1	; 177
     8fa:	51 e4       	ldi	r21, 0x41	; 65
     8fc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__divsf3>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	4a e7       	ldi	r20, 0x7A	; 122
     90a:	54 e4       	ldi	r21, 0x44	; 68
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	0e 94 bf 0c 	call	0x197e	; 0x197e <__gesf2>
     914:	18 16       	cp	r1, r24
     916:	bc f0       	brlt	.+46     	; 0x946 <js_srv_scaling+0x10a>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	4a e7       	ldi	r20, 0x7A	; 122
     91e:	54 ec       	ldi	r21, 0xC4	; 196
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__cmpsf2>
     928:	88 23       	and	r24, r24
     92a:	ac f4       	brge	.+42     	; 0x956 <js_srv_scaling+0x11a>
     92c:	0f 2e       	mov	r0, r31
     92e:	c1 2c       	mov	r12, r1
     930:	d1 2c       	mov	r13, r1
     932:	fa e7       	ldi	r31, 0x7A	; 122
     934:	ef 2e       	mov	r14, r31
     936:	f4 ec       	ldi	r31, 0xC4	; 196
     938:	ff 2e       	mov	r15, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	0c c0       	rjmp	.+24     	; 0x956 <js_srv_scaling+0x11a>
     93e:	c1 2c       	mov	r12, r1
     940:	d1 2c       	mov	r13, r1
     942:	76 01       	movw	r14, r12
     944:	08 c0       	rjmp	.+16     	; 0x956 <js_srv_scaling+0x11a>
     946:	0f 2e       	mov	r0, r31
     948:	c1 2c       	mov	r12, r1
     94a:	d1 2c       	mov	r13, r1
     94c:	fa e7       	ldi	r31, 0x7A	; 122
     94e:	ef 2e       	mov	r14, r31
     950:	f4 e4       	ldi	r31, 0x44	; 68
     952:	ff 2e       	mov	r15, r31
     954:	f0 2d       	mov	r31, r0
     956:	c7 01       	movw	r24, r14
     958:	b6 01       	movw	r22, r12
     95a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fixsfsi>
     95e:	cb 01       	movw	r24, r22
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	08 95       	ret

0000096a <get_speed>:
     96a:	63 e0       	ldi	r22, 0x03	; 3
     96c:	85 e0       	ldi	r24, 0x05	; 5
     96e:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     972:	bc 01       	movw	r22, r24
     974:	99 0f       	add	r25, r25
     976:	88 0b       	sbc	r24, r24
     978:	99 0b       	sbc	r25, r25
     97a:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e8       	ldi	r19, 0x80	; 128
     982:	49 e8       	ldi	r20, 0x89	; 137
     984:	54 e4       	ldi	r21, 0x44	; 68
     986:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__divsf3>
     98a:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <speed>
     98e:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <speed+0x1>
     992:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <speed+0x2>
     996:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <speed+0x3>
     99a:	08 95       	ret

0000099c <lcd_print_position>:
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     9a4:	8a e0       	ldi	r24, 0x0A	; 10
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     9ac:	67 e0       	ldi	r22, 0x07	; 7
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     9b4:	8e eb       	ldi	r24, 0xBE	; 190
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     9bc:	6a e0       	ldi	r22, 0x0A	; 10
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     9c4:	8e eb       	ldi	r24, 0xBE	; 190
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     9d4:	8f e0       	ldi	r24, 0x0F	; 15
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     9dc:	67 e0       	ldi	r22, 0x07	; 7
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     9e4:	8e eb       	ldi	r24, 0xBE	; 190
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     9ec:	6a e0       	ldi	r22, 0x0A	; 10
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     9f4:	8e eb       	ldi	r24, 0xBE	; 190
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     9fc:	65 e0       	ldi	r22, 0x05	; 5
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     a04:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <lat_deg>
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 b8 03 	call	0x770	; 0x770 <lcd_print_int>
     a0e:	68 e0       	ldi	r22, 0x08	; 8
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     a16:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <lat_min>
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 b8 03 	call	0x770	; 0x770 <lcd_print_int>
     a20:	6b e0       	ldi	r22, 0x0B	; 11
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     a28:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <lat_sec>
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 b8 03 	call	0x770	; 0x770 <lcd_print_int>
     a32:	8e e7       	ldi	r24, 0x7E	; 126
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     a3a:	65 e0       	ldi	r22, 0x05	; 5
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     a42:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <lon_deg>
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 b8 03 	call	0x770	; 0x770 <lcd_print_int>
     a4c:	68 e0       	ldi	r22, 0x08	; 8
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     a54:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <lon_min>
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 b8 03 	call	0x770	; 0x770 <lcd_print_int>
     a5e:	6b e0       	ldi	r22, 0x0B	; 11
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
     a66:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <lon_sec>
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 b8 03 	call	0x770	; 0x770 <lcd_print_int>
     a70:	8a e7       	ldi	r24, 0x7A	; 122
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     a78:	08 95       	ret

00000a7a <setup_TMR1>:
     a7a:	e1 e8       	ldi	r30, 0x81	; 129
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	84 60       	ori	r24, 0x04	; 4
     a82:	80 83       	st	Z, r24
     a84:	08 95       	ret

00000a86 <setup_TMR3>:
}

void setup_TMR3()
{
	TCCR3A |= (1<<COM3A1); // set OC2A on compare match
     a86:	e0 e9       	ldi	r30, 0x90	; 144
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	80 68       	ori	r24, 0x80	; 128
     a8e:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32) | (1<<CS32) | (1<<CS30); // 1024 prescaler, CTC mode
     a90:	e1 e9       	ldi	r30, 0x91	; 145
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	8d 60       	ori	r24, 0x0D	; 13
     a98:	80 83       	st	Z, r24
	OCR3A = 31248; 
     a9a:	80 e1       	ldi	r24, 0x10	; 16
     a9c:	9a e7       	ldi	r25, 0x7A	; 122
     a9e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     aa2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	TIMSK3 |= (1<<OCIE3A);
     aa6:	e1 e7       	ldi	r30, 0x71	; 113
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	80 83       	st	Z, r24
     ab0:	08 95       	ret

00000ab2 <main>:
uint8_t one_time_flag = 0;
int8_t encoder_count = 0;

int main(void)
{
	setup_ports();
     ab2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setup_ports>
	setup_ext_int(ENC_2_A,      FALLING);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 84 01 	call	0x308	; 0x308 <setup_ext_int>
	setup_ext_int(ENC_2_SWITCH, FALLING);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	85 e0       	ldi	r24, 0x05	; 5
     ac2:	0e 94 84 01 	call	0x308	; 0x308 <setup_ext_int>
	setup_TMR1();
     ac6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <setup_TMR1>
	setup_TMR3();
     aca:	0e 94 43 05 	call	0xa86	; 0xa86 <setup_TMR3>
	setup_lcd();
     ace:	0e 94 4f 03 	call	0x69e	; 0x69e <setup_lcd>
	setup_adc();
     ad2:	0e 94 91 00 	call	0x122	; 0x122 <setup_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad6:	8f e3       	ldi	r24, 0x3F	; 63
     ad8:	9c e9       	ldi	r25, 0x9C	; 156
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <main+0x28>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <main+0x2e>
     ae0:	00 00       	nop
	_delay_ms(10);
	lcd_set_cursor(1,1);
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
	lcd_print("Initializing...");
     aea:	84 e1       	ldi	r24, 0x14	; 20
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     af2:	ef ed       	ldi	r30, 0xDF	; 223
     af4:	fe e2       	ldi	r31, 0x2E	; 46
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <main+0x44>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <main+0x4a>
     afc:	00 00       	nop
	_delay_ms(3);
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <setup_usart0>
	mirf_init();	
     b04:	0e 94 67 09 	call	0x12ce	; 0x12ce <mirf_init>
	lcd_send_cmd(CLEAR_DISPLAY);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
	
	LED_check();
     b0e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LED_check>
	
	mirf_config();
     b12:	0e 94 a7 09 	call	0x134e	; 0x134e <mirf_config>
	
	 /* Set the device addresses */
	mirf_set_TADDR(tx_address);
     b16:	85 e0       	ldi	r24, 0x05	; 5
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 17 0a 	call	0x142e	; 0x142e <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	0e 94 0f 0a 	call	0x141e	; 0x141e <mirf_set_RADDR>
     b26:	8f e3       	ldi	r24, 0x3F	; 63
     b28:	9c e9       	ldi	r25, 0x9C	; 156
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <main+0x78>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0x7e>
     b30:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_send_cmd(CLEAR_DISPLAY);
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     b38:	ef ed       	ldi	r30, 0xDF	; 223
     b3a:	fe e2       	ldi	r31, 0x2E	; 46
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <main+0x8a>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <main+0x90>
     b42:	00 00       	nop
	_delay_ms(3);
	lcd_set_cursor(1,1);
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
	lcd_print("Initialization  ");
     b4c:	84 e2       	ldi	r24, 0x24	; 36
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     b54:	ff ef       	ldi	r31, 0xFF	; 255
     b56:	23 ed       	ldi	r18, 0xD3	; 211
     b58:	80 e3       	ldi	r24, 0x30	; 48
     b5a:	f1 50       	subi	r31, 0x01	; 1
     b5c:	20 40       	sbci	r18, 0x00	; 0
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	e1 f7       	brne	.-8      	; 0xb5a <main+0xa8>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <main+0xb2>
     b64:	00 00       	nop
	_delay_ms(1000);
	sei(); // enable global interrupts
     b66:	78 94       	sei
	
	lcd_send_cmd(CLEAR_DISPLAY);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 42 03 	call	0x684	; 0x684 <lcd_send_cmd>
     b6e:	ef ed       	ldi	r30, 0xDF	; 223
     b70:	fe e2       	ldi	r31, 0x2E	; 46
     b72:	31 97       	sbiw	r30, 0x01	; 1
     b74:	f1 f7       	brne	.-4      	; 0xb72 <main+0xc0>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <main+0xc6>
     b78:	00 00       	nop
	_delay_ms(3);
	
	lcd_set_cursor(1,1);
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
	lcd_print("NO CONNECTION");
     b82:	85 e3       	ldi	r24, 0x35	; 53
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
			
		}
		
		loop_delay_counter++;
		
		TOGGLE_LED1;
     b8a:	0f 2e       	mov	r0, r31
     b8c:	fb e0       	ldi	r31, 0x0B	; 11
     b8e:	ef 2e       	mov	r14, r31
     b90:	ff 24       	eor	r15, r15
     b92:	f3 94       	inc	r15
     b94:	f0 2d       	mov	r31, r0
			mtr_cmd = analog_get_average(JOYSTICK2_Y, 5);
			mtr_cmd = .75 * mtr_cmd + .25 * old_mtr_cmd;
			old_mtr_cmd = mtr_cmd;
			mtr_cmd = js_mtr_scaling(mtr_cmd); 
			mtr_cmd *= speed;
			buffer[0] = (mtr_cmd >> 8); // MSB
     b96:	0a ee       	ldi	r16, 0xEA	; 234
     b98:	12 e0       	ldi	r17, 0x02	; 2
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
			buffer[2] = srv_cmd;
     b9a:	0f 2e       	mov	r0, r31
     b9c:	f2 ee       	ldi	r31, 0xE2	; 226
     b9e:	af 2e       	mov	r10, r31
     ba0:	f2 e0       	ldi	r31, 0x02	; 2
     ba2:	bf 2e       	mov	r11, r31
     ba4:	f0 2d       	mov	r31, r0

}

void reset_TMR1()
{
	TCNT1 = 0;
     ba6:	c4 e8       	ldi	r28, 0x84	; 132
     ba8:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if (TCNT1 > 3000) // timeout of one second
				{
					comm_lost = 1;
					comm_lost_count++;
					TOGGLE_LED3;
     baa:	68 94       	set
     bac:	99 24       	eor	r9, r9
     bae:	92 f8       	bld	r9, 2
			old_srv_cmd = srv_cmd;
			srv_cmd = js_srv_scaling(srv_cmd);
			if ((srv_cmd < 5) && (srv_cmd > -5))
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
     bb0:	0f 2e       	mov	r0, r31
     bb2:	fd e2       	ldi	r31, 0x2D	; 45
     bb4:	2f 2e       	mov	r2, r31
     bb6:	31 2c       	mov	r3, r1
     bb8:	f0 2d       	mov	r31, r0
		}

		if ( (loop_delay_counter > 100) && (toggle_gps) )
		{
			loop_delay_counter = 0;
			buffer[0] = 'O';
     bba:	0f 2e       	mov	r0, r31
     bbc:	ff e4       	ldi	r31, 0x4F	; 79
     bbe:	8f 2e       	mov	r8, r31
     bc0:	f0 2d       	mov	r31, r0
	lcd_set_cursor(1,1);
	lcd_print("NO CONNECTION");

    while (1) 
    {
		if (comm_lost_count > 50)
     bc2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
     bc6:	83 33       	cpi	r24, 0x33	; 51
     bc8:	20 f0       	brcs	.+8      	; 0xbd2 <main+0x120>
		{
			comm_lost_count = 0;
     bca:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <comm_lost_count>
			mirf_config();
     bce:	0e 94 a7 09 	call	0x134e	; 0x134e <mirf_config>
		}
		
		if (encoder_count == 0)
     bd2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <__data_end>
     bd6:	81 11       	cpse	r24, r1
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <main+0x15a>
		{
			if (BOAT_ON && (BOAT_OFF == 0))
     bda:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <BOAT_ON>
     bde:	88 23       	and	r24, r24
     be0:	09 f4       	brne	.+2      	; 0xbe4 <main+0x132>
     be2:	53 c0       	rjmp	.+166    	; 0xc8a <main+0x1d8>
     be4:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <BOAT_OFF>
     be8:	81 11       	cpse	r24, r1
     bea:	4f c0       	rjmp	.+158    	; 0xc8a <main+0x1d8>
			{
				lcd_set_cursor(1,1);
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
				lcd_print("Connected    ");
     bf4:	83 e4       	ldi	r24, 0x43	; 67
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
				lcd_set_cursor(2,1);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
				lcd_print("SPEED =        ");
     c04:	81 e5       	ldi	r24, 0x51	; 81
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
			}
		}
		
		// DISPLAY GPS
		if (encoder_count == 1)
     c0c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <__data_end>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	d9 f5       	brne	.+118    	; 0xc8a <main+0x1d8>
		{
			if (!toggle_gps)
     c14:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <toggle_gps>
     c18:	81 11       	cpse	r24, r1
     c1a:	11 c0       	rjmp	.+34     	; 0xc3e <main+0x18c>
			{
				lcd_set_cursor(1,1);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
				lcd_print("GPS OFF      ");
     c24:	81 e6       	ldi	r24, 0x61	; 97
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
				lcd_set_cursor(2,1);
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
				lcd_print("                ");
     c34:	8f e6       	ldi	r24, 0x6F	; 111
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
     c3c:	26 c0       	rjmp	.+76     	; 0xc8a <main+0x1d8>
			}
			else
			{
				if (GPS_ON && (BOAT_OFF == 0))
     c3e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <GPS_ON>
     c42:	88 23       	and	r24, r24
     c44:	31 f0       	breq	.+12     	; 0xc52 <main+0x1a0>
     c46:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <BOAT_OFF>
     c4a:	81 11       	cpse	r24, r1
     c4c:	1e c0       	rjmp	.+60     	; 0xc8a <main+0x1d8>
				{
					lcd_print_position();
     c4e:	0e 94 ce 04 	call	0x99c	; 0x99c <lcd_print_position>
				}
				
				if (BOAT_ON && (BOAT_OFF == 0))
     c52:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <BOAT_ON>
     c56:	88 23       	and	r24, r24
     c58:	c1 f0       	breq	.+48     	; 0xc8a <main+0x1d8>
     c5a:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <BOAT_OFF>
     c5e:	81 11       	cpse	r24, r1
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <main+0x1d8>
				{
					if (!GPS_ON)
     c62:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <GPS_ON>
     c66:	81 11       	cpse	r24, r1
     c68:	10 c0       	rjmp	.+32     	; 0xc8a <main+0x1d8>
					{
						lcd_set_cursor(1,1);
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
						lcd_print("Connected,   ");
     c72:	80 e8       	ldi	r24, 0x80	; 128
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
						lcd_set_cursor(2,1);
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
						lcd_print("Waiting on GPS  ");
     c82:	8e e8       	ldi	r24, 0x8E	; 142
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
				}
			}
			
		}
		
		loop_delay_counter++;
     c8a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <loop_delay_counter>
     c8e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <loop_delay_counter+0x1>
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <loop_delay_counter+0x1>
     c98:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <loop_delay_counter>
		
		TOGGLE_LED1;
     c9c:	f7 01       	movw	r30, r14
     c9e:	90 81       	ld	r25, Z
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 27       	eor	r24, r25
     ca4:	80 83       	st	Z, r24
		
		if ( (toggle_gps == 0) && (one_time_flag == 0))
     ca6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <toggle_gps>
     caa:	81 11       	cpse	r24, r1
     cac:	3a c0       	rjmp	.+116    	; 0xd22 <main+0x270>
     cae:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <one_time_flag>
     cb2:	81 11       	cpse	r24, r1
     cb4:	47 c2       	rjmp	.+1166   	; 0x1144 <main+0x692>
		{
			one_time_flag = 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <one_time_flag>
			buffer[0] = 'N';
     cbc:	8e e4       	ldi	r24, 0x4E	; 78
     cbe:	f8 01       	movw	r30, r16
     cc0:	80 83       	st	Z, r24
			mirf_send(buffer, mirf_PAYLOAD);
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	c8 01       	movw	r24, r16
     cc6:	0e 94 27 0a 	call	0x144e	; 0x144e <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cca:	f5 e3       	ldi	r31, 0x35	; 53
     ccc:	fa 95       	dec	r31
     cce:	f1 f7       	brne	.-4      	; 0xccc <main+0x21a>
     cd0:	00 00       	nop

}

void reset_TMR1()
{
	TCNT1 = 0;
     cd2:	19 82       	std	Y+1, r1	; 0x01
     cd4:	18 82       	st	Y, r1
     cd6:	12 c0       	rjmp	.+36     	; 0xcfc <main+0x24a>
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     cd8:	88 81       	ld	r24, Y
     cda:	99 81       	ldd	r25, Y+1	; 0x01
     cdc:	89 3b       	cpi	r24, 0xB9	; 185
     cde:	9b 40       	sbci	r25, 0x0B	; 11
     ce0:	68 f0       	brcs	.+26     	; 0xcfc <main+0x24a>
				{
					comm_lost = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <comm_lost>
					comm_lost_count++;
     ce8:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <comm_lost_count>
					TOGGLE_LED3;
     cf2:	f7 01       	movw	r30, r14
     cf4:	80 81       	ld	r24, Z
     cf6:	89 25       	eor	r24, r9
     cf8:	80 83       	st	Z, r24
					break;
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <main+0x252>
			one_time_flag = 1;
			buffer[0] = 'N';
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
     cfc:	0e 94 82 09 	call	0x1304	; 0x1304 <mirf_data_sent>
     d00:	88 23       	and	r24, r24
     d02:	51 f3       	breq	.-44     	; 0xcd8 <main+0x226>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     d04:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <comm_lost>
     d08:	81 11       	cpse	r24, r1
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <main+0x266>
			{
				BOAT_ON = 1; // one time flag
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <BOAT_ON>
				BOAT_OFF = 0;
     d12:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <BOAT_OFF>
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <main+0x270>
			}
			else
			{
				comm_lost = 0;
     d18:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <comm_lost>
				BOAT_OFF = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <BOAT_OFF>
			}
		}
		if ( (toggle_gps == 1) && (one_time_flag == 0) )
     d22:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <toggle_gps>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	d1 f5       	brne	.+116    	; 0xd9e <main+0x2ec>
     d2a:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <one_time_flag>
     d2e:	81 11       	cpse	r24, r1
     d30:	02 c2       	rjmp	.+1028   	; 0x1136 <main+0x684>
		{
			one_time_flag = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <one_time_flag>
			buffer[0] = 'Y';
     d38:	89 e5       	ldi	r24, 0x59	; 89
     d3a:	f8 01       	movw	r30, r16
     d3c:	80 83       	st	Z, r24
			mirf_send(buffer, mirf_PAYLOAD);
     d3e:	63 e0       	ldi	r22, 0x03	; 3
     d40:	c8 01       	movw	r24, r16
     d42:	0e 94 27 0a 	call	0x144e	; 0x144e <mirf_send>
     d46:	f5 e3       	ldi	r31, 0x35	; 53
     d48:	fa 95       	dec	r31
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <main+0x296>
     d4c:	00 00       	nop

}

void reset_TMR1()
{
	TCNT1 = 0;
     d4e:	19 82       	std	Y+1, r1	; 0x01
     d50:	18 82       	st	Y, r1
     d52:	12 c0       	rjmp	.+36     	; 0xd78 <main+0x2c6>
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     d54:	88 81       	ld	r24, Y
     d56:	99 81       	ldd	r25, Y+1	; 0x01
     d58:	89 3b       	cpi	r24, 0xB9	; 185
     d5a:	9b 40       	sbci	r25, 0x0B	; 11
     d5c:	68 f0       	brcs	.+26     	; 0xd78 <main+0x2c6>
				{
					comm_lost = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <comm_lost>
					comm_lost_count++;
     d64:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <comm_lost_count>
					TOGGLE_LED3;
     d6e:	f7 01       	movw	r30, r14
     d70:	80 81       	ld	r24, Z
     d72:	89 25       	eor	r24, r9
     d74:	80 83       	st	Z, r24
					break;
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <main+0x2ce>
			one_time_flag = 1;
			buffer[0] = 'Y';
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
     d78:	0e 94 82 09 	call	0x1304	; 0x1304 <mirf_data_sent>
     d7c:	88 23       	and	r24, r24
     d7e:	51 f3       	breq	.-44     	; 0xd54 <main+0x2a2>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     d80:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <comm_lost>
     d84:	81 11       	cpse	r24, r1
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <main+0x2e2>
			{
				BOAT_ON = 1; // one time flag
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <BOAT_ON>
				BOAT_OFF = 0;
     d8e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <BOAT_OFF>
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <main+0x2ec>
			}
			else
			{
				comm_lost = 0;
     d94:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <comm_lost>
				BOAT_OFF = 1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <BOAT_OFF>
			}
		}
		
		if ( (loop_delay_counter == 50) && (toggle_gps) )
     d9e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <loop_delay_counter>
     da2:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <loop_delay_counter+0x1>
     da6:	c2 97       	sbiw	r24, 0x32	; 50
     da8:	09 f0       	breq	.+2      	; 0xdac <main+0x2fa>
     daa:	71 c0       	rjmp	.+226    	; 0xe8e <main+0x3dc>
     dac:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <toggle_gps>
     db0:	88 23       	and	r24, r24
     db2:	09 f4       	brne	.+2      	; 0xdb6 <main+0x304>
     db4:	df c0       	rjmp	.+446    	; 0xf74 <main+0x4c2>
		{
			buffer[0] = 'A';
     db6:	21 e4       	ldi	r18, 0x41	; 65
     db8:	f8 01       	movw	r30, r16
     dba:	20 83       	st	Z, r18
			mirf_send(buffer, mirf_PAYLOAD);
     dbc:	63 e0       	ldi	r22, 0x03	; 3
     dbe:	c8 01       	movw	r24, r16
     dc0:	0e 94 27 0a 	call	0x144e	; 0x144e <mirf_send>

}

void reset_TMR1()
{
	TCNT1 = 0;
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	18 82       	st	Y, r1
     dc8:	12 c0       	rjmp	.+36     	; 0xdee <main+0x33c>
			buffer[0] = 'A';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     dca:	88 81       	ld	r24, Y
     dcc:	99 81       	ldd	r25, Y+1	; 0x01
     dce:	89 3b       	cpi	r24, 0xB9	; 185
     dd0:	9b 40       	sbci	r25, 0x0B	; 11
     dd2:	68 f0       	brcs	.+26     	; 0xdee <main+0x33c>
				{
					comm_lost = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <comm_lost>
					comm_lost_count++;
     dda:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <comm_lost_count>
					TOGGLE_LED3;
     de4:	f7 01       	movw	r30, r14
     de6:	80 81       	ld	r24, Z
     de8:	89 25       	eor	r24, r9
     dea:	80 83       	st	Z, r24
					break;
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <main+0x344>
		if ( (loop_delay_counter == 50) && (toggle_gps) )
		{
			buffer[0] = 'A';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
     dee:	0e 94 82 09 	call	0x1304	; 0x1304 <mirf_data_sent>
     df2:	88 23       	and	r24, r24
     df4:	51 f3       	breq	.-44     	; 0xdca <main+0x318>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     df6:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <comm_lost>
     dfa:	81 11       	cpse	r24, r1
     dfc:	46 c0       	rjmp	.+140    	; 0xe8a <main+0x3d8>
			{
				set_RX_MODE();
     dfe:	0e 94 96 09 	call	0x132c	; 0x132c <set_RX_MODE>

}

void reset_TMR1()
{
	TCNT1 = 0;
     e02:	19 82       	std	Y+1, r1	; 0x01
     e04:	18 82       	st	Y, r1
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <main+0x37e>
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
				{
					if (TCNT1 > 3000) // timeout of one second
     e08:	88 81       	ld	r24, Y
     e0a:	99 81       	ldd	r25, Y+1	; 0x01
     e0c:	89 3b       	cpi	r24, 0xB9	; 185
     e0e:	9b 40       	sbci	r25, 0x0B	; 11
     e10:	78 f0       	brcs	.+30     	; 0xe30 <main+0x37e>
					{
						comm_lost = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <comm_lost>
						comm_lost_count++;
     e18:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <comm_lost_count>
						TOGGLE_LED6;
     e22:	f7 01       	movw	r30, r14
     e24:	80 81       	ld	r24, Z
     e26:	f0 e2       	ldi	r31, 0x20	; 32
     e28:	8f 27       	eor	r24, r31
     e2a:	f7 01       	movw	r30, r14
     e2c:	80 83       	st	Z, r24
						break;
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <main+0x386>
			}
			if (!comm_lost)
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
     e30:	0e 94 75 09 	call	0x12ea	; 0x12ea <mirf_data_ready>
     e34:	88 23       	and	r24, r24
     e36:	41 f3       	breq	.-48     	; 0xe08 <main+0x356>
						comm_lost_count++;
						TOGGLE_LED6;
						break;
					}
				}
				if (!comm_lost)
     e38:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <comm_lost>
     e3c:	81 11       	cpse	r24, r1
     e3e:	20 c0       	rjmp	.+64     	; 0xe80 <main+0x3ce>
				{
					mirf_get_data(buffer); // get the data, put it in buffer
     e40:	c8 01       	movw	r24, r16
     e42:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <mirf_get_data>
					if(buffer[0] != 0)
     e46:	f8 01       	movw	r30, r16
     e48:	80 81       	ld	r24, Z
     e4a:	88 23       	and	r24, r24
     e4c:	b1 f0       	breq	.+44     	; 0xe7a <main+0x3c8>
					{
						GPS_ON = 1;
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <GPS_ON>
						lat_deg = buffer[0];
     e54:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <lat_deg>
						lat_min = buffer[1];
     e58:	81 81       	ldd	r24, Z+1	; 0x01
     e5a:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <lat_min>
						lat_sec = buffer[2];
						lat_sec = (lat_sec / 100 ) * 60; // converts to seconds
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	f9 e2       	ldi	r31, 0x29	; 41
     e62:	8f 9f       	mul	r24, r31
     e64:	81 2d       	mov	r24, r1
     e66:	11 24       	eor	r1, r1
     e68:	82 95       	swap	r24
     e6a:	8f 70       	andi	r24, 0x0F	; 15
     e6c:	2c e3       	ldi	r18, 0x3C	; 60
     e6e:	82 9f       	mul	r24, r18
     e70:	80 2d       	mov	r24, r0
     e72:	11 24       	eor	r1, r1
     e74:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <lat_sec>
     e78:	0a c0       	rjmp	.+20     	; 0xe8e <main+0x3dc>
					}
					else
						GPS_ON = 0;
     e7a:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GPS_ON>
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <main+0x3dc>
				}
				else
				{
					GPS_ON = 0;
     e80:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GPS_ON>
					comm_lost = 0;
     e84:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <comm_lost>
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <main+0x3dc>
				}
			}
			else
			{
				comm_lost = 0;
     e8a:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <comm_lost>
			}
		}

		if ( (loop_delay_counter > 100) && (toggle_gps) )
     e8e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <loop_delay_counter>
     e92:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <loop_delay_counter+0x1>
     e96:	85 36       	cpi	r24, 0x65	; 101
     e98:	91 05       	cpc	r25, r1
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <main+0x3ec>
     e9c:	6b c0       	rjmp	.+214    	; 0xf74 <main+0x4c2>
     e9e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <toggle_gps>
     ea2:	88 23       	and	r24, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <main+0x3f6>
     ea6:	66 c0       	rjmp	.+204    	; 0xf74 <main+0x4c2>
		{
			loop_delay_counter = 0;
     ea8:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <loop_delay_counter+0x1>
     eac:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <loop_delay_counter>
			buffer[0] = 'O';
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 82       	st	Z, r8
			mirf_send(buffer, mirf_PAYLOAD);
     eb4:	63 e0       	ldi	r22, 0x03	; 3
     eb6:	c8 01       	movw	r24, r16
     eb8:	0e 94 27 0a 	call	0x144e	; 0x144e <mirf_send>

}

void reset_TMR1()
{
	TCNT1 = 0;
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	18 82       	st	Y, r1
     ec0:	12 c0       	rjmp	.+36     	; 0xee6 <main+0x434>
			buffer[0] = 'O';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
     ec2:	88 81       	ld	r24, Y
     ec4:	99 81       	ldd	r25, Y+1	; 0x01
     ec6:	89 3b       	cpi	r24, 0xB9	; 185
     ec8:	9b 40       	sbci	r25, 0x0B	; 11
     eca:	68 f0       	brcs	.+26     	; 0xee6 <main+0x434>
				{
					comm_lost = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <comm_lost>
					comm_lost_count++;
     ed2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <comm_lost_count>
					TOGGLE_LED3;
     edc:	f7 01       	movw	r30, r14
     ede:	80 81       	ld	r24, Z
     ee0:	89 25       	eor	r24, r9
     ee2:	80 83       	st	Z, r24
					break;
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <main+0x43c>
		{
			loop_delay_counter = 0;
			buffer[0] = 'O';
			mirf_send(buffer, mirf_PAYLOAD);
			reset_TMR1();
			while (!mirf_data_sent())
     ee6:	0e 94 82 09 	call	0x1304	; 0x1304 <mirf_data_sent>
     eea:	88 23       	and	r24, r24
     eec:	51 f3       	breq	.-44     	; 0xec2 <main+0x410>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
     eee:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <comm_lost>
     ef2:	81 11       	cpse	r24, r1
     ef4:	3c c0       	rjmp	.+120    	; 0xf6e <main+0x4bc>
			{
				set_RX_MODE();
     ef6:	0e 94 96 09 	call	0x132c	; 0x132c <set_RX_MODE>

}

void reset_TMR1()
{
	TCNT1 = 0;
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	18 82       	st	Y, r1
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <main+0x476>
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
				{
					if (TCNT1 > 3000) // timeout of one second
     f00:	88 81       	ld	r24, Y
     f02:	99 81       	ldd	r25, Y+1	; 0x01
     f04:	89 3b       	cpi	r24, 0xB9	; 185
     f06:	9b 40       	sbci	r25, 0x0B	; 11
     f08:	78 f0       	brcs	.+30     	; 0xf28 <main+0x476>
					{
						comm_lost = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <comm_lost>
						comm_lost_count++;
     f10:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <comm_lost_count>
						TOGGLE_LED6;
     f1a:	f7 01       	movw	r30, r14
     f1c:	80 81       	ld	r24, Z
     f1e:	f0 e2       	ldi	r31, 0x20	; 32
     f20:	8f 27       	eor	r24, r31
     f22:	f7 01       	movw	r30, r14
     f24:	80 83       	st	Z, r24
						break;
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <main+0x47e>
			}
			if (!comm_lost)
			{
				set_RX_MODE();
				reset_TMR1();
				while(!mirf_data_ready())
     f28:	0e 94 75 09 	call	0x12ea	; 0x12ea <mirf_data_ready>
     f2c:	88 23       	and	r24, r24
     f2e:	41 f3       	breq	.-48     	; 0xf00 <main+0x44e>
						comm_lost_count++;
						TOGGLE_LED6;
						break;
					}
				}
				if (!comm_lost)
     f30:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <comm_lost>
     f34:	81 11       	cpse	r24, r1
     f36:	18 c0       	rjmp	.+48     	; 0xf68 <main+0x4b6>
				{
					mirf_get_data(buffer); // get the data, put it in buffer
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <mirf_get_data>
					lon_deg = buffer[0];
     f3e:	f8 01       	movw	r30, r16
     f40:	80 81       	ld	r24, Z
     f42:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <lon_deg>
					lon_min = buffer[1];
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <lon_min>
					lon_sec = buffer[2];
					lon_sec = (lon_sec / 100) * 60;
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	f9 e2       	ldi	r31, 0x29	; 41
     f50:	8f 9f       	mul	r24, r31
     f52:	81 2d       	mov	r24, r1
     f54:	11 24       	eor	r1, r1
     f56:	82 95       	swap	r24
     f58:	8f 70       	andi	r24, 0x0F	; 15
     f5a:	2c e3       	ldi	r18, 0x3C	; 60
     f5c:	82 9f       	mul	r24, r18
     f5e:	80 2d       	mov	r24, r0
     f60:	11 24       	eor	r1, r1
     f62:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <lon_sec>
     f66:	e0 c0       	rjmp	.+448    	; 0x1128 <main+0x676>
					
				}
				else
				comm_lost = 0;
     f68:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <comm_lost>
     f6c:	dd c0       	rjmp	.+442    	; 0x1128 <main+0x676>
			}
			else
			{
				comm_lost = 0;
     f6e:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <comm_lost>
     f72:	da c0       	rjmp	.+436    	; 0x1128 <main+0x676>
			}
		}
		else 
		{
			get_speed();
     f74:	0e 94 b5 04 	call	0x96a	; 0x96a <get_speed>
			mtr_cmd = analog_get_average(JOYSTICK2_Y, 5);
     f78:	65 e0       	ldi	r22, 0x05	; 5
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
     f80:	6c 01       	movw	r12, r24
			mtr_cmd = .75 * mtr_cmd + .25 * old_mtr_cmd;
     f82:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <old_mtr_cmd>
     f86:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <old_mtr_cmd+0x1>
     f8a:	07 2e       	mov	r0, r23
     f8c:	00 0c       	add	r0, r0
     f8e:	88 0b       	sbc	r24, r24
     f90:	99 0b       	sbc	r25, r25
     f92:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5e e3       	ldi	r21, 0x3E	; 62
     f9e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
     fa2:	2b 01       	movw	r4, r22
     fa4:	3c 01       	movw	r6, r24
     fa6:	b6 01       	movw	r22, r12
     fa8:	dd 0c       	add	r13, r13
     faa:	88 0b       	sbc	r24, r24
     fac:	99 0b       	sbc	r25, r25
     fae:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e4       	ldi	r20, 0x40	; 64
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	c3 01       	movw	r24, r6
     fc4:	b2 01       	movw	r22, r4
     fc6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__addsf3>
     fca:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fixsfsi>
			old_mtr_cmd = mtr_cmd;
     fce:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <old_mtr_cmd+0x1>
     fd2:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <old_mtr_cmd>
			mtr_cmd = js_mtr_scaling(mtr_cmd); 
     fd6:	cb 01       	movw	r24, r22
     fd8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <js_mtr_scaling>
			mtr_cmd *= speed;
     fdc:	bc 01       	movw	r22, r24
     fde:	99 0f       	add	r25, r25
     fe0:	88 0b       	sbc	r24, r24
     fe2:	99 0b       	sbc	r25, r25
     fe4:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
     fe8:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <speed>
     fec:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <speed+0x1>
     ff0:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <speed+0x2>
     ff4:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <speed+0x3>
     ff8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
     ffc:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fixsfsi>
    1000:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <mtr_cmd>
    1004:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <mtr_cmd+0x1>
			buffer[0] = (mtr_cmd >> 8); // MSB
    1008:	f8 01       	movw	r30, r16
    100a:	70 83       	st	Z, r23
			buffer[1] = mtr_cmd; // LSB
    100c:	61 83       	std	Z+1, r22	; 0x01
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
    100e:	65 e0       	ldi	r22, 0x05	; 5
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	0e 94 b6 00 	call	0x16c	; 0x16c <analog_get_average>
    1016:	6c 01       	movw	r12, r24
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
    1018:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <old_srv_cmd>
    101c:	70 91 e5 02 	lds	r23, 0x02E5	; 0x8002e5 <old_srv_cmd+0x1>
    1020:	07 2e       	mov	r0, r23
    1022:	00 0c       	add	r0, r0
    1024:	88 0b       	sbc	r24, r24
    1026:	99 0b       	sbc	r25, r25
    1028:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5e e3       	ldi	r21, 0x3E	; 62
    1034:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
    1038:	2b 01       	movw	r4, r22
    103a:	3c 01       	movw	r6, r24
    103c:	b6 01       	movw	r22, r12
    103e:	dd 0c       	add	r13, r13
    1040:	88 0b       	sbc	r24, r24
    1042:	99 0b       	sbc	r25, r25
    1044:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e4       	ldi	r20, 0x40	; 64
    104e:	5f e3       	ldi	r21, 0x3F	; 63
    1050:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__mulsf3>
    1054:	9b 01       	movw	r18, r22
    1056:	ac 01       	movw	r20, r24
    1058:	c3 01       	movw	r24, r6
    105a:	b2 01       	movw	r22, r4
    105c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__addsf3>
    1060:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fixsfsi>
			old_srv_cmd = srv_cmd;
    1064:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <old_srv_cmd+0x1>
    1068:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <old_srv_cmd>
			srv_cmd = js_srv_scaling(srv_cmd);
    106c:	07 2e       	mov	r0, r23
    106e:	00 0c       	add	r0, r0
    1070:	88 0b       	sbc	r24, r24
    1072:	99 0b       	sbc	r25, r25
    1074:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
    1078:	0e 94 1e 04 	call	0x83c	; 0x83c <js_srv_scaling>
			if ((srv_cmd < 5) && (srv_cmd > -5))
    107c:	9c 01       	movw	r18, r24
    107e:	2c 5f       	subi	r18, 0xFC	; 252
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	29 30       	cpi	r18, 0x09	; 9
    1084:	31 05       	cpc	r19, r1
    1086:	28 f4       	brcc	.+10     	; 0x1092 <main+0x5e0>
				srv_cmd = 0;
    1088:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <srv_cmd+0x1>
    108c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <srv_cmd>
    1090:	17 c0       	rjmp	.+46     	; 0x10c0 <main+0x60e>
			else if (srv_cmd > 45)
    1092:	8e 32       	cpi	r24, 0x2E	; 46
    1094:	91 05       	cpc	r25, r1
    1096:	2c f0       	brlt	.+10     	; 0x10a2 <main+0x5f0>
				srv_cmd = 45;
    1098:	30 92 e3 02 	sts	0x02E3, r3	; 0x8002e3 <srv_cmd+0x1>
    109c:	20 92 e2 02 	sts	0x02E2, r2	; 0x8002e2 <srv_cmd>
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <main+0x60e>
			else if (srv_cmd < -45)
    10a2:	83 3d       	cpi	r24, 0xD3	; 211
    10a4:	ff ef       	ldi	r31, 0xFF	; 255
    10a6:	9f 07       	cpc	r25, r31
    10a8:	2c f0       	brlt	.+10     	; 0x10b4 <main+0x602>
			buffer[1] = mtr_cmd; // LSB
			
			srv_cmd = analog_get_average(JOYSTICK2_X, 5);
			srv_cmd = .75 * srv_cmd + .25 * old_srv_cmd;
			old_srv_cmd = srv_cmd;
			srv_cmd = js_srv_scaling(srv_cmd);
    10aa:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <srv_cmd+0x1>
    10ae:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <srv_cmd>
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <main+0x60e>
			if ((srv_cmd < 5) && (srv_cmd > -5))
				srv_cmd = 0;
			else if (srv_cmd > 45)
				srv_cmd = 45;
			else if (srv_cmd < -45)
				srv_cmd = -45;
    10b4:	83 ed       	ldi	r24, 0xD3	; 211
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <srv_cmd+0x1>
    10bc:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <srv_cmd>
			buffer[2] = srv_cmd;
    10c0:	f5 01       	movw	r30, r10
    10c2:	80 81       	ld	r24, Z
    10c4:	f8 01       	movw	r30, r16
    10c6:	82 83       	std	Z+2, r24	; 0x02

			mirf_send(buffer, mirf_PAYLOAD);
    10c8:	63 e0       	ldi	r22, 0x03	; 3
    10ca:	c8 01       	movw	r24, r16
    10cc:	0e 94 27 0a 	call	0x144e	; 0x144e <mirf_send>
    10d0:	f5 e3       	ldi	r31, 0x35	; 53
    10d2:	fa 95       	dec	r31
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <main+0x620>
    10d6:	00 00       	nop

}

void reset_TMR1()
{
	TCNT1 = 0;
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	18 82       	st	Y, r1
    10dc:	12 c0       	rjmp	.+36     	; 0x1102 <main+0x650>
			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
			{
				if (TCNT1 > 3000) // timeout of one second
    10de:	88 81       	ld	r24, Y
    10e0:	99 81       	ldd	r25, Y+1	; 0x01
    10e2:	89 3b       	cpi	r24, 0xB9	; 185
    10e4:	9b 40       	sbci	r25, 0x0B	; 11
    10e6:	68 f0       	brcs	.+26     	; 0x1102 <main+0x650>
				{
					comm_lost = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <comm_lost>
					comm_lost_count++;
    10ee:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <comm_lost_count>
					TOGGLE_LED3;
    10f8:	f7 01       	movw	r30, r14
    10fa:	80 81       	ld	r24, Z
    10fc:	89 25       	eor	r24, r9
    10fe:	80 83       	st	Z, r24
					break;
    1100:	04 c0       	rjmp	.+8      	; 0x110a <main+0x658>
			buffer[2] = srv_cmd;

			mirf_send(buffer, mirf_PAYLOAD);
			_delay_us(10);
			reset_TMR1();
			while (!mirf_data_sent())
    1102:	0e 94 82 09 	call	0x1304	; 0x1304 <mirf_data_sent>
    1106:	88 23       	and	r24, r24
    1108:	51 f3       	breq	.-44     	; 0x10de <main+0x62c>
					comm_lost_count++;
					TOGGLE_LED3;
					break;
				}
			}
			if (!comm_lost)
    110a:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <comm_lost>
    110e:	81 11       	cpse	r24, r1
    1110:	06 c0       	rjmp	.+12     	; 0x111e <main+0x66c>
			{
				BOAT_ON = 1; // one time flag
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <BOAT_ON>
				BOAT_OFF = 0;
    1118:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <BOAT_OFF>
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <main+0x676>
			}
			else
			{
				comm_lost = 0;	
    111e:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <comm_lost>
				BOAT_OFF = 1;			
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <BOAT_OFF>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1128:	8f e3       	ldi	r24, 0x3F	; 63
    112a:	9c e9       	ldi	r25, 0x9C	; 156
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <main+0x67a>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <main+0x680>
    1132:	00 00       	nop
    1134:	46 cd       	rjmp	.-1396   	; 0xbc2 <main+0x110>
				comm_lost = 0;
				BOAT_OFF = 1;
			}
		}
		
		if ( (loop_delay_counter == 50) && (toggle_gps) )
    1136:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <loop_delay_counter>
    113a:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <loop_delay_counter+0x1>
    113e:	c2 97       	sbiw	r24, 0x32	; 50
    1140:	49 f4       	brne	.+18     	; 0x1154 <main+0x6a2>
    1142:	39 ce       	rjmp	.-910    	; 0xdb6 <main+0x304>
    1144:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <loop_delay_counter>
    1148:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <loop_delay_counter+0x1>
    114c:	c2 97       	sbiw	r24, 0x32	; 50
    114e:	09 f0       	breq	.+2      	; 0x1152 <main+0x6a0>
    1150:	9e ce       	rjmp	.-708    	; 0xe8e <main+0x3dc>
    1152:	10 cf       	rjmp	.-480    	; 0xf74 <main+0x4c2>
			{
				comm_lost = 0;
			}
		}

		if ( (loop_delay_counter > 100) && (toggle_gps) )
    1154:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <loop_delay_counter>
    1158:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <loop_delay_counter+0x1>
    115c:	85 36       	cpi	r24, 0x65	; 101
    115e:	91 05       	cpc	r25, r1
    1160:	08 f0       	brcs	.+2      	; 0x1164 <main+0x6b2>
    1162:	a2 ce       	rjmp	.-700    	; 0xea8 <main+0x3f6>
    1164:	07 cf       	rjmp	.-498    	; 0xf74 <main+0x4c2>

00001166 <__vector_32>:
	OCR3A = 31248; 
	TIMSK3 |= (1<<OCIE3A);
}

ISR(TIMER3_COMPA_vect)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
	if (BOAT_ON)
    1188:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <BOAT_ON>
    118c:	88 23       	and	r24, r24
    118e:	c9 f1       	breq	.+114    	; 0x1202 <__vector_32+0x9c>
	{
		lcd_set_cursor(1,14);
    1190:	6e e0       	ldi	r22, 0x0E	; 14
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
		if( comm_lost_count <= 0)
    1198:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <comm_lost_count>
    119c:	81 11       	cpse	r24, r1
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <__vector_32+0x44>
		lcd_print("***");
    11a0:	8f e9       	ldi	r24, 0x9F	; 159
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
    11a8:	2a c0       	rjmp	.+84     	; 0x11fe <__vector_32+0x98>
		else if ( (comm_lost_count>0) && (comm_lost_count<3) )
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	98 0f       	add	r25, r24
    11ae:	92 30       	cpi	r25, 0x02	; 2
    11b0:	28 f4       	brcc	.+10     	; 0x11bc <__vector_32+0x56>
		lcd_print("** ");
    11b2:	83 ea       	ldi	r24, 0xA3	; 163
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
    11ba:	21 c0       	rjmp	.+66     	; 0x11fe <__vector_32+0x98>
		else if ( (comm_lost_count>=3) && (comm_lost_count<6) )
    11bc:	9d ef       	ldi	r25, 0xFD	; 253
    11be:	98 0f       	add	r25, r24
    11c0:	93 30       	cpi	r25, 0x03	; 3
    11c2:	28 f4       	brcc	.+10     	; 0x11ce <__vector_32+0x68>
		lcd_print("*  ");
    11c4:	87 ea       	ldi	r24, 0xA7	; 167
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
    11cc:	18 c0       	rjmp	.+48     	; 0x11fe <__vector_32+0x98>
		else if ( (comm_lost_count>=6) && (comm_lost_count<10))
    11ce:	86 50       	subi	r24, 0x06	; 6
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	28 f4       	brcc	.+10     	; 0x11de <__vector_32+0x78>
		lcd_print("OFF");
    11d4:	8b ea       	ldi	r24, 0xAB	; 171
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <__vector_32+0x98>
		else 
		{
			lcd_set_cursor(1,1);
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
			lcd_print("CONNECTION LOST,");
    11e6:	8f ea       	ldi	r24, 0xAF	; 175
    11e8:	92 e0       	ldi	r25, 0x02	; 2
    11ea:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
			lcd_set_cursor(2,1);
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	0e 94 86 03 	call	0x70c	; 0x70c <lcd_set_cursor>
			lcd_print("RESET DRIVER");             
    11f6:	80 ec       	ldi	r24, 0xC0	; 192
    11f8:	92 e0       	ldi	r25, 0x02	; 2
    11fa:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_print>
		}
		comm_lost_count = 0;
    11fe:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <comm_lost_count>
	}
}
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	bf 91       	pop	r27
    1208:	af 91       	pop	r26
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	7f 91       	pop	r23
    1210:	6f 91       	pop	r22
    1212:	5f 91       	pop	r21
    1214:	4f 91       	pop	r20
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <__vector_2>:

ISR(INT1_vect)
{
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
	if (digital_read(PORT_L, ENC_2_B))
    1246:	67 e0       	ldi	r22, 0x07	; 7
    1248:	8a e0       	ldi	r24, 0x0A	; 10
    124a:	0e 94 88 02 	call	0x510	; 0x510 <digital_read>
    124e:	88 23       	and	r24, r24
    1250:	31 f0       	breq	.+12     	; 0x125e <__vector_2+0x3a>
		encoder_count++;
    1252:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <__data_end>
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__data_end>
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <__vector_2+0x44>
	else 
		encoder_count--;
    125e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <__data_end>
    1262:	81 50       	subi	r24, 0x01	; 1
    1264:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__data_end>
	if (encoder_count > 1)
    1268:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <__data_end>
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	1c f0       	brlt	.+6      	; 0x1276 <__vector_2+0x52>
		encoder_count = 0;
    1270:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <__data_end>
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <__vector_2+0x5c>
	if (encoder_count < 0)
    1276:	88 23       	and	r24, r24
    1278:	1c f4       	brge	.+6      	; 0x1280 <__vector_2+0x5c>
		encoder_count = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__data_end>
}
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <__vector_6>:

ISR(INT5_vect)
{
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
	one_time_flag = 0;
    12b0:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <one_time_flag>
	toggle_gps ^= 1;
    12b4:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <toggle_gps>
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	89 27       	eor	r24, r25
    12bc:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <toggle_gps>
}
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <mirf_init>:
{
	mirf_CSN_lo;
	spi_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi_exchange_bytes(value, value, len);
	mirf_CSN_hi;
}
    12ce:	54 9a       	sbi	0x0a, 4	; 10
    12d0:	20 9a       	sbi	0x04, 0	; 4
    12d2:	5c 98       	cbi	0x0b, 4	; 11
    12d4:	28 9a       	sbi	0x05, 0	; 5
    12d6:	ea 98       	cbi	0x1d, 2	; 29
    12d8:	e9 e6       	ldi	r30, 0x69	; 105
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	80 62       	ori	r24, 0x20	; 32
    12e0:	80 83       	st	Z, r24
    12e2:	ea 9a       	sbi	0x1d, 2	; 29
    12e4:	0e 94 af 0a 	call	0x155e	; 0x155e <spi_master_initialize>
    12e8:	08 95       	ret

000012ea <mirf_data_ready>:
    12ea:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <PTX>
    12ee:	81 11       	cpse	r24, r1
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <mirf_data_ready+0x16>
    12f2:	28 98       	cbi	0x05, 0	; 5
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <spi_exchange_char>
    12fa:	28 9a       	sbi	0x05, 0	; 5
    12fc:	80 74       	andi	r24, 0x40	; 64
    12fe:	08 95       	ret
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret

00001304 <mirf_data_sent>:
    1304:	28 98       	cbi	0x05, 0	; 5
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	0e 94 ba 0a 	call	0x1574	; 0x1574 <spi_exchange_char>
    130c:	28 9a       	sbi	0x05, 0	; 5
    130e:	80 72       	andi	r24, 0x20	; 32
    1310:	08 95       	ret

00001312 <mirf_config_register>:
    1312:	cf 93       	push	r28
    1314:	c6 2f       	mov	r28, r22
    1316:	28 98       	cbi	0x05, 0	; 5
    1318:	8f 71       	andi	r24, 0x1F	; 31
    131a:	80 62       	ori	r24, 0x20	; 32
    131c:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
    1320:	8c 2f       	mov	r24, r28
    1322:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
    1326:	28 9a       	sbi	0x05, 0	; 5
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <set_RX_MODE>:
    132c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <PTX>
    1330:	60 e7       	ldi	r22, 0x70	; 112
    1332:	87 e0       	ldi	r24, 0x07	; 7
    1334:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    1338:	28 98       	cbi	0x05, 0	; 5
    133a:	81 ee       	ldi	r24, 0xE1	; 225
    133c:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
    1340:	28 9a       	sbi	0x05, 0	; 5
    1342:	6b e5       	ldi	r22, 0x5B	; 91
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    134a:	5c 9a       	sbi	0x0b, 4	; 11
    134c:	08 95       	ret

0000134e <mirf_config>:
    134e:	6c e6       	ldi	r22, 0x6C	; 108
    1350:	85 e0       	ldi	r24, 0x05	; 5
    1352:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    1356:	6f ef       	ldi	r22, 0xFF	; 255
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	81 e1       	ldi	r24, 0x11	; 17
    1362:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    1366:	63 e0       	ldi	r22, 0x03	; 3
    1368:	82 e1       	ldi	r24, 0x12	; 18
    136a:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	83 e1       	ldi	r24, 0x13	; 19
    1372:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	84 e1       	ldi	r24, 0x14	; 20
    137a:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	85 e1       	ldi	r24, 0x15	; 21
    1382:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	86 e1       	ldi	r24, 0x16	; 22
    138a:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    138e:	66 e2       	ldi	r22, 0x26	; 38
    1390:	86 e0       	ldi	r24, 0x06	; 6
    1392:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    1396:	63 e0       	ldi	r22, 0x03	; 3
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    139e:	63 e0       	ldi	r22, 0x03	; 3
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    13a6:	6f e4       	ldi	r22, 0x4F	; 79
    13a8:	84 e0       	ldi	r24, 0x04	; 4
    13aa:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    13ae:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <PTX>
    13b2:	60 e7       	ldi	r22, 0x70	; 112
    13b4:	87 e0       	ldi	r24, 0x07	; 7
    13b6:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    13ba:	28 98       	cbi	0x05, 0	; 5
    13bc:	81 ee       	ldi	r24, 0xE1	; 225
    13be:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
    13c2:	28 9a       	sbi	0x05, 0	; 5
    13c4:	6b e5       	ldi	r22, 0x5B	; 91
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    13cc:	5c 9a       	sbi	0x0b, 4	; 11
    13ce:	08 95       	ret

000013d0 <mirf_get_data>:
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
    13d6:	28 98       	cbi	0x05, 0	; 5
    13d8:	81 e6       	ldi	r24, 0x61	; 97
    13da:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
    13de:	43 e0       	ldi	r20, 0x03	; 3
    13e0:	be 01       	movw	r22, r28
    13e2:	ce 01       	movw	r24, r28
    13e4:	0e 94 cf 0a 	call	0x159e	; 0x159e <spi_exchange_bytes>
    13e8:	28 9a       	sbi	0x05, 0	; 5
    13ea:	60 e4       	ldi	r22, 0x40	; 64
    13ec:	87 e0       	ldi	r24, 0x07	; 7
    13ee:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	eb 01       	movw	r28, r22
    1400:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
    1402:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_REGISTER | (REGISTER_MASK & reg));
    1404:	8f 71       	andi	r24, 0x1F	; 31
    1406:	80 62       	ori	r24, 0x20	; 32
    1408:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
	spi_send_bytes(value, len);
    140c:	61 2f       	mov	r22, r17
    140e:	ce 01       	movw	r24, r28
    1410:	0e 94 c0 0a 	call	0x1580	; 0x1580 <spi_send_bytes>
	mirf_CSN_hi;
    1414:	28 9a       	sbi	0x05, 0	; 5
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	08 95       	ret

0000141e <mirf_set_RADDR>:
}

void mirf_set_RADDR(int8_t *adr)
// Sets the receiving address
{
	mirf_CE_lo;
    141e:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
    1420:	45 e0       	ldi	r20, 0x05	; 5
    1422:	bc 01       	movw	r22, r24
    1424:	8b e0       	ldi	r24, 0x0B	; 11
    1426:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <mirf_write_register>
	mirf_CE_hi;
    142a:	5c 9a       	sbi	0x0b, 4	; 11
    142c:	08 95       	ret

0000142e <mirf_set_TADDR>:
}

void mirf_set_TADDR(int8_t *adr)
// Sets the transmitting address
{
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
	mirf_write_register(RX_ADDR_P0, adr, 5);
    1434:	45 e0       	ldi	r20, 0x05	; 5
    1436:	bc 01       	movw	r22, r24
    1438:	8a e0       	ldi	r24, 0x0A	; 10
    143a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
    143e:	45 e0       	ldi	r20, 0x05	; 5
    1440:	be 01       	movw	r22, r28
    1442:	80 e1       	ldi	r24, 0x10	; 16
    1444:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <mirf_write_register>
}
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	ec 01       	movw	r28, r24
    1456:	16 2f       	mov	r17, r22
	//while (PTX)
	//{

	//} // Wait until last packet is send

	mirf_CE_lo;
    1458:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1; // Set to transmitter mode
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
    1460:	6a e5       	ldi	r22, 0x5A	; 90
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>

	mirf_CSN_lo;             // Pull down chip select
    1468:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(FLUSH_TX); // Write cmd to flush tx fifo
    146a:	81 ee       	ldi	r24, 0xE1	; 225
    146c:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
	mirf_CSN_hi;             // Pull up chip select
    1470:	28 9a       	sbi	0x05, 0	; 5
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    1472:	60 e7       	ldi	r22, 0x70	; 112
    1474:	87 e0       	ldi	r24, 0x07	; 7
    1476:	0e 94 89 09 	call	0x1312	; 0x1312 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
    147a:	28 98       	cbi	0x05, 0	; 5
	spi_send_char(W_TX_PAYLOAD); // Write cmd to write payload
    147c:	80 ea       	ldi	r24, 0xA0	; 160
    147e:	0e 94 b5 0a 	call	0x156a	; 0x156a <spi_send_char>
	spi_send_bytes(value, len);  // Write payload
    1482:	61 2f       	mov	r22, r17
    1484:	ce 01       	movw	r24, r28
    1486:	0e 94 c0 0a 	call	0x1580	; 0x1580 <spi_send_bytes>
	mirf_CSN_hi;                 // Pull up chip select
    148a:	28 9a       	sbi	0x05, 0	; 5

	mirf_CE_hi; // Start transmission
    148c:	5c 9a       	sbi	0x0b, 4	; 11
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	08 95       	ret

00001496 <__vector_4>:

ISR(INT3_vect) // Interrupt handler
{
    1496:	1f 92       	push	r1
    1498:	0f 92       	push	r0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	0f 92       	push	r0
    149e:	11 24       	eor	r1, r1
    14a0:	8f 93       	push	r24
	//char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
    14a2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <PTX>
// 		}
		
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
    14a6:	8f 91       	pop	r24
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <println_int_0>:
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	c0 54       	subi	r28, 0x40	; 64
    14c4:	d1 09       	sbc	r29, r1
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	8c 01       	movw	r16, r24
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	31 f4       	brne	.+12     	; 0x14e2 <println_int_0+0x30>
    14d6:	80 e3       	ldi	r24, 0x30	; 48
    14d8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <usart0_send_char>
    14dc:	e1 2c       	mov	r14, r1
    14de:	f1 2c       	mov	r15, r1
    14e0:	16 c0       	rjmp	.+44     	; 0x150e <println_int_0+0x5c>
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	ea e0       	ldi	r30, 0x0A	; 10
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <println_int_0+0x3c>
    14ec:	97 01       	movw	r18, r14
    14ee:	bf 01       	movw	r22, r30
    14f0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__divmodhi4>
    14f4:	cb 01       	movw	r24, r22
    14f6:	79 01       	movw	r14, r18
    14f8:	4f ef       	ldi	r20, 0xFF	; 255
    14fa:	e4 1a       	sub	r14, r20
    14fc:	f4 0a       	sbc	r15, r20
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	a9 f7       	brne	.-22     	; 0x14ec <println_int_0+0x3a>
    1502:	11 23       	and	r17, r17
    1504:	24 f4       	brge	.+8      	; 0x150e <println_int_0+0x5c>
    1506:	79 01       	movw	r14, r18
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	e8 0e       	add	r14, r24
    150c:	f1 1c       	adc	r15, r1
    150e:	4a e0       	ldi	r20, 0x0A	; 10
    1510:	be 01       	movw	r22, r28
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	c8 01       	movw	r24, r16
    1518:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__itoa_ncheck>
    151c:	1e 14       	cp	r1, r14
    151e:	1f 04       	cpc	r1, r15
    1520:	6c f4       	brge	.+26     	; 0x153c <println_int_0+0x8a>
    1522:	8e 01       	movw	r16, r28
    1524:	0f 5f       	subi	r16, 0xFF	; 255
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	e0 0e       	add	r14, r16
    152a:	f1 1e       	adc	r15, r17
    152c:	f8 01       	movw	r30, r16
    152e:	81 91       	ld	r24, Z+
    1530:	8f 01       	movw	r16, r30
    1532:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <usart0_send_char>
    1536:	0e 15       	cp	r16, r14
    1538:	1f 05       	cpc	r17, r15
    153a:	c1 f7       	brne	.-16     	; 0x152c <println_int_0+0x7a>
    153c:	8a e0       	ldi	r24, 0x0A	; 10
    153e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <usart0_send_char>
    1542:	c0 5c       	subi	r28, 0xC0	; 192
    1544:	df 4f       	sbci	r29, 0xFF	; 255
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	08 95       	ret

0000155e <spi_master_initialize>:
    155e:	84 b1       	in	r24, 0x04	; 4
    1560:	87 60       	ori	r24, 0x07	; 7
    1562:	84 b9       	out	0x04, r24	; 4
    1564:	81 e5       	ldi	r24, 0x51	; 81
    1566:	8c bd       	out	0x2c, r24	; 44
    1568:	08 95       	ret

0000156a <spi_send_char>:
    156a:	8e bd       	out	0x2e, r24	; 46
    156c:	0d b4       	in	r0, 0x2d	; 45
    156e:	07 fe       	sbrs	r0, 7
    1570:	fd cf       	rjmp	.-6      	; 0x156c <spi_send_char+0x2>
    1572:	08 95       	ret

00001574 <spi_exchange_char>:
    1574:	8e bd       	out	0x2e, r24	; 46
    1576:	0d b4       	in	r0, 0x2d	; 45
    1578:	07 fe       	sbrs	r0, 7
    157a:	fd cf       	rjmp	.-6      	; 0x1576 <spi_exchange_char+0x2>
    157c:	8e b5       	in	r24, 0x2e	; 46
    157e:	08 95       	ret

00001580 <spi_send_bytes>:
    1580:	66 23       	and	r22, r22
    1582:	61 f0       	breq	.+24     	; 0x159c <spi_send_bytes+0x1c>
    1584:	fc 01       	movw	r30, r24
    1586:	9c 01       	movw	r18, r24
    1588:	26 0f       	add	r18, r22
    158a:	31 1d       	adc	r19, r1
    158c:	91 91       	ld	r25, Z+
    158e:	9e bd       	out	0x2e, r25	; 46
    1590:	0d b4       	in	r0, 0x2d	; 45
    1592:	07 fe       	sbrs	r0, 7
    1594:	fd cf       	rjmp	.-6      	; 0x1590 <spi_send_bytes+0x10>
    1596:	e2 17       	cp	r30, r18
    1598:	f3 07       	cpc	r31, r19
    159a:	c1 f7       	brne	.-16     	; 0x158c <spi_send_bytes+0xc>
    159c:	08 95       	ret

0000159e <spi_exchange_bytes>:
    159e:	44 23       	and	r20, r20
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <spi_exchange_bytes+0x24>
    15a2:	fc 01       	movw	r30, r24
    15a4:	a6 2f       	mov	r26, r22
    15a6:	b7 2f       	mov	r27, r23
    15a8:	9c 01       	movw	r18, r24
    15aa:	24 0f       	add	r18, r20
    15ac:	31 1d       	adc	r19, r1
    15ae:	91 91       	ld	r25, Z+
    15b0:	9e bd       	out	0x2e, r25	; 46
    15b2:	0d b4       	in	r0, 0x2d	; 45
    15b4:	07 fe       	sbrs	r0, 7
    15b6:	fd cf       	rjmp	.-6      	; 0x15b2 <spi_exchange_bytes+0x14>
    15b8:	9e b5       	in	r25, 0x2e	; 46
    15ba:	9d 93       	st	X+, r25
    15bc:	e2 17       	cp	r30, r18
    15be:	f3 07       	cpc	r31, r19
    15c0:	b1 f7       	brne	.-20     	; 0x15ae <spi_exchange_bytes+0x10>
    15c2:	08 95       	ret

000015c4 <usart0_send_char>:
    15c4:	e0 ec       	ldi	r30, 0xC0	; 192
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	90 81       	ld	r25, Z
    15ca:	95 ff       	sbrs	r25, 5
    15cc:	fd cf       	rjmp	.-6      	; 0x15c8 <usart0_send_char+0x4>
    15ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    15d2:	08 95       	ret

000015d4 <setup_usart0>:
    15d4:	98 e1       	ldi	r25, 0x18	; 24
    15d6:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    15da:	96 e0       	ldi	r25, 0x06	; 6
    15dc:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    15e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    15e4:	08 95       	ret

000015e6 <__subsf3>:
    15e6:	50 58       	subi	r21, 0x80	; 128

000015e8 <__addsf3>:
    15e8:	bb 27       	eor	r27, r27
    15ea:	aa 27       	eor	r26, r26
    15ec:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__addsf3x>
    15f0:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_round>
    15f4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_pscA>
    15f8:	38 f0       	brcs	.+14     	; 0x1608 <__addsf3+0x20>
    15fa:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_pscB>
    15fe:	20 f0       	brcs	.+8      	; 0x1608 <__addsf3+0x20>
    1600:	39 f4       	brne	.+14     	; 0x1610 <__addsf3+0x28>
    1602:	9f 3f       	cpi	r25, 0xFF	; 255
    1604:	19 f4       	brne	.+6      	; 0x160c <__addsf3+0x24>
    1606:	26 f4       	brtc	.+8      	; 0x1610 <__addsf3+0x28>
    1608:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_nan>
    160c:	0e f4       	brtc	.+2      	; 0x1610 <__addsf3+0x28>
    160e:	e0 95       	com	r30
    1610:	e7 fb       	bst	r30, 7
    1612:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_inf>

00001616 <__addsf3x>:
    1616:	e9 2f       	mov	r30, r25
    1618:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_split3>
    161c:	58 f3       	brcs	.-42     	; 0x15f4 <__addsf3+0xc>
    161e:	ba 17       	cp	r27, r26
    1620:	62 07       	cpc	r22, r18
    1622:	73 07       	cpc	r23, r19
    1624:	84 07       	cpc	r24, r20
    1626:	95 07       	cpc	r25, r21
    1628:	20 f0       	brcs	.+8      	; 0x1632 <__addsf3x+0x1c>
    162a:	79 f4       	brne	.+30     	; 0x164a <__addsf3x+0x34>
    162c:	a6 f5       	brtc	.+104    	; 0x1696 <__addsf3x+0x80>
    162e:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__fp_zero>
    1632:	0e f4       	brtc	.+2      	; 0x1636 <__addsf3x+0x20>
    1634:	e0 95       	com	r30
    1636:	0b 2e       	mov	r0, r27
    1638:	ba 2f       	mov	r27, r26
    163a:	a0 2d       	mov	r26, r0
    163c:	0b 01       	movw	r0, r22
    163e:	b9 01       	movw	r22, r18
    1640:	90 01       	movw	r18, r0
    1642:	0c 01       	movw	r0, r24
    1644:	ca 01       	movw	r24, r20
    1646:	a0 01       	movw	r20, r0
    1648:	11 24       	eor	r1, r1
    164a:	ff 27       	eor	r31, r31
    164c:	59 1b       	sub	r21, r25
    164e:	99 f0       	breq	.+38     	; 0x1676 <__addsf3x+0x60>
    1650:	59 3f       	cpi	r21, 0xF9	; 249
    1652:	50 f4       	brcc	.+20     	; 0x1668 <__addsf3x+0x52>
    1654:	50 3e       	cpi	r21, 0xE0	; 224
    1656:	68 f1       	brcs	.+90     	; 0x16b2 <__addsf3x+0x9c>
    1658:	1a 16       	cp	r1, r26
    165a:	f0 40       	sbci	r31, 0x00	; 0
    165c:	a2 2f       	mov	r26, r18
    165e:	23 2f       	mov	r18, r19
    1660:	34 2f       	mov	r19, r20
    1662:	44 27       	eor	r20, r20
    1664:	58 5f       	subi	r21, 0xF8	; 248
    1666:	f3 cf       	rjmp	.-26     	; 0x164e <__addsf3x+0x38>
    1668:	46 95       	lsr	r20
    166a:	37 95       	ror	r19
    166c:	27 95       	ror	r18
    166e:	a7 95       	ror	r26
    1670:	f0 40       	sbci	r31, 0x00	; 0
    1672:	53 95       	inc	r21
    1674:	c9 f7       	brne	.-14     	; 0x1668 <__addsf3x+0x52>
    1676:	7e f4       	brtc	.+30     	; 0x1696 <__addsf3x+0x80>
    1678:	1f 16       	cp	r1, r31
    167a:	ba 0b       	sbc	r27, r26
    167c:	62 0b       	sbc	r22, r18
    167e:	73 0b       	sbc	r23, r19
    1680:	84 0b       	sbc	r24, r20
    1682:	ba f0       	brmi	.+46     	; 0x16b2 <__addsf3x+0x9c>
    1684:	91 50       	subi	r25, 0x01	; 1
    1686:	a1 f0       	breq	.+40     	; 0x16b0 <__addsf3x+0x9a>
    1688:	ff 0f       	add	r31, r31
    168a:	bb 1f       	adc	r27, r27
    168c:	66 1f       	adc	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	88 1f       	adc	r24, r24
    1692:	c2 f7       	brpl	.-16     	; 0x1684 <__addsf3x+0x6e>
    1694:	0e c0       	rjmp	.+28     	; 0x16b2 <__addsf3x+0x9c>
    1696:	ba 0f       	add	r27, r26
    1698:	62 1f       	adc	r22, r18
    169a:	73 1f       	adc	r23, r19
    169c:	84 1f       	adc	r24, r20
    169e:	48 f4       	brcc	.+18     	; 0x16b2 <__addsf3x+0x9c>
    16a0:	87 95       	ror	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b7 95       	ror	r27
    16a8:	f7 95       	ror	r31
    16aa:	9e 3f       	cpi	r25, 0xFE	; 254
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <__addsf3x+0x9a>
    16ae:	b0 cf       	rjmp	.-160    	; 0x1610 <__addsf3+0x28>
    16b0:	93 95       	inc	r25
    16b2:	88 0f       	add	r24, r24
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <__addsf3x+0xa2>
    16b6:	99 27       	eor	r25, r25
    16b8:	ee 0f       	add	r30, r30
    16ba:	97 95       	ror	r25
    16bc:	87 95       	ror	r24
    16be:	08 95       	ret

000016c0 <__cmpsf2>:
    16c0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fp_cmp>
    16c4:	08 f4       	brcc	.+2      	; 0x16c8 <__cmpsf2+0x8>
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	08 95       	ret

000016ca <__divsf3>:
    16ca:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__divsf3x>
    16ce:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_round>
    16d2:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_pscB>
    16d6:	58 f0       	brcs	.+22     	; 0x16ee <__divsf3+0x24>
    16d8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_pscA>
    16dc:	40 f0       	brcs	.+16     	; 0x16ee <__divsf3+0x24>
    16de:	29 f4       	brne	.+10     	; 0x16ea <__divsf3+0x20>
    16e0:	5f 3f       	cpi	r21, 0xFF	; 255
    16e2:	29 f0       	breq	.+10     	; 0x16ee <__divsf3+0x24>
    16e4:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_inf>
    16e8:	51 11       	cpse	r21, r1
    16ea:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_szero>
    16ee:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_nan>

000016f2 <__divsf3x>:
    16f2:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_split3>
    16f6:	68 f3       	brcs	.-38     	; 0x16d2 <__divsf3+0x8>

000016f8 <__divsf3_pse>:
    16f8:	99 23       	and	r25, r25
    16fa:	b1 f3       	breq	.-20     	; 0x16e8 <__divsf3+0x1e>
    16fc:	55 23       	and	r21, r21
    16fe:	91 f3       	breq	.-28     	; 0x16e4 <__divsf3+0x1a>
    1700:	95 1b       	sub	r25, r21
    1702:	55 0b       	sbc	r21, r21
    1704:	bb 27       	eor	r27, r27
    1706:	aa 27       	eor	r26, r26
    1708:	62 17       	cp	r22, r18
    170a:	73 07       	cpc	r23, r19
    170c:	84 07       	cpc	r24, r20
    170e:	38 f0       	brcs	.+14     	; 0x171e <__divsf3_pse+0x26>
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	44 1f       	adc	r20, r20
    171a:	aa 1f       	adc	r26, r26
    171c:	a9 f3       	breq	.-22     	; 0x1708 <__divsf3_pse+0x10>
    171e:	35 d0       	rcall	.+106    	; 0x178a <__divsf3_pse+0x92>
    1720:	0e 2e       	mov	r0, r30
    1722:	3a f0       	brmi	.+14     	; 0x1732 <__divsf3_pse+0x3a>
    1724:	e0 e8       	ldi	r30, 0x80	; 128
    1726:	32 d0       	rcall	.+100    	; 0x178c <__divsf3_pse+0x94>
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	50 40       	sbci	r21, 0x00	; 0
    172c:	e6 95       	lsr	r30
    172e:	00 1c       	adc	r0, r0
    1730:	ca f7       	brpl	.-14     	; 0x1724 <__divsf3_pse+0x2c>
    1732:	2b d0       	rcall	.+86     	; 0x178a <__divsf3_pse+0x92>
    1734:	fe 2f       	mov	r31, r30
    1736:	29 d0       	rcall	.+82     	; 0x178a <__divsf3_pse+0x92>
    1738:	66 0f       	add	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	88 1f       	adc	r24, r24
    173e:	bb 1f       	adc	r27, r27
    1740:	26 17       	cp	r18, r22
    1742:	37 07       	cpc	r19, r23
    1744:	48 07       	cpc	r20, r24
    1746:	ab 07       	cpc	r26, r27
    1748:	b0 e8       	ldi	r27, 0x80	; 128
    174a:	09 f0       	breq	.+2      	; 0x174e <__divsf3_pse+0x56>
    174c:	bb 0b       	sbc	r27, r27
    174e:	80 2d       	mov	r24, r0
    1750:	bf 01       	movw	r22, r30
    1752:	ff 27       	eor	r31, r31
    1754:	93 58       	subi	r25, 0x83	; 131
    1756:	5f 4f       	sbci	r21, 0xFF	; 255
    1758:	3a f0       	brmi	.+14     	; 0x1768 <__divsf3_pse+0x70>
    175a:	9e 3f       	cpi	r25, 0xFE	; 254
    175c:	51 05       	cpc	r21, r1
    175e:	78 f0       	brcs	.+30     	; 0x177e <__divsf3_pse+0x86>
    1760:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_inf>
    1764:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_szero>
    1768:	5f 3f       	cpi	r21, 0xFF	; 255
    176a:	e4 f3       	brlt	.-8      	; 0x1764 <__divsf3_pse+0x6c>
    176c:	98 3e       	cpi	r25, 0xE8	; 232
    176e:	d4 f3       	brlt	.-12     	; 0x1764 <__divsf3_pse+0x6c>
    1770:	86 95       	lsr	r24
    1772:	77 95       	ror	r23
    1774:	67 95       	ror	r22
    1776:	b7 95       	ror	r27
    1778:	f7 95       	ror	r31
    177a:	9f 5f       	subi	r25, 0xFF	; 255
    177c:	c9 f7       	brne	.-14     	; 0x1770 <__divsf3_pse+0x78>
    177e:	88 0f       	add	r24, r24
    1780:	91 1d       	adc	r25, r1
    1782:	96 95       	lsr	r25
    1784:	87 95       	ror	r24
    1786:	97 f9       	bld	r25, 7
    1788:	08 95       	ret
    178a:	e1 e0       	ldi	r30, 0x01	; 1
    178c:	66 0f       	add	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	bb 1f       	adc	r27, r27
    1794:	62 17       	cp	r22, r18
    1796:	73 07       	cpc	r23, r19
    1798:	84 07       	cpc	r24, r20
    179a:	ba 07       	cpc	r27, r26
    179c:	20 f0       	brcs	.+8      	; 0x17a6 <__divsf3_pse+0xae>
    179e:	62 1b       	sub	r22, r18
    17a0:	73 0b       	sbc	r23, r19
    17a2:	84 0b       	sbc	r24, r20
    17a4:	ba 0b       	sbc	r27, r26
    17a6:	ee 1f       	adc	r30, r30
    17a8:	88 f7       	brcc	.-30     	; 0x178c <__divsf3_pse+0x94>
    17aa:	e0 95       	com	r30
    17ac:	08 95       	ret

000017ae <__fixsfsi>:
    17ae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__fixunssfsi>
    17b2:	68 94       	set
    17b4:	b1 11       	cpse	r27, r1
    17b6:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_szero>
    17ba:	08 95       	ret

000017bc <__fixunssfsi>:
    17bc:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fp_splitA>
    17c0:	88 f0       	brcs	.+34     	; 0x17e4 <__fixunssfsi+0x28>
    17c2:	9f 57       	subi	r25, 0x7F	; 127
    17c4:	98 f0       	brcs	.+38     	; 0x17ec <__fixunssfsi+0x30>
    17c6:	b9 2f       	mov	r27, r25
    17c8:	99 27       	eor	r25, r25
    17ca:	b7 51       	subi	r27, 0x17	; 23
    17cc:	b0 f0       	brcs	.+44     	; 0x17fa <__fixunssfsi+0x3e>
    17ce:	e1 f0       	breq	.+56     	; 0x1808 <__fixunssfsi+0x4c>
    17d0:	66 0f       	add	r22, r22
    17d2:	77 1f       	adc	r23, r23
    17d4:	88 1f       	adc	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	1a f0       	brmi	.+6      	; 0x17e0 <__fixunssfsi+0x24>
    17da:	ba 95       	dec	r27
    17dc:	c9 f7       	brne	.-14     	; 0x17d0 <__fixunssfsi+0x14>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <__fixunssfsi+0x4c>
    17e0:	b1 30       	cpi	r27, 0x01	; 1
    17e2:	91 f0       	breq	.+36     	; 0x1808 <__fixunssfsi+0x4c>
    17e4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fp_zero>
    17e8:	b1 e0       	ldi	r27, 0x01	; 1
    17ea:	08 95       	ret
    17ec:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__fp_zero>
    17f0:	67 2f       	mov	r22, r23
    17f2:	78 2f       	mov	r23, r24
    17f4:	88 27       	eor	r24, r24
    17f6:	b8 5f       	subi	r27, 0xF8	; 248
    17f8:	39 f0       	breq	.+14     	; 0x1808 <__fixunssfsi+0x4c>
    17fa:	b9 3f       	cpi	r27, 0xF9	; 249
    17fc:	cc f3       	brlt	.-14     	; 0x17f0 <__fixunssfsi+0x34>
    17fe:	86 95       	lsr	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b3 95       	inc	r27
    1806:	d9 f7       	brne	.-10     	; 0x17fe <__fixunssfsi+0x42>
    1808:	3e f4       	brtc	.+14     	; 0x1818 <__fixunssfsi+0x5c>
    180a:	90 95       	com	r25
    180c:	80 95       	com	r24
    180e:	70 95       	com	r23
    1810:	61 95       	neg	r22
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	08 95       	ret

0000181a <__floatunsisf>:
    181a:	e8 94       	clt
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <__floatsisf+0x12>

0000181e <__floatsisf>:
    181e:	97 fb       	bst	r25, 7
    1820:	3e f4       	brtc	.+14     	; 0x1830 <__floatsisf+0x12>
    1822:	90 95       	com	r25
    1824:	80 95       	com	r24
    1826:	70 95       	com	r23
    1828:	61 95       	neg	r22
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	99 23       	and	r25, r25
    1832:	a9 f0       	breq	.+42     	; 0x185e <__floatsisf+0x40>
    1834:	f9 2f       	mov	r31, r25
    1836:	96 e9       	ldi	r25, 0x96	; 150
    1838:	bb 27       	eor	r27, r27
    183a:	93 95       	inc	r25
    183c:	f6 95       	lsr	r31
    183e:	87 95       	ror	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	b7 95       	ror	r27
    1846:	f1 11       	cpse	r31, r1
    1848:	f8 cf       	rjmp	.-16     	; 0x183a <__floatsisf+0x1c>
    184a:	fa f4       	brpl	.+62     	; 0x188a <__floatsisf+0x6c>
    184c:	bb 0f       	add	r27, r27
    184e:	11 f4       	brne	.+4      	; 0x1854 <__floatsisf+0x36>
    1850:	60 ff       	sbrs	r22, 0
    1852:	1b c0       	rjmp	.+54     	; 0x188a <__floatsisf+0x6c>
    1854:	6f 5f       	subi	r22, 0xFF	; 255
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	16 c0       	rjmp	.+44     	; 0x188a <__floatsisf+0x6c>
    185e:	88 23       	and	r24, r24
    1860:	11 f0       	breq	.+4      	; 0x1866 <__floatsisf+0x48>
    1862:	96 e9       	ldi	r25, 0x96	; 150
    1864:	11 c0       	rjmp	.+34     	; 0x1888 <__floatsisf+0x6a>
    1866:	77 23       	and	r23, r23
    1868:	21 f0       	breq	.+8      	; 0x1872 <__floatsisf+0x54>
    186a:	9e e8       	ldi	r25, 0x8E	; 142
    186c:	87 2f       	mov	r24, r23
    186e:	76 2f       	mov	r23, r22
    1870:	05 c0       	rjmp	.+10     	; 0x187c <__floatsisf+0x5e>
    1872:	66 23       	and	r22, r22
    1874:	71 f0       	breq	.+28     	; 0x1892 <__floatsisf+0x74>
    1876:	96 e8       	ldi	r25, 0x86	; 134
    1878:	86 2f       	mov	r24, r22
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	2a f0       	brmi	.+10     	; 0x188a <__floatsisf+0x6c>
    1880:	9a 95       	dec	r25
    1882:	66 0f       	add	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	da f7       	brpl	.-10     	; 0x1880 <__floatsisf+0x62>
    188a:	88 0f       	add	r24, r24
    188c:	96 95       	lsr	r25
    188e:	87 95       	ror	r24
    1890:	97 f9       	bld	r25, 7
    1892:	08 95       	ret

00001894 <__fp_cmp>:
    1894:	99 0f       	add	r25, r25
    1896:	00 08       	sbc	r0, r0
    1898:	55 0f       	add	r21, r21
    189a:	aa 0b       	sbc	r26, r26
    189c:	e0 e8       	ldi	r30, 0x80	; 128
    189e:	fe ef       	ldi	r31, 0xFE	; 254
    18a0:	16 16       	cp	r1, r22
    18a2:	17 06       	cpc	r1, r23
    18a4:	e8 07       	cpc	r30, r24
    18a6:	f9 07       	cpc	r31, r25
    18a8:	c0 f0       	brcs	.+48     	; 0x18da <__fp_cmp+0x46>
    18aa:	12 16       	cp	r1, r18
    18ac:	13 06       	cpc	r1, r19
    18ae:	e4 07       	cpc	r30, r20
    18b0:	f5 07       	cpc	r31, r21
    18b2:	98 f0       	brcs	.+38     	; 0x18da <__fp_cmp+0x46>
    18b4:	62 1b       	sub	r22, r18
    18b6:	73 0b       	sbc	r23, r19
    18b8:	84 0b       	sbc	r24, r20
    18ba:	95 0b       	sbc	r25, r21
    18bc:	39 f4       	brne	.+14     	; 0x18cc <__fp_cmp+0x38>
    18be:	0a 26       	eor	r0, r26
    18c0:	61 f0       	breq	.+24     	; 0x18da <__fp_cmp+0x46>
    18c2:	23 2b       	or	r18, r19
    18c4:	24 2b       	or	r18, r20
    18c6:	25 2b       	or	r18, r21
    18c8:	21 f4       	brne	.+8      	; 0x18d2 <__fp_cmp+0x3e>
    18ca:	08 95       	ret
    18cc:	0a 26       	eor	r0, r26
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <__fp_cmp+0x3e>
    18d0:	a1 40       	sbci	r26, 0x01	; 1
    18d2:	a6 95       	lsr	r26
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	81 1d       	adc	r24, r1
    18d8:	81 1d       	adc	r24, r1
    18da:	08 95       	ret

000018dc <__fp_inf>:
    18dc:	97 f9       	bld	r25, 7
    18de:	9f 67       	ori	r25, 0x7F	; 127
    18e0:	80 e8       	ldi	r24, 0x80	; 128
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	08 95       	ret

000018e8 <__fp_nan>:
    18e8:	9f ef       	ldi	r25, 0xFF	; 255
    18ea:	80 ec       	ldi	r24, 0xC0	; 192
    18ec:	08 95       	ret

000018ee <__fp_pscA>:
    18ee:	00 24       	eor	r0, r0
    18f0:	0a 94       	dec	r0
    18f2:	16 16       	cp	r1, r22
    18f4:	17 06       	cpc	r1, r23
    18f6:	18 06       	cpc	r1, r24
    18f8:	09 06       	cpc	r0, r25
    18fa:	08 95       	ret

000018fc <__fp_pscB>:
    18fc:	00 24       	eor	r0, r0
    18fe:	0a 94       	dec	r0
    1900:	12 16       	cp	r1, r18
    1902:	13 06       	cpc	r1, r19
    1904:	14 06       	cpc	r1, r20
    1906:	05 06       	cpc	r0, r21
    1908:	08 95       	ret

0000190a <__fp_round>:
    190a:	09 2e       	mov	r0, r25
    190c:	03 94       	inc	r0
    190e:	00 0c       	add	r0, r0
    1910:	11 f4       	brne	.+4      	; 0x1916 <__fp_round+0xc>
    1912:	88 23       	and	r24, r24
    1914:	52 f0       	brmi	.+20     	; 0x192a <__fp_round+0x20>
    1916:	bb 0f       	add	r27, r27
    1918:	40 f4       	brcc	.+16     	; 0x192a <__fp_round+0x20>
    191a:	bf 2b       	or	r27, r31
    191c:	11 f4       	brne	.+4      	; 0x1922 <__fp_round+0x18>
    191e:	60 ff       	sbrs	r22, 0
    1920:	04 c0       	rjmp	.+8      	; 0x192a <__fp_round+0x20>
    1922:	6f 5f       	subi	r22, 0xFF	; 255
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	8f 4f       	sbci	r24, 0xFF	; 255
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	08 95       	ret

0000192c <__fp_split3>:
    192c:	57 fd       	sbrc	r21, 7
    192e:	90 58       	subi	r25, 0x80	; 128
    1930:	44 0f       	add	r20, r20
    1932:	55 1f       	adc	r21, r21
    1934:	59 f0       	breq	.+22     	; 0x194c <__fp_splitA+0x10>
    1936:	5f 3f       	cpi	r21, 0xFF	; 255
    1938:	71 f0       	breq	.+28     	; 0x1956 <__fp_splitA+0x1a>
    193a:	47 95       	ror	r20

0000193c <__fp_splitA>:
    193c:	88 0f       	add	r24, r24
    193e:	97 fb       	bst	r25, 7
    1940:	99 1f       	adc	r25, r25
    1942:	61 f0       	breq	.+24     	; 0x195c <__fp_splitA+0x20>
    1944:	9f 3f       	cpi	r25, 0xFF	; 255
    1946:	79 f0       	breq	.+30     	; 0x1966 <__fp_splitA+0x2a>
    1948:	87 95       	ror	r24
    194a:	08 95       	ret
    194c:	12 16       	cp	r1, r18
    194e:	13 06       	cpc	r1, r19
    1950:	14 06       	cpc	r1, r20
    1952:	55 1f       	adc	r21, r21
    1954:	f2 cf       	rjmp	.-28     	; 0x193a <__fp_split3+0xe>
    1956:	46 95       	lsr	r20
    1958:	f1 df       	rcall	.-30     	; 0x193c <__fp_splitA>
    195a:	08 c0       	rjmp	.+16     	; 0x196c <__fp_splitA+0x30>
    195c:	16 16       	cp	r1, r22
    195e:	17 06       	cpc	r1, r23
    1960:	18 06       	cpc	r1, r24
    1962:	99 1f       	adc	r25, r25
    1964:	f1 cf       	rjmp	.-30     	; 0x1948 <__fp_splitA+0xc>
    1966:	86 95       	lsr	r24
    1968:	71 05       	cpc	r23, r1
    196a:	61 05       	cpc	r22, r1
    196c:	08 94       	sec
    196e:	08 95       	ret

00001970 <__fp_zero>:
    1970:	e8 94       	clt

00001972 <__fp_szero>:
    1972:	bb 27       	eor	r27, r27
    1974:	66 27       	eor	r22, r22
    1976:	77 27       	eor	r23, r23
    1978:	cb 01       	movw	r24, r22
    197a:	97 f9       	bld	r25, 7
    197c:	08 95       	ret

0000197e <__gesf2>:
    197e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fp_cmp>
    1982:	08 f4       	brcc	.+2      	; 0x1986 <__gesf2+0x8>
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	08 95       	ret

00001988 <__mulsf3>:
    1988:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__mulsf3x>
    198c:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_round>
    1990:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_pscA>
    1994:	38 f0       	brcs	.+14     	; 0x19a4 <__mulsf3+0x1c>
    1996:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_pscB>
    199a:	20 f0       	brcs	.+8      	; 0x19a4 <__mulsf3+0x1c>
    199c:	95 23       	and	r25, r21
    199e:	11 f0       	breq	.+4      	; 0x19a4 <__mulsf3+0x1c>
    19a0:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_inf>
    19a4:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_nan>
    19a8:	11 24       	eor	r1, r1
    19aa:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_szero>

000019ae <__mulsf3x>:
    19ae:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_split3>
    19b2:	70 f3       	brcs	.-36     	; 0x1990 <__mulsf3+0x8>

000019b4 <__mulsf3_pse>:
    19b4:	95 9f       	mul	r25, r21
    19b6:	c1 f3       	breq	.-16     	; 0x19a8 <__mulsf3+0x20>
    19b8:	95 0f       	add	r25, r21
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	55 1f       	adc	r21, r21
    19be:	62 9f       	mul	r22, r18
    19c0:	f0 01       	movw	r30, r0
    19c2:	72 9f       	mul	r23, r18
    19c4:	bb 27       	eor	r27, r27
    19c6:	f0 0d       	add	r31, r0
    19c8:	b1 1d       	adc	r27, r1
    19ca:	63 9f       	mul	r22, r19
    19cc:	aa 27       	eor	r26, r26
    19ce:	f0 0d       	add	r31, r0
    19d0:	b1 1d       	adc	r27, r1
    19d2:	aa 1f       	adc	r26, r26
    19d4:	64 9f       	mul	r22, r20
    19d6:	66 27       	eor	r22, r22
    19d8:	b0 0d       	add	r27, r0
    19da:	a1 1d       	adc	r26, r1
    19dc:	66 1f       	adc	r22, r22
    19de:	82 9f       	mul	r24, r18
    19e0:	22 27       	eor	r18, r18
    19e2:	b0 0d       	add	r27, r0
    19e4:	a1 1d       	adc	r26, r1
    19e6:	62 1f       	adc	r22, r18
    19e8:	73 9f       	mul	r23, r19
    19ea:	b0 0d       	add	r27, r0
    19ec:	a1 1d       	adc	r26, r1
    19ee:	62 1f       	adc	r22, r18
    19f0:	83 9f       	mul	r24, r19
    19f2:	a0 0d       	add	r26, r0
    19f4:	61 1d       	adc	r22, r1
    19f6:	22 1f       	adc	r18, r18
    19f8:	74 9f       	mul	r23, r20
    19fa:	33 27       	eor	r19, r19
    19fc:	a0 0d       	add	r26, r0
    19fe:	61 1d       	adc	r22, r1
    1a00:	23 1f       	adc	r18, r19
    1a02:	84 9f       	mul	r24, r20
    1a04:	60 0d       	add	r22, r0
    1a06:	21 1d       	adc	r18, r1
    1a08:	82 2f       	mov	r24, r18
    1a0a:	76 2f       	mov	r23, r22
    1a0c:	6a 2f       	mov	r22, r26
    1a0e:	11 24       	eor	r1, r1
    1a10:	9f 57       	subi	r25, 0x7F	; 127
    1a12:	50 40       	sbci	r21, 0x00	; 0
    1a14:	9a f0       	brmi	.+38     	; 0x1a3c <__mulsf3_pse+0x88>
    1a16:	f1 f0       	breq	.+60     	; 0x1a54 <__mulsf3_pse+0xa0>
    1a18:	88 23       	and	r24, r24
    1a1a:	4a f0       	brmi	.+18     	; 0x1a2e <__mulsf3_pse+0x7a>
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	bb 1f       	adc	r27, r27
    1a22:	66 1f       	adc	r22, r22
    1a24:	77 1f       	adc	r23, r23
    1a26:	88 1f       	adc	r24, r24
    1a28:	91 50       	subi	r25, 0x01	; 1
    1a2a:	50 40       	sbci	r21, 0x00	; 0
    1a2c:	a9 f7       	brne	.-22     	; 0x1a18 <__mulsf3_pse+0x64>
    1a2e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a30:	51 05       	cpc	r21, r1
    1a32:	80 f0       	brcs	.+32     	; 0x1a54 <__mulsf3_pse+0xa0>
    1a34:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_inf>
    1a38:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_szero>
    1a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3e:	e4 f3       	brlt	.-8      	; 0x1a38 <__mulsf3_pse+0x84>
    1a40:	98 3e       	cpi	r25, 0xE8	; 232
    1a42:	d4 f3       	brlt	.-12     	; 0x1a38 <__mulsf3_pse+0x84>
    1a44:	86 95       	lsr	r24
    1a46:	77 95       	ror	r23
    1a48:	67 95       	ror	r22
    1a4a:	b7 95       	ror	r27
    1a4c:	f7 95       	ror	r31
    1a4e:	e7 95       	ror	r30
    1a50:	9f 5f       	subi	r25, 0xFF	; 255
    1a52:	c1 f7       	brne	.-16     	; 0x1a44 <__mulsf3_pse+0x90>
    1a54:	fe 2b       	or	r31, r30
    1a56:	88 0f       	add	r24, r24
    1a58:	91 1d       	adc	r25, r1
    1a5a:	96 95       	lsr	r25
    1a5c:	87 95       	ror	r24
    1a5e:	97 f9       	bld	r25, 7
    1a60:	08 95       	ret

00001a62 <__divmodhi4>:
    1a62:	97 fb       	bst	r25, 7
    1a64:	07 2e       	mov	r0, r23
    1a66:	16 f4       	brtc	.+4      	; 0x1a6c <__divmodhi4+0xa>
    1a68:	00 94       	com	r0
    1a6a:	07 d0       	rcall	.+14     	; 0x1a7a <__divmodhi4_neg1>
    1a6c:	77 fd       	sbrc	r23, 7
    1a6e:	09 d0       	rcall	.+18     	; 0x1a82 <__divmodhi4_neg2>
    1a70:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__udivmodhi4>
    1a74:	07 fc       	sbrc	r0, 7
    1a76:	05 d0       	rcall	.+10     	; 0x1a82 <__divmodhi4_neg2>
    1a78:	3e f4       	brtc	.+14     	; 0x1a88 <__divmodhi4_exit>

00001a7a <__divmodhi4_neg1>:
    1a7a:	90 95       	com	r25
    1a7c:	81 95       	neg	r24
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	08 95       	ret

00001a82 <__divmodhi4_neg2>:
    1a82:	70 95       	com	r23
    1a84:	61 95       	neg	r22
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255

00001a88 <__divmodhi4_exit>:
    1a88:	08 95       	ret

00001a8a <__udivmodhi4>:
    1a8a:	aa 1b       	sub	r26, r26
    1a8c:	bb 1b       	sub	r27, r27
    1a8e:	51 e1       	ldi	r21, 0x11	; 17
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <__udivmodhi4_ep>

00001a92 <__udivmodhi4_loop>:
    1a92:	aa 1f       	adc	r26, r26
    1a94:	bb 1f       	adc	r27, r27
    1a96:	a6 17       	cp	r26, r22
    1a98:	b7 07       	cpc	r27, r23
    1a9a:	10 f0       	brcs	.+4      	; 0x1aa0 <__udivmodhi4_ep>
    1a9c:	a6 1b       	sub	r26, r22
    1a9e:	b7 0b       	sbc	r27, r23

00001aa0 <__udivmodhi4_ep>:
    1aa0:	88 1f       	adc	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	5a 95       	dec	r21
    1aa6:	a9 f7       	brne	.-22     	; 0x1a92 <__udivmodhi4_loop>
    1aa8:	80 95       	com	r24
    1aaa:	90 95       	com	r25
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	08 95       	ret

00001ab2 <__itoa_ncheck>:
    1ab2:	bb 27       	eor	r27, r27
    1ab4:	4a 30       	cpi	r20, 0x0A	; 10
    1ab6:	31 f4       	brne	.+12     	; 0x1ac4 <__itoa_ncheck+0x12>
    1ab8:	99 23       	and	r25, r25
    1aba:	22 f4       	brpl	.+8      	; 0x1ac4 <__itoa_ncheck+0x12>
    1abc:	bd e2       	ldi	r27, 0x2D	; 45
    1abe:	90 95       	com	r25
    1ac0:	81 95       	neg	r24
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__utoa_common>

00001ac8 <__utoa_ncheck>:
    1ac8:	bb 27       	eor	r27, r27

00001aca <__utoa_common>:
    1aca:	fb 01       	movw	r30, r22
    1acc:	55 27       	eor	r21, r21
    1ace:	aa 27       	eor	r26, r26
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	aa 1f       	adc	r26, r26
    1ad6:	a4 17       	cp	r26, r20
    1ad8:	10 f0       	brcs	.+4      	; 0x1ade <__utoa_common+0x14>
    1ada:	a4 1b       	sub	r26, r20
    1adc:	83 95       	inc	r24
    1ade:	50 51       	subi	r21, 0x10	; 16
    1ae0:	b9 f7       	brne	.-18     	; 0x1ad0 <__utoa_common+0x6>
    1ae2:	a0 5d       	subi	r26, 0xD0	; 208
    1ae4:	aa 33       	cpi	r26, 0x3A	; 58
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <__utoa_common+0x20>
    1ae8:	a9 5d       	subi	r26, 0xD9	; 217
    1aea:	a1 93       	st	Z+, r26
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	79 f7       	brne	.-34     	; 0x1ace <__utoa_common+0x4>
    1af0:	b1 11       	cpse	r27, r1
    1af2:	b1 93       	st	Z+, r27
    1af4:	11 92       	st	Z+, r1
    1af6:	cb 01       	movw	r24, r22
    1af8:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <strrev>

00001afc <strrev>:
    1afc:	dc 01       	movw	r26, r24
    1afe:	fc 01       	movw	r30, r24
    1b00:	67 2f       	mov	r22, r23
    1b02:	71 91       	ld	r23, Z+
    1b04:	77 23       	and	r23, r23
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <strrev+0x4>
    1b08:	32 97       	sbiw	r30, 0x02	; 2
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <strrev+0x18>
    1b0c:	7c 91       	ld	r23, X
    1b0e:	6d 93       	st	X+, r22
    1b10:	70 83       	st	Z, r23
    1b12:	62 91       	ld	r22, -Z
    1b14:	ae 17       	cp	r26, r30
    1b16:	bf 07       	cpc	r27, r31
    1b18:	c8 f3       	brcs	.-14     	; 0x1b0c <strrev+0x10>
    1b1a:	08 95       	ret

00001b1c <_exit>:
    1b1c:	f8 94       	cli

00001b1e <__stop_program>:
    1b1e:	ff cf       	rjmp	.-2      	; 0x1b1e <__stop_program>
